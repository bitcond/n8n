{
  "data": [
    {
      "createdAt": "2025-09-09T19:44:24.108Z",
      "updatedAt": "2025-09-09T19:44:24.108Z",
      "id": "3QPknasOIU9a6Lls",
      "name": "Create Video Tool (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "prompt"
                },
                {
                  "name": "chatID"
                },
                {
                  "name": "videoTitle"
                },
                {
                  "name": "aspectRatio"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            -880,
            256
          ],
          "id": "8f8fec76-021e-45d5-baa6-1e6a54acd427",
          "name": "When Executed by Another Workflow"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://queue.fal.run/fal-ai/veo3/fast",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "prompt",
                  "value": "={{ $json.prompt }}"
                },
                {
                  "name": "aspect_ratio",
                  "value": "={{ $json.aspectRatio }}"
                },
                {
                  "name": "generate_audio",
                  "value": "true"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -656,
            256
          ],
          "id": "52d8c525-4584-4a8c-88ff-ec9b07123560",
          "name": "Generate Video"
        },
        {
          "parameters": {
            "url": "=https://queue.fal.run/fal-ai/veo3/requests/{{ $json.request_id }}",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -400,
            256
          ],
          "id": "c4543348-d03d-4e8d-bc1a-dc130f51e134",
          "name": "Get Result",
          "onError": "continueErrorOutput"
        },
        {
          "parameters": {
            "amount": 30
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            -256,
            256
          ],
          "id": "f3a43c79-137a-4831-a6cf-db66951c4c2c",
          "name": "30 Seconds",
          "webhookId": "5f6bbd1e-a155-48de-b737-a225c6fd7a84"
        },
        {
          "parameters": {
            "name": "={{ $('When Executed by Another Workflow').item.json.videoTitle }}.mp4",
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe",
              "mode": "list",
              "cachedResultName": "Media",
              "cachedResultUrl": "https://drive.google.com/drive/folders/1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            144,
            400
          ],
          "id": "f5ec9e01-e1c8-4d64-8fec-d291b0ef34aa",
          "name": "Upload Video"
        },
        {
          "parameters": {
            "url": "={{ $json.video.url }}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -112,
            256
          ],
          "id": "78beb627-2f06-4fdf-86d7-a79467a28b8a",
          "name": "Download File"
        },
        {
          "parameters": {
            "operation": "sendVideo",
            "chatId": "={{ $('When Executed by Another Workflow').item.json.chatID }}",
            "binaryData": true,
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            144,
            144
          ],
          "id": "ac97e56d-6e3e-494d-ac0c-3cbf315aab55",
          "name": "Send Video",
          "webhookId": "8fcbda9c-8396-41f7-8f2d-39e4ae4337c7"
        },
        {
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            -528,
            256
          ],
          "id": "0f2126f6-5c85-4f91-93fe-8c1d11ed80e4",
          "name": "1 Minute",
          "webhookId": "caad73e3-58d8-4fbd-a3e9-c42424f2d1ee"
        },
        {
          "parameters": {
            "content": "# Trigger\n",
            "height": 260,
            "width": 212,
            "color": 7
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -928,
            160
          ],
          "id": "f3ff82d8-03de-4ea4-8096-b850276a6f60",
          "name": "Sticky Note5",
          "disabled": true
        },
        {
          "parameters": {
            "content": "# Generate Video\n\n",
            "height": 260,
            "width": 732,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -704,
            160
          ],
          "id": "7d75b32e-728e-47cb-b9c9-11771d0f2252",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "content": "# Send Content",
            "height": 240,
            "width": 300,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            48,
            48
          ],
          "id": "7e4d42bf-f69b-4751-b42a-c55d13f5afb8",
          "name": "Sticky Note7"
        },
        {
          "parameters": {
            "content": "# Write to Drive",
            "height": 240,
            "width": 300,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            48,
            304
          ],
          "id": "1ad1b18c-cd55-4fae-ab2b-f96075f27f62",
          "name": "Sticky Note6"
        }
      ],
      "connections": {
        "Generate Video": {
          "main": [
            [
              {
                "node": "1 Minute",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Result": {
          "main": [
            [
              {
                "node": "Download File",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "30 Seconds",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "30 Seconds": {
          "main": [
            [
              {
                "node": "Get Result",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download File": {
          "main": [
            [
              {
                "node": "Send Video",
                "type": "main",
                "index": 0
              },
              {
                "node": "Upload Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "When Executed by Another Workflow": {
          "main": [
            [
              {
                "node": "Generate Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "1 Minute": {
          "main": [
            [
              {
                "node": "Get Result",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "a1a078f4-0822-47ba-a426-a24702ec2478",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:44:24.112Z",
          "updatedAt": "2025-09-09T19:44:24.112Z",
          "role": "workflow:owner",
          "workflowId": "3QPknasOIU9a6Lls",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-20T15:13:08.443Z",
      "updatedAt": "2025-09-21T18:30:18.000Z",
      "id": "79jqFKXxMVvxekZo",
      "name": "My workflow",
      "active": true,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "public": true,
            "initialMessages": "Hi there! 👋\nMy name is TED AI. How can I assist you today?",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chatTrigger",
          "typeVersion": 1.3,
          "position": [
            -240,
            -16
          ],
          "id": "4d820c07-2ecc-41f2-94ed-086d2379a3fe",
          "name": "When chat message received",
          "webhookId": "a44f56e0-c7b9-4d84-8e5d-624561e5af2f"
        },
        {
          "parameters": {
            "options": {
              "systemMessage": "HighLevel CRM Assistant\nOverview\nYou are an intelligent HighLevel CRM assistant. You help users manage their HighLevel CRM through natural language commands via Telegram. You have direct access to HighLevel’s powerful MCP tools and can perform any CRM operation seamlessly. You are an MCP based assistant working on location ID - i6lq9qrgyM9oz0E6PzM1.\n\nYour HighLevel Capabilities\nYou have access to 21+ powerful HighLevel tools through the Model Context Protocol (MCP).\n\nContact Management\n\"contacts_create-contact\": Create new contacts with all details (name, email, phone, tags, custom fields)\n\n\"contacts_get-contact\": Retrieve specific contact information by ID\n\n\"contacts_update-contact\": Update existing contact details\n\n\"contacts_upsert-contact\": Smart create-or-update contact (if exists, update; if not, create)\n\n\"contacts_get-contacts\": Search and list contacts with filters\n\n\"contacts_get-all-tasks\": View all tasks associated with a contact\n\n\"contacts_add-tags\": Add tags to contacts for organization\n\n\"contacts_remove-tags\": Remove tags from contacts\n\nConversations & Messaging\n\"conversations_search-conversation\": Find conversations by contact, status, or keywords\n\n\"conversations_get-messages\": Retrieve message history from conversations\n\n\"conversations_send-a-new-message\": Send SMS, email, or other messages to contacts\n\nSales Opportunities\n\"opportunities_search-opportunity\": Find opportunities by value, stage, contact, etc.\n\n\"opportunities_get-pipelines\": View all sales pipelines and their stages\n\n\"opportunities_get-opportunity\": Get detailed opportunity information\n\n\"opportunities_update-opportunity\": Update opportunity status, value, stage, notes\n\nCalendar Management\n\"calendars_get-calendar-events\": View calendar events and appointments\n\n\"calendars_get-appointment-notes\": Access appointment notes and details\n\nPayments & Orders\n\"payments_get-order-by-id\": Retrieve specific order details\n\n\"payments_list-transactions\": View transaction history with filters\n\nLocation & Configuration\n\"locations_get-location\": Get sub-account/location information\n\n\"locations_get-custom-fields\": View available custom fields for contacts\n\nHow to Interact with Users\nBe conversational, helpful, and professional\n\nAlways confirm what action you've taken\n\nProvide clear summaries of results\n\nAsk clarifying questions when you need more information\n\nUse emojis appropriately to make responses friendly\n\nExample Interactions\nContact Creation\n\nUser: \"Create a contact for Sarah Johnson with email sarah@company.com and phone 555-0123\"\n\nYou: \"I've created a new contact for Sarah Johnson.\n\nEmail: sarah@company.com\n\nPhone: 555-0123\n\nContact ID: ct_ABC123\nSarah is now in your HighLevel CRM and ready for follow-up!\"\n\nOpportunity Management\n\nUser: \"Create a $5000 opportunity for website redesign\"\n\nYou: \"I've created a new opportunity.\n\nValue: $5,000\n\nTitle: Website Redesign\n\nOpportunity ID: op_XYZ789\n\nStatus: Added to your sales pipeline\nWould you like me to assign this to a specific contact or pipeline stage?\"\n\nUser: \"Send an SMS to John saying 'Thanks for your interest in our services!'\"\n\nYou: \"SMS sent successfully to John!\n\nMessage: 'Thanks for your interest in our services!'\n\nDelivery Status: Sent\nThe message has been delivered to John’s phone number.\"\n\nMulti-Step Operations\nYou can chain multiple operations together.\n\nCreate contact → Add tags → Send welcome message\n\nFind opportunities → Update stages → Send follow-up\n\nSearch contacts → Send bulk messages\n\nError Handling\nIf something goes wrong:\n\nExplain what happened clearly\n\nSuggest alternative approaches\n\nAsk for missing information if needed\n\nData Privacy\nHandle all customer data responsibly\n\nOnly access information needed for the requested task\n\nConfirm sensitive operations before executing\n\nInstructions\nUse natural language to understand user requests\n\nAutomatically choose the appropriate HighLevel tool\n\nFormat all parameters correctly for API calls\n\nProvide detailed feedback on completed actions\n\nBe proactive in suggesting related actions that might help\n\nRemember conversation context to provide better assistance\n\nYou are the bridge between users and their HighLevel CRM - make their business management effortless through simple conversations!"
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2.2,
          "position": [
            -32,
            -16
          ],
          "id": "c622539e-8a78-4e7a-9d7a-c7218eb864e5",
          "name": "AI Agent"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "gpt-5-mini",
              "mode": "list",
              "cachedResultName": "gpt-5-mini"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            -176,
            192
          ],
          "id": "9b7e966b-e8cd-4ee9-99cf-824f09b901a5",
          "name": "OpenAI Chat Model",
          "credentials": {
            "openAiApi": {
              "id": "tbB1mbVAaNt3kwZV",
              "name": "OpenAi account"
            }
          }
        },
        {
          "parameters": {
            "contextWindowLength": 50
          },
          "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
          "typeVersion": 1.3,
          "position": [
            -32,
            192
          ],
          "id": "49f78ad1-a533-4107-91a3-c438433742c4",
          "name": "Simple Memory"
        },
        {
          "parameters": {
            "endpointUrl": "https://services.leadconnectorhq.com/mcp/",
            "serverTransport": "httpStreamable",
            "authentication": "headerAuth",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
          "typeVersion": 1.1,
          "position": [
            192,
            192
          ],
          "id": "03796bd4-0177-461a-b998-bcd6a9717d84",
          "name": "MCP Client",
          "credentials": {
            "httpHeaderAuth": {
              "id": "tcItoGVyc0TG2RNj",
              "name": "GHL_MCP"
            }
          }
        }
      ],
      "connections": {
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Simple Memory": {
          "ai_memory": [
            [
              {
                "node": "AI Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "MCP Client": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "fef2837c-2a8e-4683-ba7a-b804edb6fa56",
      "triggerCount": 1,
      "shared": [
        {
          "createdAt": "2025-09-20T15:13:08.447Z",
          "updatedAt": "2025-09-20T15:13:08.447Z",
          "role": "workflow:owner",
          "workflowId": "79jqFKXxMVvxekZo",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:43:13.599Z",
      "updatedAt": "2025-09-09T19:43:13.599Z",
      "id": "7xjH5y3Shg4RSnyO",
      "name": "Ultimate Media Agent (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "updates": [
              "message"
            ],
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.telegramTrigger",
          "typeVersion": 1.2,
          "position": [
            1536,
            320
          ],
          "id": "ec086f2d-ae64-491c-962f-a98f90b9038e",
          "name": "Telegram Trigger",
          "webhookId": "bea4843e-25e4-4d89-b3f6-4237798e9b42"
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "id": "e7211e46-0f49-46a0-9cb7-e83fed150efd",
                        "leftValue": "={{ $json.message.photo }}",
                        "rightValue": "",
                        "operator": {
                          "type": "array",
                          "operation": "exists",
                          "singleValue": true
                        }
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "Photo"
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.message.text }}",
                        "rightValue": "",
                        "operator": {
                          "type": "string",
                          "operation": "exists",
                          "singleValue": true
                        },
                        "id": "85edf561-8f5e-4215-9e19-78ff0392068e"
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "Text"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.switch",
          "typeVersion": 3.2,
          "position": [
            1664,
            320
          ],
          "id": "509e5b77-5698-47ef-9ac7-c09fd882b161",
          "name": "Switch"
        },
        {
          "parameters": {
            "resource": "file",
            "fileId": "={{ $('Telegram Trigger').item.json.message.photo[1].file_id }}",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            1840,
            192
          ],
          "id": "3b80ff9a-d6c8-406f-b0ad-99b6a293e9f0",
          "name": "Download File",
          "webhookId": "fb18f65f-c1cf-4473-b59d-d59d6b96e9ea"
        },
        {
          "parameters": {
            "name": "={{ $now.format('yyyy-MM-dd') }}",
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe",
              "mode": "list",
              "cachedResultName": "Pictures",
              "cachedResultUrl": "https://drive.google.com/drive/folders/1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            1968,
            192
          ],
          "id": "db6d6697-feaf-40ee-9f90-698b495d43f8",
          "name": "Upload file"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "53de4eb0-6684-48f5-a5b5-2b3bedaff817",
                  "name": "message.text",
                  "value": "=The user just submitted a picture. Here is the ID of that file in Google Drive: {{ $json.id }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2112,
            192
          ],
          "id": "980d471a-a794-443b-8489-8f5059f46b99",
          "name": "Set Text"
        },
        {
          "parameters": {
            "toolDescription": "An AI Agent that handles all tasks in Google Drive",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
            "options": {
              "systemMessage": "=# Overview\nYou are an AI agent in charge of Google Drive actions. \n\n## Tools\n- Change Name: use this tool to change the name of a file. For this tool, you need the file ID and the new name. \n\n- Search Media: use this tool to search through the available pictures/videos. This tool helps you find information like the file ID and the new name. \n\n- Search Docs: use this tool to search through the available media analysis docs.\n\n- Share with Email: use this tool to share a file to an email address.\n\n- Share Anyone: use this tool to share a file with anyone as a viewer."
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agentTool",
          "typeVersion": 2.2,
          "position": [
            2256,
            608
          ],
          "id": "6e73a15b-10b5-4236-895b-bfd2fe5b2387",
          "name": "Google Drive Agent"
        },
        {
          "parameters": {
            "sessionIdType": "customKey",
            "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
          },
          "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
          "typeVersion": 1.3,
          "position": [
            1600,
            736
          ],
          "id": "50a6d9a1-ce94-4c13-a461-6f152cb8cbde",
          "name": "Simple Memory"
        },
        {
          "parameters": {
            "operation": "update",
            "fileId": {
              "__rl": true,
              "mode": "id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_to_Update', ``, 'string') }}"
            },
            "newUpdatedFileName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('New_Updated_File_Name', ``, 'string') }}",
            "options": {}
          },
          "type": "n8n-nodes-base.googleDriveTool",
          "typeVersion": 3,
          "position": [
            2432,
            784
          ],
          "id": "b7776679-059e-4d99-8410-0156b9ab91f5",
          "name": "Change Name"
        },
        {
          "parameters": {
            "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
            "text": "={{ $('Ultimate Media Agent').item.json.output }}",
            "additionalFields": {
              "appendAttribution": false,
              "parse_mode": "HTML"
            }
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            3008,
            192
          ],
          "id": "f71ee0fb-da85-4aa8-8cce-ea7a9047dd45",
          "name": "Send a text message",
          "webhookId": "d02f02ff-0ddf-4e07-b4ad-fe0e2c18f168"
        },
        {
          "parameters": {
            "description": "Call this tool to edit an image. The fields to send to this tool are:\n- the image name\n- the image edit request\n- the file ID",
            "workflowId": {
              "__rl": true,
              "value": "wTYnNm3wbeV7m7ce",
              "mode": "list",
              "cachedResultName": "Edit Image Tool"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "image": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('image', ``, 'string') }}",
                "request": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('request', ``, 'string') }}",
                "chatID": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
                "pictureID": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('pictureID', ``, 'string') }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "image",
                  "displayName": "image",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "request",
                  "displayName": "request",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "chatID",
                  "displayName": "chatID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "pictureID",
                  "displayName": "pictureID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            }
          },
          "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
          "typeVersion": 2.2,
          "position": [
            2704,
            784
          ],
          "id": "29aa3428-c12b-482e-94db-5512db1b41bd",
          "name": "Edit Image"
        },
        {
          "parameters": {
            "description": "Call this tool to create an image. The fields to send to this tool are:\n1. Image name\n2. Image prompt",
            "workflowId": {
              "__rl": true,
              "value": "JF2N60jiLK3NSZS8",
              "mode": "list",
              "cachedResultName": "Create Image Tool"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "image": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('image', ``, 'string') }}",
                "prompt": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('prompt', ``, 'string') }}",
                "chatID": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "image",
                  "displayName": "image",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "prompt",
                  "displayName": "prompt",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "chatID",
                  "displayName": "chatID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            }
          },
          "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
          "typeVersion": 2.2,
          "position": [
            2816,
            784
          ],
          "id": "389a3f34-bcb2-4765-833b-dcda8e0a062f",
          "name": "Create Image"
        },
        {
          "parameters": {
            "jsCode": "// Initialize the output arrays\nconst steps = [];\nconst tokens = [];\nlet totalTokens = 0;\n\n// Process each item in the input\nfor (const item of $input.all()) {\n  let data = item.json;\n  \n  // Check if the data is an array itself (like your example JSON)\n  if (Array.isArray(data)) {\n    // Process each object in the array\n    for (const obj of data) {\n      // Extract steps information\n      if (obj.intermediateSteps && Array.isArray(obj.intermediateSteps)) {\n        for (const step of obj.intermediateSteps) {\n          if (step.action) {\n            steps.push({\n              tool: step.action.tool,\n              toolInput: step.action.toolInput,\n              observation: step.observation\n            });\n          }\n        }\n      }\n      \n      // Extract token information - FIXED PATH\n      if (obj.intermediateSteps && Array.isArray(obj.intermediateSteps)) {\n        for (const step of obj.intermediateSteps) {\n          if (step.action && step.action.messageLog && Array.isArray(step.action.messageLog)) {\n            for (const message of step.action.messageLog) {\n              // Fixed: tokenUsage instead of usage, and camelCase field names\n              if (message.kwargs && message.kwargs.response_metadata && message.kwargs.response_metadata.tokenUsage) {\n                const tokenUsage = message.kwargs.response_metadata.tokenUsage;\n                tokens.push({\n                  prompt_tokens: tokenUsage.promptTokens,\n                  completion_tokens: tokenUsage.completionTokens,\n                  total_tokens: tokenUsage.totalTokens,\n                  model_name: message.kwargs.response_metadata.model_name\n                });\n                \n                // Add the tokens to our running total\n                if (typeof tokenUsage.totalTokens === 'number') {\n                  totalTokens += tokenUsage.totalTokens;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } else {\n    // If data is not an array, process it as a single object\n    // Extract steps information\n    if (data.intermediateSteps && Array.isArray(data.intermediateSteps)) {\n      for (const step of data.intermediateSteps) {\n        if (step.action) {\n          steps.push({\n            tool: step.action.tool,\n            toolInput: step.action.toolInput,\n            observation: step.observation\n          });\n        }\n      }\n    }\n    \n    // Extract token information - FIXED PATH\n    if (data.intermediateSteps && Array.isArray(data.intermediateSteps)) {\n      for (const step of data.intermediateSteps) {\n        if (step.action && step.action.messageLog && Array.isArray(step.action.messageLog)) {\n          for (const message of step.action.messageLog) {\n            // Fixed: tokenUsage instead of usage, and camelCase field names\n            if (message.kwargs && message.kwargs.response_metadata && message.kwargs.response_metadata.tokenUsage) {\n              const tokenUsage = message.kwargs.response_metadata.tokenUsage;\n              tokens.push({\n                prompt_tokens: tokenUsage.promptTokens,\n                completion_tokens: tokenUsage.completionTokens,\n                total_tokens: tokenUsage.totalTokens,\n                model_name: message.kwargs.response_metadata.model_name\n              });\n              \n              // Add the tokens to our running total\n              if (typeof tokenUsage.totalTokens === 'number') {\n                totalTokens += tokenUsage.totalTokens;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Return the processed data with total_tokens included\nreturn [{\n  json: {\n    steps: steps,\n    tokens: tokens,\n    total_tokens: totalTokens\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            2704,
            192
          ],
          "id": "84c77898-1cfe-4ca1-8719-75a064bf3ff1",
          "name": "Clean Up"
        },
        {
          "parameters": {
            "operation": "append",
            "documentId": {
              "__rl": true,
              "value": "1ji6qJCv8YfrHVtgdCZmN9UZtHd3Ay9c_MjqKnad-_mw",
              "mode": "list",
              "cachedResultName": "Media Agent Logs",
              "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ji6qJCv8YfrHVtgdCZmN9UZtHd3Ay9c_MjqKnad-_mw/edit?usp=drivesdk"
            },
            "sheetName": {
              "__rl": true,
              "value": "gid=0",
              "mode": "list",
              "cachedResultName": "Sheet1",
              "cachedResultUrl": "https://docs.google.com/spreadsheets/d/144h5vN3d_SsZMNkZncQAKMrwJ3wkceUEq47dO7FwLyA/edit#gid=0"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Timestamp": "={{ $now.format('yyyy-MM-dd hh:m a') }}",
                "Workflow": "={{ $workflow.name }}",
                "Input": "={{ $('Telegram Trigger').item.json.message.text }}",
                "Output": "={{ $('Ultimate Media Agent').item.json.output }}",
                "Actions": "={{ JSON.stringify($json.steps, null, 2) }}",
                "Tokens": "={{ JSON.stringify($json.tokens, null, 2) }}",
                "Total Tokens": "={{ $json.total_tokens }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "Timestamp",
                  "displayName": "Timestamp",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Workflow",
                  "displayName": "Workflow",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Input",
                  "displayName": "Input",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Output",
                  "displayName": "Output",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Actions",
                  "displayName": "Actions",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Tokens",
                  "displayName": "Tokens",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Total Tokens",
                  "displayName": "Total Tokens",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleSheets",
          "typeVersion": 4.6,
          "position": [
            2848,
            192
          ],
          "id": "9193d36a-316d-468f-8cea-1854b8c3e599",
          "name": "Update Log"
        },
        {
          "parameters": {
            "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
            "text": "={{ $('Ultimate Media Agent').item.json.output }}",
            "additionalFields": {
              "appendAttribution": false,
              "parse_mode": "HTML"
            }
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            3008,
            352
          ],
          "id": "3a42f042-02c1-4f55-bc07-150a6cf70816",
          "name": "Error Message",
          "webhookId": "d02f02ff-0ddf-4e07-b4ad-fe0e2c18f168"
        },
        {
          "parameters": {
            "toolDescription": "This agent can post images on different social platforms",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agentTool",
          "typeVersion": 2.2,
          "position": [
            2960,
            608
          ],
          "id": "ee1c5e1c-f8d8-448e-bd6d-12d35e9e111b",
          "name": "Posting Agent"
        },
        {
          "parameters": {
            "sendTo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('To', ``, 'string') }}",
            "subject": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subject', ``, 'string') }}",
            "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
            "options": {
              "appendAttribution": false
            }
          },
          "type": "n8n-nodes-base.gmailTool",
          "typeVersion": 2.1,
          "position": [
            2064,
            928
          ],
          "id": "24bd3c6e-71be-4a52-b6cc-b2adafb3fd88",
          "name": "Send Email",
          "webhookId": "86c8c4b1-13bb-4ebe-acb9-30e1d7082d55"
        },
        {
          "parameters": {
            "operation": "getAll",
            "limit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Limit', `how many emails the user wants`, 'number') }}",
            "simple": false,
            "filters": {
              "sender": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Sender', `who the emails are from`, 'string') }}"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.gmailTool",
          "typeVersion": 2.1,
          "position": [
            1728,
            928
          ],
          "id": "255d2674-fb63-4179-ac54-86ce42f685df",
          "name": "Get Emails",
          "webhookId": "af4b3298-9037-44b0-aa12-2acbfbb5e66f"
        },
        {
          "parameters": {
            "resource": "draft",
            "subject": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subject', ``, 'string') }}",
            "emailType": "html",
            "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
            "options": {
              "threadId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Thread_ID', `The ID of the email thread`, 'string') }}",
              "sendTo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('To_Email', ``, 'string') }}"
            }
          },
          "type": "n8n-nodes-base.gmailTool",
          "typeVersion": 2.1,
          "position": [
            2064,
            784
          ],
          "id": "166f77af-cb69-4b74-86cd-b80cce365bec",
          "name": "Create Draft",
          "webhookId": "17016bce-d7d7-428a-a56c-f6ea122db8be"
        },
        {
          "parameters": {
            "operation": "reply",
            "messageId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_ID', `the message ID`, 'string') }}",
            "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
            "options": {
              "appendAttribution": false
            }
          },
          "type": "n8n-nodes-base.gmailTool",
          "typeVersion": 2.1,
          "position": [
            1840,
            784
          ],
          "id": "d6711f36-2245-40a4-8375-eb6670cabc38",
          "name": "Email Reply",
          "webhookId": "114785e6-a859-432b-81b4-c490c1c35b1c"
        },
        {
          "parameters": {
            "resource": "label",
            "returnAll": true
          },
          "type": "n8n-nodes-base.gmailTool",
          "typeVersion": 2.1,
          "position": [
            1840,
            928
          ],
          "id": "9fdadecf-a5d5-4511-b45f-cdfa7d8ec8b6",
          "name": "Get Labels",
          "webhookId": "9e08b59e-792d-4566-83f1-9263c9ad86ae"
        },
        {
          "parameters": {
            "operation": "addLabels",
            "messageId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_ID', `the ID of the message`, 'string') }}",
            "labelIds": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Label_Names_or_IDs', ``, 'string') }}"
          },
          "type": "n8n-nodes-base.gmailTool",
          "typeVersion": 2.1,
          "position": [
            1952,
            784
          ],
          "id": "9c31a3b6-9c66-4fad-b945-11d67a8676c7",
          "name": "Label Emails",
          "webhookId": "0e951529-2e6d-40bf-ac40-fc0947e242e2"
        },
        {
          "parameters": {
            "operation": "markAsUnread",
            "messageId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_ID', `the ID of the message`, 'string') }}"
          },
          "type": "n8n-nodes-base.gmailTool",
          "typeVersion": 2.1,
          "position": [
            1952,
            928
          ],
          "id": "1a29f84d-c5ba-4c2e-bdc2-a03d378641e1",
          "name": "Mark Unread",
          "webhookId": "a35af9d8-f67d-4ff9-803f-59ec6356e795"
        },
        {
          "parameters": {
            "toolDescription": "An email agent for all email actions",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
            "options": {
              "systemMessage": "=# Overview\nYou are an email management assistant. All emails must be formatted professionally in HTML and signed off as \"Nate.\" \n\n**Email Management Tools**   \n   - Use \"Send Email\" to send emails.  \n   - Use \"Create Draft\" if the user asks for a draft.  \n   - Use \"Get Emails\" to retrieve emails when requested.\n   - Use \"Get Labels\" to retrieve labels.\n   - Use \"Mark Unread\" to mark an email as unread. You must use \"Get Emails\" first so you have the message ID of the email to flag.\n   - Use \"Label Email\" to flag an email. You must use \"Get Emails\" first so you have the message ID of the email to flag. Then you must use \"Get Labels\" so you have the label ID.\n   - Use \"Email Reply\" to reply to an email. You must use \"Get Emails\" first so you have the message ID of the email to reply to.\n\n## Final Notes\n- Here is the current date/time: {{ $now }}"
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agentTool",
          "typeVersion": 2.2,
          "position": [
            1824,
            608
          ],
          "id": "ae81feba-e574-4c0b-8ae3-1f33d1778269",
          "name": "Email Agent"
        },
        {
          "parameters": {
            "calendar": {
              "__rl": true,
              "value": "nateherk88@gmail.com",
              "mode": "list",
              "cachedResultName": "nateherk88@gmail.com"
            },
            "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
            "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
            "additionalFields": {
              "attendees": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('attendees0_Attendees', `email of the attendee`, 'string') }}"
              ],
              "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', `event title`, 'string') }}"
            }
          },
          "type": "n8n-nodes-base.googleCalendarTool",
          "typeVersion": 1.3,
          "position": [
            2304,
            1248
          ],
          "id": "b0d3f17b-6bb7-44e4-ae98-f7946403ea8f",
          "name": "Create Event with Attendee"
        },
        {
          "parameters": {
            "calendar": {
              "__rl": true,
              "value": "nateherk88@gmail.com",
              "mode": "list",
              "cachedResultName": "nateherk88@gmail.com"
            },
            "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
            "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
            "additionalFields": {
              "attendees": [],
              "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', `event title`, 'string') }}"
            }
          },
          "type": "n8n-nodes-base.googleCalendarTool",
          "typeVersion": 1.3,
          "position": [
            2080,
            1248
          ],
          "id": "cd4e1a74-1514-4c2a-8f26-8011703ee07b",
          "name": "Create Event"
        },
        {
          "parameters": {
            "operation": "getAll",
            "calendar": {
              "__rl": true,
              "value": "nateherk88@gmail.com",
              "mode": "list",
              "cachedResultName": "nateherk88@gmail.com"
            },
            "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', `the day before the date the user requested`, 'string') }}",
            "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', `the day after the date the user requested`, 'string') }}",
            "options": {}
          },
          "type": "n8n-nodes-base.googleCalendarTool",
          "typeVersion": 1.3,
          "position": [
            1968,
            1248
          ],
          "id": "29b13375-d92d-4952-a2ec-1a6d1e5e4043",
          "name": "Get Events"
        },
        {
          "parameters": {
            "operation": "delete",
            "calendar": {
              "__rl": true,
              "value": "nateherk88@gmail.com",
              "mode": "list",
              "cachedResultName": "nateherk88@gmail.com"
            },
            "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', ``, 'string') }}",
            "options": {}
          },
          "type": "n8n-nodes-base.googleCalendarTool",
          "typeVersion": 1.3,
          "position": [
            1856,
            1248
          ],
          "id": "a13a799b-ac1c-44ec-8210-f0461ee5d39e",
          "name": "Delete Event"
        },
        {
          "parameters": {
            "operation": "update",
            "calendar": {
              "__rl": true,
              "value": "nateherk88@gmail.com",
              "mode": "list",
              "cachedResultName": "nateherk88@gmail.com"
            },
            "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', ``, 'string') }}",
            "updateFields": {
              "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
              "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}"
            }
          },
          "type": "n8n-nodes-base.googleCalendarTool",
          "typeVersion": 1.3,
          "position": [
            2192,
            1248
          ],
          "id": "2add8a6e-adac-44b1-83d6-ad4a9f0b5744",
          "name": "Update Event"
        },
        {
          "parameters": {
            "toolDescription": "A calendar agent for all calendar actions",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
            "options": {
              "systemMessage": "=# Overview\nYou are a calendar assistant. Your responsibilities include creating, getting, and deleting events in the user's calendar.\n\n**Calendar Management Tools**  \n   - Use \"Create Event with Attendee\" when an event includes a participant.  \n   - Use \"Create Event\" for solo events.   \n   - Use \"Get Events\" to fetch calendar schedules when requested.\n   - Use \"Delete Event\" to delete an event. You must use \"Get Events\" first to get the ID of the event to delete.\n   - Use \"Update Event\" to update an event. You must use \"Get Events\" first to get the ID of the event to update.\n\n## Final Notes\nHere is the current date/time: {{ $now }}\nIf a duration for an event isn't specified, assume it will be one hour."
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agentTool",
          "typeVersion": 2.2,
          "position": [
            1920,
            1104
          ],
          "id": "48b9e9e4-15d1-4740-981a-9c95af36df7d",
          "name": "Calendar Agent"
        },
        {
          "parameters": {
            "operation": "search",
            "base": {
              "__rl": true,
              "value": "appK0rbtvf9e7vt6w",
              "mode": "list",
              "cachedResultName": "Contacts",
              "cachedResultUrl": "https://airtable.com/appK0rbtvf9e7vt6w"
            },
            "table": {
              "__rl": true,
              "value": "tbl08JGCfUK1RhXsG",
              "mode": "list",
              "cachedResultName": "Contacts",
              "cachedResultUrl": "https://airtable.com/appK0rbtvf9e7vt6w/tbl08JGCfUK1RhXsG"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtableTool",
          "typeVersion": 2.1,
          "position": [
            1456,
            1248
          ],
          "id": "f43dfc9c-deb8-470b-a2fc-008b7b73d0ac",
          "name": "Get Contacts"
        },
        {
          "parameters": {
            "operation": "upsert",
            "base": {
              "__rl": true,
              "value": "appK0rbtvf9e7vt6w",
              "mode": "list",
              "cachedResultName": "Contacts",
              "cachedResultUrl": "https://airtable.com/appK0rbtvf9e7vt6w"
            },
            "table": {
              "__rl": true,
              "value": "tbl08JGCfUK1RhXsG",
              "mode": "list",
              "cachedResultName": "Contacts",
              "cachedResultUrl": "https://airtable.com/appK0rbtvf9e7vt6w/tbl08JGCfUK1RhXsG"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('name__using_to_match_', ``, 'string') }}",
                "email": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('email', ``, 'string') }}",
                "phoneNumber": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('phoneNumber', ``, 'string') }}"
              },
              "matchingColumns": [
                "name"
              ],
              "schema": [
                {
                  "id": "id",
                  "displayName": "id",
                  "required": false,
                  "defaultMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": true,
                  "removed": true
                },
                {
                  "id": "name",
                  "displayName": "name",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "email",
                  "displayName": "email",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "phoneNumber",
                  "displayName": "phoneNumber",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Type",
                  "displayName": "Type",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Personal",
                      "value": "Personal"
                    },
                    {
                      "name": "Business",
                      "value": "Business"
                    },
                    {
                      "name": "Home",
                      "value": "Home"
                    }
                  ],
                  "readOnly": false,
                  "removed": true
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtableTool",
          "typeVersion": 2.1,
          "position": [
            1568,
            1248
          ],
          "id": "c07f79f3-db22-4a0c-ba18-b2751b1860d7",
          "name": "Add or Update Contact"
        },
        {
          "parameters": {
            "toolDescription": "Contact agent for all contact actions, like getting contacts",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
            "options": {
              "systemMessage": "=# Overview\nYou are a contact management assistant. Your responsibilities include looking up contacts, adding new contacts, or updating a contact's information.\n\n**Contact Management**  \n   - Use \"Get Contacts\" to retrieve contact information. \n   - Use \"Add or Update Contact\" to store new contact information or modify existing entries. "
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agentTool",
          "typeVersion": 2.2,
          "position": [
            1376,
            1104
          ],
          "id": "8ae909f4-495f-444f-bca5-43ca8971cafd",
          "name": "Contact Agent"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            1728,
            784
          ],
          "id": "1ec6d38b-86af-493b-bb97-2a573b043d23",
          "name": "GPT 4.1-mini1"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            1744,
            1248
          ],
          "id": "bae00223-23bb-4e57-9ef3-443505829f02",
          "name": "GPT 4.1-mini2"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            1328,
            1248
          ],
          "id": "8f5165d8-d0cc-4a1f-a14d-0169e798cf41",
          "name": "GPT 4.1-mini3"
        },
        {
          "parameters": {
            "toolDescription": "This agent can search through different social platforms",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
            "options": {
              "systemMessage": "=# Overview\nYou are a social media search agent. Your job is to use the correct tool to search on the right platform. The fields to send to each tool are:\n- How many videos\n- The search query for those videos\n\n## Tools\n- Instagram Search: use this to search Instagram\n- YouTube Search: use this to search YouTube\n- TikTok Search: use this to search TikTok\n\n## Instructions\nWhen searching, the search query should just be one word or one term. It shouldn't be an array of search terms. "
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agentTool",
          "typeVersion": 2.2,
          "position": [
            2992,
            1104
          ],
          "id": "a093a9e5-1bbd-48b0-acbd-411261bb8431",
          "name": "Social Media Agent"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.apify.com/v2/acts/apify~instagram-hashtag-scraper/run-sync-get-dataset-items",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "apifyApi",
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n    \"hashtags\": [\n        \"{{ $fromAI(\"searchTerm\") }}\"\n    ],\n    \"resultsLimit\": {{ $fromAI(\"results\") }},\n    \"resultsType\": \"posts\"\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequestTool",
          "typeVersion": 4.2,
          "position": [
            3216,
            1248
          ],
          "id": "1293478b-e65e-42e8-8727-893fd48ac700",
          "name": "Instagram Search"
        },
        {
          "parameters": {
            "toolDescription": "Use this tool to find high-performing YouTube videos",
            "method": "POST",
            "url": "https://api.apify.com/v2/acts/streamers~youtube-scraper/run-sync-get-dataset-items",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "apifyApi",
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n    \"dateFilter\": \"month\",\n    \"downloadSubtitles\": false,\n    \"hasCC\": false,\n    \"hasLocation\": false,\n    \"hasSubtitles\": false,\n    \"is360\": false,\n    \"is3D\": false,\n    \"is4K\": false,\n    \"isBought\": false,\n    \"isHD\": false,\n    \"isHDR\": false,\n    \"isLive\": false,\n    \"isVR180\": false,\n    \"maxResultStreams\": 0,\n    \"maxResults\": {{$fromAI(\"maxResults\",\"how many videos the user wants, if not specified, default to 3\",\"number\",3)}},\n    \"maxResultsShorts\": 0,\n    \"oldestPostDate\": \"6 months\",\n    \"preferAutoGeneratedSubtitles\": false,\n    \"saveSubsToKVS\": false,\n    \"searchQueries\": [\n        \"{{$fromAI(\"searchTerm\",\"The topic of the video to search for\")}}\"\n    ],\n    \"sortVideosBy\": \"POPULAR\",\n    \"sortingOrder\": \"views\"\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequestTool",
          "typeVersion": 4.2,
          "position": [
            3072,
            1248
          ],
          "id": "88135910-0942-4a13-b1c8-75dd1a0a8d1e",
          "name": "YouTube Search"
        },
        {
          "parameters": {
            "toolDescription": "An agent that can create images and videos and edit images",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
            "options": {
              "systemMessage": "=# Overview\nYou are a creative agent. Use your tools to take action as requested. \n\nYou are an expert AI image/video prompt generator\n\n## Tools\n- Edit Image: Use this tool to edit an image\n- Create Image: Use this tool to create an image\n- Image to Video: Use this tool to turn an image into a video\n- Create Video: Use this tool to create a video from text\n\n## Instructions\n- Image prompts should be detailed and stylized\n- Video prompts should be concise, energetic, and should be one seamless video with no cuts. Explain the sounds in the video or any dialogue."
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agentTool",
          "typeVersion": 2.2,
          "position": [
            2624,
            608
          ],
          "id": "e08d1949-5d73-4436-aab1-f6bed4ba887d",
          "name": "Creative Agent"
        },
        {
          "parameters": {
            "description": "Call this tool to post a file on Instagram. The fields needed are:\n1. the Google Drive file ID\n2. the text for the post",
            "workflowId": {
              "__rl": true,
              "value": "nrU0CVm0F9Yuiqqh",
              "mode": "list",
              "cachedResultName": "Instagram Post"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "fileID": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fileID', ``, 'string') }}",
                "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('text', ``, 'string') }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "fileID",
                  "displayName": "fileID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "text",
                  "displayName": "text",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            }
          },
          "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
          "typeVersion": 2.2,
          "position": [
            3120,
            928
          ],
          "id": "8d67bb36-f9c4-4c4a-af81-c6bac88afac3",
          "name": "Instagram Post"
        },
        {
          "parameters": {},
          "type": "@n8n/n8n-nodes-langchain.toolThink",
          "typeVersion": 1.1,
          "position": [
            1504,
            736
          ],
          "id": "ae386916-ca9d-4cb8-8023-2fb7db7d40ba",
          "name": "Think"
        },
        {
          "parameters": {
            "operation": "share",
            "fileId": {
              "__rl": true,
              "mode": "id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File', ``, 'string') }}"
            },
            "permissionsUi": {
              "permissionsValues": {
                "role": "reader",
                "type": "user",
                "emailAddress": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Email_Address', ``, 'string') }}"
              }
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDriveTool",
          "typeVersion": 3,
          "position": [
            2432,
            928
          ],
          "id": "069b523d-586c-4e9f-9ef7-81b13e88c9d7",
          "name": "Share with Email"
        },
        {
          "parameters": {
            "operation": "share",
            "fileId": {
              "__rl": true,
              "mode": "id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File', ``, 'string') }}"
            },
            "permissionsUi": {
              "permissionsValues": {
                "role": "reader",
                "type": "anyone"
              }
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDriveTool",
          "typeVersion": 3,
          "position": [
            2320,
            928
          ],
          "id": "e0246a82-c9f0-4e48-acc5-6fcf83b91819",
          "name": "Share Anyone"
        },
        {
          "parameters": {
            "description": "Call this tool to post a file on X. The fields needed are:\n1. the Google Drive file ID\n2. the text for the post",
            "workflowId": {
              "__rl": true,
              "value": "XVDzyGSsC8apv1Xd",
              "mode": "list",
              "cachedResultName": "X Post"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "fileID": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fileID', ``, 'string') }}",
                "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('text', ``, 'string') }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "fileID",
                  "displayName": "fileID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "text",
                  "displayName": "text",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            }
          },
          "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
          "typeVersion": 2.2,
          "position": [
            3120,
            784
          ],
          "id": "0e73ed0d-1e3d-4020-b08e-833508afd6c3",
          "name": "X Post"
        },
        {
          "parameters": {
            "resource": "fileFolder",
            "returnAll": true,
            "filter": {
              "folderId": {
                "__rl": true,
                "value": "1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe",
                "mode": "list",
                "cachedResultName": "Media",
                "cachedResultUrl": "https://drive.google.com/drive/folders/1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe"
              }
            },
            "options": {
              "fields": [
                "id",
                "name"
              ]
            }
          },
          "type": "n8n-nodes-base.googleDriveTool",
          "typeVersion": 3,
          "position": [
            2320,
            784
          ],
          "id": "b42615c1-47ac-47ea-a74d-53d7651ceda7",
          "name": "Search Media"
        },
        {
          "parameters": {
            "jsCode": "// Initialize the output arrays\nconst steps = [];\nconst tokens = [];\nlet totalTokens = 0;\n\n// Process each item in the input\nfor (const item of $input.all()) {\n  let data = item.json;\n  \n  // Check if the data is an array itself (like your example JSON)\n  if (Array.isArray(data)) {\n    // Process each object in the array\n    for (const obj of data) {\n      // Extract steps information\n      if (obj.intermediateSteps && Array.isArray(obj.intermediateSteps)) {\n        for (const step of obj.intermediateSteps) {\n          if (step.action) {\n            steps.push({\n              tool: step.action.tool,\n              toolInput: step.action.toolInput,\n              observation: step.observation\n            });\n          }\n        }\n      }\n      \n      // Extract token information - FIXED PATH\n      if (obj.intermediateSteps && Array.isArray(obj.intermediateSteps)) {\n        for (const step of obj.intermediateSteps) {\n          if (step.action && step.action.messageLog && Array.isArray(step.action.messageLog)) {\n            for (const message of step.action.messageLog) {\n              // Fixed: tokenUsage instead of usage, and camelCase field names\n              if (message.kwargs && message.kwargs.response_metadata && message.kwargs.response_metadata.tokenUsage) {\n                const tokenUsage = message.kwargs.response_metadata.tokenUsage;\n                tokens.push({\n                  prompt_tokens: tokenUsage.promptTokens,\n                  completion_tokens: tokenUsage.completionTokens,\n                  total_tokens: tokenUsage.totalTokens,\n                  model_name: message.kwargs.response_metadata.model_name\n                });\n                \n                // Add the tokens to our running total\n                if (typeof tokenUsage.totalTokens === 'number') {\n                  totalTokens += tokenUsage.totalTokens;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } else {\n    // If data is not an array, process it as a single object\n    // Extract steps information\n    if (data.intermediateSteps && Array.isArray(data.intermediateSteps)) {\n      for (const step of data.intermediateSteps) {\n        if (step.action) {\n          steps.push({\n            tool: step.action.tool,\n            toolInput: step.action.toolInput,\n            observation: step.observation\n          });\n        }\n      }\n    }\n    \n    // Extract token information - FIXED PATH\n    if (data.intermediateSteps && Array.isArray(data.intermediateSteps)) {\n      for (const step of data.intermediateSteps) {\n        if (step.action && step.action.messageLog && Array.isArray(step.action.messageLog)) {\n          for (const message of step.action.messageLog) {\n            // Fixed: tokenUsage instead of usage, and camelCase field names\n            if (message.kwargs && message.kwargs.response_metadata && message.kwargs.response_metadata.tokenUsage) {\n              const tokenUsage = message.kwargs.response_metadata.tokenUsage;\n              tokens.push({\n                prompt_tokens: tokenUsage.promptTokens,\n                completion_tokens: tokenUsage.completionTokens,\n                total_tokens: tokenUsage.totalTokens,\n                model_name: message.kwargs.response_metadata.model_name\n              });\n              \n              // Add the tokens to our running total\n              if (typeof tokenUsage.totalTokens === 'number') {\n                totalTokens += tokenUsage.totalTokens;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Return the processed data with total_tokens included\nreturn [{\n  json: {\n    steps: steps,\n    tokens: tokens,\n    total_tokens: totalTokens\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            2704,
            352
          ],
          "id": "c4e704d2-1319-46c4-a07a-84e452c12f2d",
          "name": "Clean Up1"
        },
        {
          "parameters": {
            "operation": "append",
            "documentId": {
              "__rl": true,
              "value": "1ji6qJCv8YfrHVtgdCZmN9UZtHd3Ay9c_MjqKnad-_mw",
              "mode": "list",
              "cachedResultName": "Media Agent Logs",
              "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ji6qJCv8YfrHVtgdCZmN9UZtHd3Ay9c_MjqKnad-_mw/edit?usp=drivesdk"
            },
            "sheetName": {
              "__rl": true,
              "value": "gid=0",
              "mode": "list",
              "cachedResultName": "Sheet1",
              "cachedResultUrl": "https://docs.google.com/spreadsheets/d/144h5vN3d_SsZMNkZncQAKMrwJ3wkceUEq47dO7FwLyA/edit#gid=0"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Timestamp": "={{ $now.format('yyyy-MM-dd hh:m a') }}",
                "Workflow": "={{ $workflow.name }}",
                "Input": "={{ $('Telegram Trigger').item.json.message.text }}",
                "Output": "=Error Execution:{{ $execution.id }}",
                "Actions": "={{ JSON.stringify($json.steps, null, 2) }}",
                "Tokens": "={{ JSON.stringify($json.tokens, null, 2) }}",
                "Total Tokens": "={{ $json.total_tokens }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "Timestamp",
                  "displayName": "Timestamp",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Workflow",
                  "displayName": "Workflow",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Input",
                  "displayName": "Input",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Output",
                  "displayName": "Output",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Actions",
                  "displayName": "Actions",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Tokens",
                  "displayName": "Tokens",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Total Tokens",
                  "displayName": "Total Tokens",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleSheets",
          "typeVersion": 4.6,
          "position": [
            2848,
            352
          ],
          "id": "3233dc6e-b549-439a-9582-60c82056bd54",
          "name": "Update Log1"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.message.text }}",
            "needsFallback": true,
            "options": {
              "systemMessage": "=# Overview\nYou are the ultimate manager agent. Your job is to help the user out with the task by using your tools to delegate the task to the correct tool. You should never be writing emails or creating summaries — your sole responsibility is to call the correct tool.\n\n## Tools\n- Google Drive Agent: Use this tool to take action in Google drive\n- Email Agent: Use this tool to take action in email\n- Calendar Agent: Use this tool to take action in calendar\n- Contact Agent: Use this tool to take action with contacts\n- Social Media Agent: Use this agent to search for posts on a social platform\n- Creative Agent: Use this agent to create images, edit images, turn images to video, and create videos\n- Posting Agent: Use this agent to post on social media. You must send the fileID and the post caption\n- Web Agent: Use this agent to search the web for anything\n- Create Doc: Use this tool to create a google doc, always send the user the link to the finished doc once it has been created.\n- Think: Use this when you feel stuck and need to think about what to do next.\n\n## Instructions\n1) If the user submits a photo, ask them what to call that photo, then change it's name in google drive.\n2) Some actions require you to look up contact information first. For the following actions, you must get contact information and send that to the agent who needs it:\n  - sending emails\n  - drafting emails\n  - creating calendar event with attendee\n3) Images/videos are found in the database, use the Google Drive Agent to get those\n4) Before asking follow up questions, use your think tool to figure out what to do next\n5) Before posting anything, the file must be shared to anyone in Google drive\n6) When creating videos, don't ask how long they should be\n7) Always output a message back to the user, never say nothing",
              "returnIntermediateSteps": true
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2.2,
          "position": [
            2272,
            336
          ],
          "id": "40d80e0b-5de2-40e4-b564-335083c95b7e",
          "name": "Ultimate Media Agent",
          "onError": "continueErrorOutput"
        },
        {
          "parameters": {
            "model": "openai/gpt-5-mini",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            1600,
            624
          ],
          "id": "d54f6753-52a5-404d-922d-3d8fa0c26bce",
          "name": "GPT 5-mini"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "gpt-5-mini",
              "mode": "list",
              "cachedResultName": "gpt-5-mini"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            1504,
            624
          ],
          "id": "1c3cfb79-a1f5-4b8e-83c8-9abb5ad1d1e3",
          "name": "Fallback"
        },
        {
          "parameters": {
            "model": "openai/gpt-5-mini",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            2208,
            784
          ],
          "id": "a6497aac-68c4-4768-b111-0fdefc40c59d",
          "name": "GPT 5-mini1"
        },
        {
          "parameters": {
            "model": "openai/gpt-5-mini",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            2976,
            784
          ],
          "id": "77b3859d-c271-494e-b330-b9b4e9a71536",
          "name": "GPT 5-mini2"
        },
        {
          "parameters": {
            "model": "openai/gpt-5-mini",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            2944,
            1248
          ],
          "id": "2866c0d3-e85a-44f6-a8f7-6f6fcbd4c1de",
          "name": "GPT 5-mini3"
        },
        {
          "parameters": {
            "model": "openai/gpt-5-mini",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            2592,
            784
          ],
          "id": "1ab4d99a-12bc-4562-92ea-538f8b822a66",
          "name": "GPT 5-mini4"
        },
        {
          "parameters": {
            "description": "Call this tool to create a Google Doc. The fields to send over are:\n1. The title of the doc\n2. The content for the doc",
            "workflowId": {
              "__rl": true,
              "value": "KWsy9aPUNkLxzMPV",
              "mode": "list",
              "cachedResultName": "Create Doc Tool"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('title', ``, 'string') }}",
                "content": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('content', ``, 'string') }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "title",
                  "displayName": "title",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "content",
                  "displayName": "content",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            }
          },
          "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
          "typeVersion": 2.2,
          "position": [
            3296,
            608
          ],
          "id": "51788b63-b3e1-4e4c-bbc9-9063f81a7196",
          "name": "Create Doc"
        },
        {
          "parameters": {
            "resource": "fileFolder",
            "returnAll": true,
            "filter": {
              "folderId": {
                "__rl": true,
                "value": "1dgxFHKKunJbtvJl7nDjqSddlG2UROu3E",
                "mode": "list",
                "cachedResultName": "Media Analysis",
                "cachedResultUrl": "https://drive.google.com/drive/folders/1dgxFHKKunJbtvJl7nDjqSddlG2UROu3E"
              }
            },
            "options": {
              "fields": [
                "id",
                "name"
              ]
            }
          },
          "type": "n8n-nodes-base.googleDriveTool",
          "typeVersion": 3,
          "position": [
            2208,
            928
          ],
          "id": "1ac8ab2e-1ca7-490b-a26a-dcd3d189a69f",
          "name": "Search Docs"
        },
        {
          "parameters": {},
          "type": "@tavily/n8n-nodes-tavily.tavilyTool",
          "typeVersion": 1,
          "position": [
            2560,
            1248
          ],
          "id": "e21b9183-be9f-48cc-ac29-735525351236",
          "name": "Tavily",
          "credentials": {}
        },
        {
          "parameters": {
            "model": "sonar",
            "messages": {
              "message": [
                {
                  "content": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message0_Text', ``, 'string') }}"
                }
              ]
            },
            "options": {},
            "requestOptions": {}
          },
          "type": "n8n-nodes-base.perplexityTool",
          "typeVersion": 1,
          "position": [
            2672,
            1248
          ],
          "id": "fc1479ed-93ea-4e99-9fbe-9009b3998abc",
          "name": "Perplexity"
        },
        {
          "parameters": {
            "format": "imperial",
            "cityName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('City', `City name, no state`, 'string') }}",
            "language": "en"
          },
          "type": "n8n-nodes-base.openWeatherMapTool",
          "typeVersion": 1,
          "position": [
            2784,
            1248
          ],
          "id": "5059a242-ff7a-4035-9ccb-705a9db8e1d3",
          "name": "OpenWeatherMap"
        },
        {
          "parameters": {
            "toolDescription": "A research agent for all research actions",
            "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
            "options": {
              "systemMessage": "=# Overview\nYou are a web research assistant. Your responsibilities include conducting quick web searches, performing deeper research, and retrieving current weather information. \n\n## Web Search & Research \n   - Use Tavily for quick factual lookups, recent news, or verifying specific pieces of information.  \n   - Use Perplexity when a question requires deeper research, multiple perspectives, or synthesized answers from various sources.  \n\n## Weather Information  \n   - Use Open Weather Map to retrieve current weather data, including temperature, conditions, and forecasts for a given location.\n"
            }
          },
          "type": "@n8n/n8n-nodes-langchain.agentTool",
          "typeVersion": 2.2,
          "position": [
            2512,
            1104
          ],
          "id": "85589dcc-7aba-4f2c-8f98-d66c3448bd4a",
          "name": "Web Agent"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "typeVersion": 1,
          "position": [
            2448,
            1248
          ],
          "id": "8309e147-b9a4-4cc6-8c77-80e1e57c07a3",
          "name": "GPT 4.1-mini4"
        },
        {
          "parameters": {
            "description": "Call this tool to create a video from a text prompt. The fields to pass over are:\n1. Video prompt\n2. Video title\n3. aspect ratio (Possible enum values: 16:9, 9:16, 1:1)",
            "workflowId": {
              "__rl": true,
              "value": "dDlwPUmRvgVXyClB",
              "mode": "list",
              "cachedResultName": "Create Video Tool"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "chatID": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
                "prompt": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('prompt', ``, 'string') }}",
                "videoTitle": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('videoTitle', ``, 'string') }}",
                "aspectRatio": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('aspectRatio', ``, 'string') }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "prompt",
                  "displayName": "prompt",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "chatID",
                  "displayName": "chatID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "videoTitle",
                  "displayName": "videoTitle",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "aspectRatio",
                  "displayName": "aspectRatio",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string",
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            }
          },
          "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
          "typeVersion": 2.2,
          "position": [
            2768,
            928
          ],
          "id": "0c7f9db8-f153-4bc5-96f8-1ba7d78af4b4",
          "name": "Create Video"
        },
        {
          "parameters": {
            "description": "Call this tool to post a file on TikTok. The fields needed are:\n1. the Google Drive file ID\n2. the text for the post",
            "workflowId": {
              "__rl": true,
              "value": "HCSEx2GqMubEs0wQ",
              "mode": "list",
              "cachedResultName": "TikTok Post Tool"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "fileID": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fileID', ``, 'string') }}",
                "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('text', ``, 'string') }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "fileID",
                  "displayName": "fileID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "text",
                  "displayName": "text",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            }
          },
          "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
          "typeVersion": 2.2,
          "position": [
            2976,
            928
          ],
          "id": "b7650ccd-1238-47c5-9c95-3f0e23688dff",
          "name": "TikTok Post"
        },
        {
          "parameters": {
            "toolDescription": "Use this tool to search TikTok for posts",
            "method": "POST",
            "url": "https://api.apify.com/v2/acts/clockworks~tiktok-scraper/run-sync-get-dataset-items",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "apifyApi",
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n    \"excludePinnedPosts\": false,\n    \"hashtags\": [\n        \"{{ $fromAI(\"searchTerm\") }}\"\n    ],\n    \"proxyCountryCode\": \"None\",\n    \"resultsPerPage\": {{ $fromAI(\"numberResults\",\"how many results to get\",\"number\") }},\n    \"scrapeRelatedVideos\": false,\n    \"shouldDownloadAvatars\": false,\n    \"shouldDownloadCovers\": false,\n    \"shouldDownloadMusicCovers\": false,\n    \"shouldDownloadSlideshowImages\": false,\n    \"shouldDownloadSubtitles\": false,\n    \"shouldDownloadVideos\": false\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequestTool",
          "typeVersion": 4.2,
          "position": [
            3344,
            1248
          ],
          "id": "14b877f8-f43d-4e11-9e3b-5a86c994ab76",
          "name": "TikTok Search"
        },
        {
          "parameters": {
            "description": "Call this tool to create a video ad from a picture. The fields to pass over are:\n1. Google Drive file ID of the image\n2. Video prompt\n3. Name of the image\n4. aspect ratio (Possible enum values: 16:9, 9:16, 1:1)",
            "workflowId": {
              "__rl": true,
              "value": "5821tlVzSOLDaDTb",
              "mode": "list",
              "cachedResultName": "Image to Video Tool"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "fileID": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fileID', ``, 'string') }}",
                "videoPrompt": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('videoPrompt', ``, 'string') }}",
                "image": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('image', ``, 'string') }}",
                "chatID": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "fileID",
                  "displayName": "fileID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "videoPrompt",
                  "displayName": "videoPrompt",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "chatID",
                  "displayName": "chatID",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                },
                {
                  "id": "image",
                  "displayName": "image",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string"
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            }
          },
          "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
          "typeVersion": 2.2,
          "position": [
            2656,
            928
          ],
          "id": "d7986877-5c33-40fb-9920-bac50c739c37",
          "name": "Image to Video"
        },
        {
          "parameters": {
            "content": "# 🛠️ Setup Guide  \n**Author:** [Nate Herk](https://www.youtube.com/@nateherk)\n\nFollow the instructions below to get your full media automation suite up and running in n8n.\n\n📄 [Cost breakdown doc](https://docs.google.com/document/u/1/d/1A-qGcg8ga1daJsU7AqOvPLSba1yKSaVMMlCfCTERv48/copy) shown in the full YouTube video.\n---\n\n### 📦 JSON Workflows to Download (8 Files)\n\n#### 🎨 Creative Agent (4 Workflows)\n- Edit Image  \n- Create an Image  \n- Image to Video  \n- Create Video\n\n#### 📣 Posting Agent (3 Workflows)\n- X Post  \n- TikTok Post  \n- Instagram Post\n\n> ⚠️ **Note:** These three posting workflows are currently set up to handle **Google Drive files**.  \nIf you store your files elsewhere (e.g., Dropbox, S3), you'll need to rework these flows.  \n🎥 Watch my [full video on Blotato here](https://youtu.be/QovlUE_VlWQ?si=I4usfgP-JtLUJDwt) where I explain how this works.\n\n#### 🧰 Utility Tool\n- Create Doc Tool\n\n> ✅ *The rest of the subagents should integrate seamlessly — no need to fetch a bunch of subflows.*\n\n🧩 Once downloaded, **make sure to link each of these workflows properly** in your environment.  \nYour current master workflow must connect correctly to the relevant agent tools (e.g., Edit Image, Create Video, etc.) via **\"Call n8n Workflow Tools\"**.\n\n---\n\n### 📁 Google Environment Setup\n\n**Google Drive Folders:**\n- 📂 `Media Analysis` — Holds generated documents  \n- 🖼️ `Media` — Stores all media files  \n\n---\n\n**Google Drive Agent Connections:**\n- 🔍 **Search Docs tool** – pointed to `Media Analysis` folder  \n- 🎞️ **Search Media tool** – pointed to `Media` folder\n\n---\n\n### 📊 Google Sheets Integration\n- 📋 Make a copy of the **[provided template Google Sheet](https://docs.google.com/spreadsheets/u/2/d/1ji6qJCv8YfrHVtgdCZmN9UZtHd3Ay9c_MjqKnad-_mw/copy)**  \n- 🔗 Link it inside the two Google Sheet nodes to log the agent’s actions/tokens\n\n---\n\n### 🔐 Credential Configuration\nConnect your required credentials (click any name to go straight to their API/dashboard):\n\n- 🧠 [OpenRouter](https://openrouter.ai/) (chat model)  \n- 🎨 [OpenAI](https://platform.openai.com/) (image generation/edits)  \n- 🎬 [Fal.ai](https://fal.ai/) (video creation)  \n- 🔗 [ImgBB](https://imgbb.com/) (public URL for files)\n- ✉️ Gmail  \n- 📇 Airtable  \n- 📆 Google Calendar  \n- 🗂️ [Google Drive](https://drive.google.com/)  \n- 📄 Google Docs  \n- 📊 Google Sheets  \n- 📲 Telegram  \n- 🔎 [Tavily](https://tavily.com/)  \n- 🧭 [Perplexity](https://www.perplexity.ai/)  \n- 🌦️ [OpenWeatherMap](https://openweathermap.org/api)  \n- 🕷️ [Apify](https://www.apify.com/?fpr=nate)  \n- 🥔 [Blotato](https://blotato.com/?ref=nate)\n\n> 💡 *These ensure the workflows run end-to-end with full integration.*\n\n---\n\n### 💸 Discounts\n\n#### 🥔 [Blotato](https://blotato.com/?ref=nate) (if used for posting)\n- 🆓 **Free trial:** 7 days  \n- 💵 **Standard plan:** $29/month  \n- 🔐 **Promo Code:** `NATE30`  \n  - 30% off for 6 months → ~$20.30/month\n\n#### 🕷️ [Apify](https://www.apify.com/?fpr=nate) Scrapers\n- 🆓 **Free tier:** $5 usage credits/month  \n- ⚙️ **Starter:** $39/month (includes $39 in store credit)  \n- 🔐 **Promo Code:** `30NATEHHERK`  \n  - 30% off first 3 months → ~$27.30/month (effective)\n\n---\n\n### ✅ Final Step: Test & Go\nOnce folders, links, workflows, and credentials are connected, you're ready to go with minimal setup!\n",
            "height": 2256,
            "width": 1232
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            0,
            0
          ],
          "id": "f42c43c6-c407-4043-92b3-0eb1491639de",
          "name": "Sticky Note1"
        }
      ],
      "connections": {
        "Telegram Trigger": {
          "main": [
            [
              {
                "node": "Switch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Switch": {
          "main": [
            [
              {
                "node": "Download File",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Ultimate Media Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download File": {
          "main": [
            [
              {
                "node": "Upload file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload file": {
          "main": [
            [
              {
                "node": "Set Text",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Text": {
          "main": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Drive Agent": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Simple Memory": {
          "ai_memory": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Change Name": {
          "ai_tool": [
            [
              {
                "node": "Google Drive Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Edit Image": {
          "ai_tool": [
            [
              {
                "node": "Creative Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Create Image": {
          "ai_tool": [
            [
              {
                "node": "Creative Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Clean Up": {
          "main": [
            [
              {
                "node": "Update Log",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Log": {
          "main": [
            [
              {
                "node": "Send a text message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Posting Agent": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Send Email": {
          "ai_tool": [
            [
              {
                "node": "Email Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Get Emails": {
          "ai_tool": [
            [
              {
                "node": "Email Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Create Draft": {
          "ai_tool": [
            [
              {
                "node": "Email Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Email Reply": {
          "ai_tool": [
            [
              {
                "node": "Email Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Get Labels": {
          "ai_tool": [
            [
              {
                "node": "Email Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Label Emails": {
          "ai_tool": [
            [
              {
                "node": "Email Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Mark Unread": {
          "ai_tool": [
            [
              {
                "node": "Email Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Create Event with Attendee": {
          "ai_tool": [
            [
              {
                "node": "Calendar Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Create Event": {
          "ai_tool": [
            [
              {
                "node": "Calendar Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Get Events": {
          "ai_tool": [
            [
              {
                "node": "Calendar Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Delete Event": {
          "ai_tool": [
            [
              {
                "node": "Calendar Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Update Event": {
          "ai_tool": [
            [
              {
                "node": "Calendar Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Get Contacts": {
          "ai_tool": [
            [
              {
                "node": "Contact Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Add or Update Contact": {
          "ai_tool": [
            [
              {
                "node": "Contact Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "GPT 4.1-mini1": {
          "ai_languageModel": [
            [
              {
                "node": "Email Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "GPT 4.1-mini2": {
          "ai_languageModel": [
            [
              {
                "node": "Calendar Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "GPT 4.1-mini3": {
          "ai_languageModel": [
            [
              {
                "node": "Contact Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Calendar Agent": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Email Agent": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Contact Agent": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Social Media Agent": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Instagram Search": {
          "ai_tool": [
            [
              {
                "node": "Social Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "YouTube Search": {
          "ai_tool": [
            [
              {
                "node": "Social Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Creative Agent": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Instagram Post": {
          "ai_tool": [
            [
              {
                "node": "Posting Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Think": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Share with Email": {
          "ai_tool": [
            [
              {
                "node": "Google Drive Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Share Anyone": {
          "ai_tool": [
            [
              {
                "node": "Google Drive Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "X Post": {
          "ai_tool": [
            [
              {
                "node": "Posting Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Search Media": {
          "ai_tool": [
            [
              {
                "node": "Google Drive Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Clean Up1": {
          "main": [
            [
              {
                "node": "Update Log1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Log1": {
          "main": [
            [
              {
                "node": "Error Message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Ultimate Media Agent": {
          "main": [
            [
              {
                "node": "Clean Up",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Clean Up1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "GPT 5-mini": {
          "ai_languageModel": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Fallback": {
          "ai_languageModel": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_languageModel",
                "index": 1
              }
            ]
          ]
        },
        "GPT 5-mini1": {
          "ai_languageModel": [
            [
              {
                "node": "Google Drive Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "GPT 5-mini2": {
          "ai_languageModel": [
            [
              {
                "node": "Posting Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "GPT 5-mini3": {
          "ai_languageModel": [
            [
              {
                "node": "Social Media Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "GPT 5-mini4": {
          "ai_languageModel": [
            [
              {
                "node": "Creative Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Create Doc": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Search Docs": {
          "ai_tool": [
            [
              {
                "node": "Google Drive Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Perplexity": {
          "ai_tool": [
            [
              {
                "node": "Web Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "OpenWeatherMap": {
          "ai_tool": [
            [
              {
                "node": "Web Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "GPT 4.1-mini4": {
          "ai_languageModel": [
            [
              {
                "node": "Web Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Web Agent": {
          "ai_tool": [
            [
              {
                "node": "Ultimate Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Create Video": {
          "ai_tool": [
            [
              {
                "node": "Creative Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "TikTok Post": {
          "ai_tool": [
            [
              {
                "node": "Posting Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "TikTok Search": {
          "ai_tool": [
            [
              {
                "node": "Social Media Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Image to Video": {
          "ai_tool": [
            [
              {
                "node": "Creative Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "64ccbde0-dfa9-4896-b51f-1e97d6fd722c",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:43:13.603Z",
          "updatedAt": "2025-09-09T19:43:13.603Z",
          "role": "workflow:owner",
          "workflowId": "7xjH5y3Shg4RSnyO",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:44:02.936Z",
      "updatedAt": "2025-09-09T19:44:02.936Z",
      "id": "8JLUAJPHybjxZEgn",
      "name": "Create Image Tool (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "operation": "toBinary",
            "sourceProperty": "data[0].b64_json",
            "options": {}
          },
          "type": "n8n-nodes-base.convertToFile",
          "typeVersion": 1.1,
          "position": [
            -144,
            256
          ],
          "id": "d01b5826-16d3-4c6d-9078-ecb8af03a661",
          "name": "Convert to File"
        },
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "image"
                },
                {
                  "name": "prompt"
                },
                {
                  "name": "chatID"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            -608,
            256
          ],
          "id": "8b056f77-8a05-4b69-8718-2ee4422d4cd3",
          "name": "When Executed by Another Workflow"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.openai.com/v1/images/generations",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "model",
                  "value": "gpt-image-1"
                },
                {
                  "name": "prompt",
                  "value": "={{ $json.prompt }}"
                },
                {
                  "name": "size",
                  "value": "1024x1024"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -336,
            256
          ],
          "id": "b921be65-aba5-4426-adea-99ce533c39dc",
          "name": "Generate Image"
        },
        {
          "parameters": {
            "content": "# Trigger\n",
            "height": 240,
            "width": 260,
            "color": 7
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -688,
            176
          ],
          "id": "927ebca2-c8a1-4d62-ae04-53d58d3b563c",
          "name": "Sticky Note5",
          "disabled": true
        },
        {
          "parameters": {
            "content": "# Generate Image\n",
            "height": 240,
            "width": 400,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -384,
            176
          ],
          "id": "66dd2888-a2c9-4e9f-8dbe-02f260e8652c",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "content": "# Send Content",
            "height": 240,
            "width": 300,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            48,
            48
          ],
          "id": "bb411be5-ac42-47e3-813f-0170286dfa55",
          "name": "Sticky Note7"
        },
        {
          "parameters": {
            "content": "# Write to Drive",
            "height": 240,
            "width": 300,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            48,
            336
          ],
          "id": "0a8cdec7-c1f1-4e99-97b9-0eb61aacd581",
          "name": "Sticky Note6"
        },
        {
          "parameters": {
            "operation": "sendPhoto",
            "chatId": "={{ $('When Executed by Another Workflow').item.json.chatID }}",
            "binaryData": true,
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            144,
            128
          ],
          "id": "fee0af00-8243-4261-bde5-cc843f91baa7",
          "name": "Send Photo",
          "webhookId": "8fcbda9c-8396-41f7-8f2d-39e4ae4337c7"
        },
        {
          "parameters": {
            "name": "={{ $('When Executed by Another Workflow').item.json.image }}.png",
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe",
              "mode": "list",
              "cachedResultName": "Media",
              "cachedResultUrl": "https://drive.google.com/drive/folders/1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            144,
            416
          ],
          "id": "329623a4-316b-48ea-929d-14eecd51a7a7",
          "name": "Upload file"
        }
      ],
      "connections": {
        "Convert to File": {
          "main": [
            [
              {
                "node": "Upload file",
                "type": "main",
                "index": 0
              },
              {
                "node": "Send Photo",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "When Executed by Another Workflow": {
          "main": [
            [
              {
                "node": "Generate Image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Image": {
          "main": [
            [
              {
                "node": "Convert to File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "94e8c6df-4d33-463b-93a1-8903d01b71d3",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:44:02.938Z",
          "updatedAt": "2025-09-09T19:44:02.938Z",
          "role": "workflow:owner",
          "workflowId": "8JLUAJPHybjxZEgn",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:44:51.181Z",
      "updatedAt": "2025-09-09T19:44:51.181Z",
      "id": "AO5pgihWWGCyJly9",
      "name": "Edit Image Tool (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "image"
                },
                {
                  "name": "request"
                },
                {
                  "name": "chatID"
                },
                {
                  "name": "pictureID"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            -896,
            240
          ],
          "id": "0601dd20-965e-436a-915b-24706905de93",
          "name": "When Executed by Another Workflow"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.openai.com/v1/images/edits",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "contentType": "multipart-form-data",
            "bodyParameters": {
              "parameters": [
                {
                  "parameterType": "formBinaryData",
                  "name": "image",
                  "inputDataFieldName": "data"
                },
                {
                  "name": "prompt",
                  "value": "={{ $('When Executed by Another Workflow').item.json.request.replace(/\"/g, '') }}"
                },
                {
                  "name": "model",
                  "value": "gpt-image-1"
                },
                {
                  "name": "size",
                  "value": "1024x1024"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -368,
            240
          ],
          "id": "7cb0772f-0e62-4383-adac-f32496284747",
          "name": "Edit Image"
        },
        {
          "parameters": {
            "operation": "toBinary",
            "sourceProperty": "data[0].b64_json",
            "options": {}
          },
          "type": "n8n-nodes-base.convertToFile",
          "typeVersion": 1.1,
          "position": [
            -144,
            240
          ],
          "id": "8f122a70-5db1-4580-adff-7b73ea46f744",
          "name": "Convert to File"
        },
        {
          "parameters": {
            "name": "={{ $('When Executed by Another Workflow').item.json.image }} (Edited).png",
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe",
              "mode": "list",
              "cachedResultName": "Media",
              "cachedResultUrl": "https://drive.google.com/drive/folders/1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            160,
            384
          ],
          "id": "b4e54bed-95d7-43c0-a1ce-3eafe46a069f",
          "name": "Upload Image"
        },
        {
          "parameters": {
            "content": "# Edit Image\n",
            "height": 260,
            "width": 460,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -448,
            160
          ],
          "id": "007765fe-b180-41ac-b4d5-a251f2376a2e",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "content": "# Send Content",
            "height": 240,
            "width": 300,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            48,
            48
          ],
          "id": "d4a81396-df7e-4784-9a8b-67cbd574fb5c",
          "name": "Sticky Note7"
        },
        {
          "parameters": {
            "content": "# Write to Drive",
            "height": 240,
            "width": 300,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            48,
            304
          ],
          "id": "daadf7eb-2ffa-431f-8937-fad3eb24213c",
          "name": "Sticky Note6"
        },
        {
          "parameters": {
            "content": "# Trigger\n",
            "height": 260,
            "width": 260,
            "color": 7
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -976,
            160
          ],
          "id": "041cf8f6-0f41-4c9d-86bf-3c05e9ab89f6",
          "name": "Sticky Note5",
          "disabled": true
        },
        {
          "parameters": {
            "content": "# Download\n",
            "height": 260,
            "width": 220,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -688,
            160
          ],
          "id": "ea9d22c5-d456-49e8-ad0f-a7fc64c61d74",
          "name": "Sticky Note4"
        },
        {
          "parameters": {
            "operation": "sendPhoto",
            "chatId": "={{ $('When Executed by Another Workflow').item.json.chatID }}",
            "binaryData": true,
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            160,
            128
          ],
          "id": "51772a5d-aa83-45a0-adaa-77ce25556bbb",
          "name": "Send Photo",
          "webhookId": "85dc0064-e5c5-45a9-91a5-60e5b2bc4f1e"
        },
        {
          "parameters": {
            "operation": "download",
            "fileId": {
              "__rl": true,
              "value": "={{ $json.pictureID }}",
              "mode": "id"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -640,
            240
          ],
          "id": "ecb0cd0e-c0ca-4411-b9b1-65577cdc2c96",
          "name": "Download"
        }
      ],
      "connections": {
        "When Executed by Another Workflow": {
          "main": [
            [
              {
                "node": "Download",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Image": {
          "main": [
            [
              {
                "node": "Convert to File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Convert to File": {
          "main": [
            [
              {
                "node": "Send Photo",
                "type": "main",
                "index": 0
              },
              {
                "node": "Upload Image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download": {
          "main": [
            [
              {
                "node": "Edit Image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "adf95425-f514-4536-8e79-74fa6a3482ee",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:44:51.185Z",
          "updatedAt": "2025-09-09T19:44:51.185Z",
          "role": "workflow:owner",
          "workflowId": "AO5pgihWWGCyJly9",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:45:17.704Z",
      "updatedAt": "2025-09-09T19:45:17.704Z",
      "id": "CEOAAM7Dp5B4UwWR",
      "name": "Image to Video Tool (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "fileID"
                },
                {
                  "name": "videoPrompt"
                },
                {
                  "name": "chatID"
                },
                {
                  "name": "image"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            -1456,
            224
          ],
          "id": "1592a902-9e4e-4092-a711-41bd4c5b0083",
          "name": "When Executed by Another Workflow"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://queue.fal.run/fal-ai/veo3/fast/image-to-video",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "prompt",
                  "value": "={{ $('When Executed by Another Workflow').item.json.videoPrompt }}"
                },
                {
                  "name": "generate_audio",
                  "value": "true"
                },
                {
                  "name": "image_url",
                  "value": "={{ $json.data.url }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -720,
            224
          ],
          "id": "551dedc6-dbb8-4c92-9cd6-fe828e82a9f2",
          "name": "Generate Video"
        },
        {
          "parameters": {
            "url": "=https://queue.fal.run/fal-ai/veo3/requests/{{ $json.request_id }}",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -464,
            224
          ],
          "id": "927c6d1b-d8de-4921-b8e9-32eeb97aa966",
          "name": "Get Result",
          "onError": "continueErrorOutput"
        },
        {
          "parameters": {
            "amount": 30
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            -320,
            224
          ],
          "id": "8c135f7d-99fd-4044-8eb6-aec09c00a4d5",
          "name": "30 Seconds",
          "webhookId": "5f6bbd1e-a155-48de-b737-a225c6fd7a84"
        },
        {
          "parameters": {
            "operation": "share",
            "fileId": {
              "__rl": true,
              "value": "={{ $('When Executed by Another Workflow').item.json.fileID }}",
              "mode": "id"
            },
            "permissionsUi": {
              "permissionsValues": {
                "role": "reader",
                "type": "anyone"
              }
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -1232,
            224
          ],
          "id": "29a27cbe-e2ba-4640-a15c-0da24f9c5d26",
          "name": "Share file"
        },
        {
          "parameters": {
            "operation": "download",
            "fileId": {
              "__rl": true,
              "value": "={{ $('When Executed by Another Workflow').item.json.fileID }}",
              "mode": "id"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -1088,
            224
          ],
          "id": "dba0876a-0125-4e24-9b5a-ba9e922fcb6f",
          "name": "Download file"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.imgbb.com/1/upload",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpQueryAuth",
            "sendBody": true,
            "contentType": "multipart-form-data",
            "bodyParameters": {
              "parameters": [
                {
                  "parameterType": "formBinaryData",
                  "name": "image",
                  "inputDataFieldName": "data"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -944,
            224
          ],
          "id": "7d615f40-839b-4c4f-8b1a-85dc120631af",
          "name": "Get URL"
        },
        {
          "parameters": {
            "name": "={{ $('When Executed by Another Workflow').item.json.image }} (VFX).mp4",
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe",
              "mode": "list",
              "cachedResultName": "Media",
              "cachedResultUrl": "https://drive.google.com/drive/folders/1Fm7PN1nMICKnAZpf6-3YYrSJlBEQ7Xbe"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            96,
            352
          ],
          "id": "2d601b51-43cb-4ba6-83fd-d1a215f85da5",
          "name": "Upload Video"
        },
        {
          "parameters": {
            "url": "={{ $json.video.url }}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -176,
            224
          ],
          "id": "49beb080-4794-4cad-8493-08ca37ba9a9e",
          "name": "Download File"
        },
        {
          "parameters": {
            "operation": "sendVideo",
            "chatId": "={{ $('When Executed by Another Workflow').item.json.chatID }}",
            "binaryData": true,
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            96,
            96
          ],
          "id": "7fc22246-81e8-4047-830b-02e13a1a73d6",
          "name": "Send Video",
          "webhookId": "8fcbda9c-8396-41f7-8f2d-39e4ae4337c7"
        },
        {
          "parameters": {
            "amount": 1,
            "unit": "minutes"
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            -592,
            224
          ],
          "id": "76e330a8-9490-4460-a6e8-3a9930ff1b8c",
          "name": "1 Minute",
          "webhookId": "caad73e3-58d8-4fbd-a3e9-c42424f2d1ee"
        },
        {
          "parameters": {
            "content": "# Trigger\n",
            "height": 260,
            "width": 212,
            "color": 7
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -1504,
            128
          ],
          "id": "a7e9cf88-720c-45a8-928d-38721c2b1a4a",
          "name": "Sticky Note5",
          "disabled": true
        },
        {
          "parameters": {
            "content": "# Download\n",
            "height": 260,
            "width": 476,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -1280,
            128
          ],
          "id": "63baa83b-d68a-4f00-b28b-d0f851701f00",
          "name": "Sticky Note4"
        },
        {
          "parameters": {
            "content": "# Generate Video\n\n",
            "height": 260,
            "width": 764,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -784,
            128
          ],
          "id": "a8557b2d-663d-4e3f-95c3-3cc1f8196b6c",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "content": "# Send Content",
            "height": 240,
            "width": 300,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            0,
            0
          ],
          "id": "c23e0fb1-0f2e-4514-9e33-155cda8c23b5",
          "name": "Sticky Note7"
        },
        {
          "parameters": {
            "content": "# Write to Drive",
            "height": 240,
            "width": 300,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            0,
            256
          ],
          "id": "6a2e4edf-4670-470f-be18-4f0a974dba90",
          "name": "Sticky Note6"
        }
      ],
      "connections": {
        "Generate Video": {
          "main": [
            [
              {
                "node": "1 Minute",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Result": {
          "main": [
            [
              {
                "node": "Download File",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "30 Seconds",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "30 Seconds": {
          "main": [
            [
              {
                "node": "Get Result",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "When Executed by Another Workflow": {
          "main": [
            [
              {
                "node": "Share file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Share file": {
          "main": [
            [
              {
                "node": "Download file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download file": {
          "main": [
            [
              {
                "node": "Get URL",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get URL": {
          "main": [
            [
              {
                "node": "Generate Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download File": {
          "main": [
            [
              {
                "node": "Send Video",
                "type": "main",
                "index": 0
              },
              {
                "node": "Upload Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "1 Minute": {
          "main": [
            [
              {
                "node": "Get Result",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "9698677f-ee74-4ed3-90a5-a2b63fec4024",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:45:17.707Z",
          "updatedAt": "2025-09-09T19:45:17.707Z",
          "role": "workflow:owner",
          "workflowId": "CEOAAM7Dp5B4UwWR",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:36:16.202Z",
      "updatedAt": "2025-09-09T19:36:19.000Z",
      "id": "VBtevCgc721HPgYX",
      "name": "IG / Tik / Lin researcher (Shab Noor)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "content": "## LinkedIn\n- search by keyword(s)\n- filter by date\n- sort by popularity\n- run sentiment analysis\n-- what makes it work\n-- virality factors\n-- similar content ideas\n-- comments\nhttps://rapidapi.com/karimgreek/api/linkedin-data-scraper-api1/playground/apiendpoint_94fa3e7d-d557-4522-88d1-d99adc622622\n\n## Instagram\n- search by user\n- filter by date\n- run sentiment analysis..etc etc\nhttps://rapidapi.com/premium-apis-oanor/api/instagram-scraper21/playground/apiendpoint_8689d1e3-6999-44c5-907f-c88018959484\n\n## Tiktok\n- search by keyword(s)\n- filter by date\n- sort by popularity\n- run sentiment analysis\n-- what makes it work\n-- virality factors\n-- similar content ideas\n-- comments\nhttps://rapidapi.com/Lundehund/api/tiktok-api23/playground/apiendpoint_321f8dd4-f660-49a8-8ba1-bbf1beb830de\n\nhttps://console.apify.com/actors/GdWCkxBtKWOsKjdch/input",
            "height": 680,
            "width": 1220
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -1456,
            48
          ],
          "typeVersion": 1,
          "id": "0caf4f9c-7b4c-4275-853b-6f9088e8e34a",
          "name": "Sticky Note"
        },
        {
          "parameters": {
            "url": "=https://instagram-scraper21.p.rapidapi.com/api/v1/post-info",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "code",
                  "value": "={{ $json.code }}"
                }
              ]
            },
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-rapidapi-host",
                  "value": "instagram-scraper21.p.rapidapi.com"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            1920,
            640
          ],
          "id": "23c208f4-c984-4502-8398-750338f99748",
          "name": "HTTP Request"
        },
        {
          "parameters": {
            "jsCode": "const manifest = $input.first().json.data.post.dash_info.video_dash_manifest;\n\n// Extract the <AdaptationSet> with contentType=\"audio\"\nconst audioAdaptationSetMatch = manifest.match(/<AdaptationSet[^>]*contentType=\"audio\"[^>]*>[\\s\\S]*?<\\/AdaptationSet>/);\n\nif (!audioAdaptationSetMatch) {\n  return [{ json: { error: \"Audio AdaptationSet not found\" } }];\n}\n\n// Extract <BaseURL> within the audio section\nconst baseUrlMatch = audioAdaptationSetMatch[0].match(/<BaseURL>(.*?)<\\/BaseURL>/);\n\nif (!baseUrlMatch || !baseUrlMatch[1]) {\n  return [{ json: { error: \"BaseURL not found in audio AdaptationSet\" } }];\n}\n\n// Decode HTML entities like &amp;\nconst decodedUrl = baseUrlMatch[1].replace(/&amp;/g, '&');\n\nreturn [\n  {\n    json: {\n      audio_url: decodedUrl\n    }\n  }\n];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            2176,
            640
          ],
          "id": "77ce9191-48c8-42ac-b489-33c23f7a7f01",
          "name": "Code1"
        },
        {
          "parameters": {
            "resource": "audio",
            "operation": "transcribe",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            2768,
            640
          ],
          "id": "c05ac77f-0c90-4c1d-ad6f-911ff2306be8",
          "name": "OpenAI"
        },
        {
          "parameters": {
            "url": "={{ $json.audio_url }}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            2448,
            640
          ],
          "id": "46ad7983-9bd4-4f27-a2f1-7e48f52e4b33",
          "name": "HTTP Request1"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.manualTrigger",
          "typeVersion": 1,
          "position": [
            -1152,
            1264
          ],
          "id": "daaad752-a3de-4276-b087-5df758bb0e4b",
          "name": "When clicking ‘Execute workflow’"
        },
        {
          "parameters": {
            "operation": "search",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tbl7UBjpcmrSOBJPu",
              "mode": "list",
              "cachedResultName": "Inspiration",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tbl7UBjpcmrSOBJPu"
            },
            "filterByFormula": "AND({Platform} = \"Instagram\", {Status} = \"Listening\")",
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            256,
            512
          ],
          "id": "cc78ae21-7841-4533-9d1f-b1b148764b2a",
          "name": "Search records"
        },
        {
          "parameters": {
            "url": "https://instagram-scraper21.p.rapidapi.com/api/v1/posts",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "username",
                  "value": "={{ $json['Keyword or User'] }}"
                }
              ]
            },
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-rapidapi-host",
                  "value": "instagram-scraper21.p.rapidapi.com"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            480,
            512
          ],
          "id": "64623932-95bc-4348-a54a-1d277b480632",
          "name": "HTTP Request3"
        },
        {
          "parameters": {
            "fieldToSplitOut": "data.posts",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            704,
            512
          ],
          "id": "41c1d35b-7174-492d-8668-0085c79db8c9",
          "name": "Split Out"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "a52cb3f1-0178-4056-999c-ef49fd7abef0",
                  "leftValue": "={{ new Date($json[\"created_at_human_readable\"]) }}",
                  "rightValue": "={{ new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }}",
                  "operator": {
                    "type": "dateTime",
                    "operation": "after"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            928,
            512
          ],
          "id": "222e50a9-acd2-4bde-a194-0e636fb6368b",
          "name": "Filter"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "2573d92e-e6bd-4f3d-a47e-4ef846b9c7b6",
                  "leftValue": "={{ $json.like_count }}",
                  "rightValue": "={{ $('Search records').item.json['Minimum Like/View Count'] }}",
                  "operator": {
                    "type": "number",
                    "operation": "gt"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            1152,
            512
          ],
          "id": "18ab7024-c0f6-48c5-ac78-9e30a00da4f9",
          "name": "Filter1"
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.product_type }}",
                        "rightValue": "carousel_container",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "id": "4d20b6d1-d68b-4012-b015-155c74c70e1e"
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "Carousel"
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "id": "56fd3192-a2cd-441d-b49e-d37aff16c92c",
                        "leftValue": "={{ $json.product_type }}",
                        "rightValue": "clips",
                        "operator": {
                          "type": "string",
                          "operation": "equals",
                          "name": "filter.operator.equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "Reels"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.switch",
          "typeVersion": 3.2,
          "position": [
            1376,
            512
          ],
          "id": "22dc6f23-d725-403c-90ca-310cded291c9",
          "name": "Switch"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            1600,
            768
          ],
          "id": "ef5b4e40-7999-4d3f-af5a-50c5fc8d522e",
          "name": "Loop Over Items"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Viral Social Media Content Analysis Prompt\nSystem Instructions\nYou are an expert social media content analyst specializing in viral content patterns. Your task is to analyze social media posts across multiple dimensions and provide actionable framework suggestions.\nInput Data\n\nCaption: {{ $json.caption }}\nScript: {{ $json.script }}\n\nAnalysis Framework\nRequired Analysis Dimensions\n\nEmotional Resonance\n\nPrimary emotion triggered (joy, surprise, anger, fear, sadness, disgust, trust, anticipation)\nEmotional intensity (1-10 scale)\nEmotional journey/arc throughout the content\nRelatability factor\n\n\nContent Structure & Hook\n\nOpening hook effectiveness\nNarrative structure (story arc, problem-solution, revelation, etc.)\nPacing and rhythm\nCall-to-action strength\n\n\nEngagement Mechanics\n\nShareability factors\nComment-driving elements\nViral triggers (controversy, humor, relatability, shock, utility)\nCommunity-building potential\n\n\nTrend Alignment\n\nCurrent trend participation\nTrending audio/format usage\nHashtag strategy effectiveness\nPlatform-specific optimization\n\n\nAuthenticity & Voice\n\nPerceived authenticity level\nPersonal brand alignment\nUnique value proposition\nAudience connection strength\n\n\nProduction Quality\n\nVisual/audio production value\nContent clarity and coherence\nTechnical execution\nProfessional vs. organic feel\n\n\n\nOutput Requirements\nProvide your analysis in this simplified JSON structure for easy Airtable mapping:\n\n```json\n{\n  \"viral_score\": \"number (1-100)\",\n  \"primary_strengths\": \"string (comma-separated top 3 strengths)\",\n  \"framework_1\": \"Framework Name: Brief description and key implementation step\",\n  \"framework_2\": \"Framework Name: Brief description and key implementation step\", \n  \"framework_3\": \"Framework Name: Brief description and key implementation step\"\n}\n```\n\nFramework Selection Guidelines\nChoose frameworks from these categories based on the content analysis:\nContent Creation Frameworks\n\nProblem-Agitation-Solution (PAS): For educational/solution-oriented content\nBefore-After-Bridge (BAB): For transformation content\nStory-Lesson-Call to Action: For narrative-driven content\nHook-Value-Proof: For educational/authority content\n\nEngagement Frameworks\n\nControversy-Clarity-Community: For discussion-driving content\nTrend-Twist-Amplify: For trend-based content\nPersonal-Universal-Actionable: For relatable content\nQuestion-Journey-Resolution: For mystery/curiosity content\n\nViral Mechanics Frameworks\n\nEmotional-Shareable-Memorable: For highly viral content\nNiche-Specific-Scalable: For community-building content\nVisual-Audio-Text Trinity: For multi-sensory content\nAuthentic-Aspirational-Accessible: For lifestyle content\n\nAdditional Instructions\n\nViral Score: Rate 1-100 based on overall viral potential considering all dimensions\nPrimary Strengths: Identify the top 3 most impactful elements with brief explanations of why they work (e.g., \"Strong emotional hook (creates immediate connection), trending audio (boosts algorithm reach), relatable story (drives comments)\")\nFramework Format: Each framework should be: \"Name: 1-2 sentence description + one key action step\"\nConcise Output: Keep framework fields under 200 characters, primary strengths can be up to 300 characters for explanations\nActionable Focus: Prioritize immediately implementable insights over theoretical analysis\n\n## Example Output Format:\n```json\n{\n  \"viral_score\": \"78\",\n  \"primary_strengths\": \"Emotional storytelling, trending format, strong hook\",\n  \"framework_1\": \"Problem-Solution Framework: Opens with relatable problem, builds tension, provides clear solution. Action: Start with 'Have you ever...' question\",\n  \"framework_2\": \"Trend-Twist Strategy: Uses trending audio with unique spin. Action: Apply your personal story to current trending sound\",\n  \"framework_3\": \"Community-Building Arc: Encourages sharing experiences. Action: End with 'Comment your experience below'\"\n}\n```",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            3072,
            640
          ],
          "id": "340bc41c-f602-4207-982f-568009e8d886",
          "name": "Basic LLM Chain"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"viral_score\": \"78\",\n  \"primary_strengths\": \"Emotional storytelling, trending format, strong hook\",\n  \"framework_1\": \"Problem-Solution Framework: Opens with relatable problem, builds tension, provides clear solution. Action: Start with 'Have you ever...' question\",\n  \"framework_2\": \"Trend-Twist Strategy: Uses trending audio with unique spin. Action: Apply your personal story to current trending sound\",\n  \"framework_3\": \"Community-Building Arc: Encourages sharing experiences. Action: End with 'Comment your experience below'\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            3168,
            864
          ],
          "id": "d1993c76-2f34-4689-8c24-087b2f16eb15",
          "name": "Structured Output Parser"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tbla6GNwPXjx0yalQ",
              "mode": "list",
              "cachedResultName": "Instagram Ideas",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tbla6GNwPXjx0yalQ"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Post ID": "={{ $('HTTP Request').item.json.data.post.shortcode }}",
                "Post Type": "Reel",
                "Caption": "={{ $('HTTP Request').item.json.data.post.edge_media_to_caption.edges[0].node.text }}",
                "Script": "={{ $('OpenAI').item.json.text }}",
                "Viral Score": "={{ $json.output.viral_score }}",
                "Primary Strengths": "={{ $json.output.primary_strengths }}",
                "Idea Framework 1": "={{ $json.output.framework_1 }}",
                "Idea Framework 2": "={{ $json.output.framework_2 }}",
                "Idea Framework 3": "={{ $json.output.framework_3 }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "Post ID",
                  "displayName": "Post ID",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "URL",
                  "displayName": "URL",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": true
                },
                {
                  "id": "Post Type",
                  "displayName": "Post Type",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Reel",
                      "value": "Reel"
                    },
                    {
                      "name": "Carousel",
                      "value": "Carousel"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Number of Slides",
                  "displayName": "Number of Slides",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": true
                },
                {
                  "id": "Caption",
                  "displayName": "Caption",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Script",
                  "displayName": "Script",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Viral Score",
                  "displayName": "Viral Score",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Primary Strengths",
                  "displayName": "Primary Strengths",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Idea Framework 1",
                  "displayName": "Idea Framework 1",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Idea Framework 2",
                  "displayName": "Idea Framework 2",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Idea Framework 3",
                  "displayName": "Idea Framework 3",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            3568,
            768
          ],
          "id": "366e2052-ee03-4373-9fbe-3cff640cb015",
          "name": "Create a record"
        },
        {
          "parameters": {
            "url": "=https://instagram-scraper21.p.rapidapi.com/api/v1/post-info",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "code",
                  "value": "={{ $json.code }}"
                }
              ]
            },
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-rapidapi-host",
                  "value": "instagram-scraper21.p.rapidapi.com"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            1920,
            144
          ],
          "id": "08e0d011-3cfc-4ad0-bcdf-a1eb57f535ca",
          "name": "HTTP Request2"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            1600,
            272
          ],
          "id": "d658b2e6-c38d-4e79-8552-65fb581d3ce6",
          "name": "Loop Over Items1"
        },
        {
          "parameters": {
            "resource": "image",
            "operation": "analyze",
            "modelId": {
              "__rl": true,
              "value": "chatgpt-4o-latest",
              "mode": "list",
              "cachedResultName": "CHATGPT-4O-LATEST"
            },
            "text": "What's the text in this image?\n\nAnd how is the image designed(eg is it a tweet, a post-it, so on)",
            "inputType": "base64",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            2448,
            144
          ],
          "id": "67ef50a0-2004-4595-ae0e-47d96d939dbd",
          "name": "Analyze image"
        },
        {
          "parameters": {
            "url": "={{ $json.data.post.thumbnail_src }}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            2224,
            144
          ],
          "id": "9ae0bc1f-d3c7-4400-ac5c-3b803d7d8f3f",
          "name": "HTTP Request4"
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "chatgpt-4o-latest",
              "mode": "list",
              "cachedResultName": "CHATGPT-4O-LATEST"
            },
            "messages": {
              "values": [
                {
                  "content": "={{ $json.content }}\n\nRedo this output as\n\n{\n\"text_from_image\": \"text\",\n\"design\": \"one-two word description of design(Tweet, Post-it, etc)\"\n}"
                }
              ]
            },
            "jsonOutput": true,
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            2672,
            144
          ],
          "id": "f7706133-53aa-4513-9af9-c9c2d7b4085f",
          "name": "Message a model"
        },
        {
          "parameters": {
            "jsCode": "// Access the array\nconst edges = $('HTTP Request2').first().json.data.post.edge_sidecar_to_children.edges\n\n// Count the number of items\nconst count = edges.length;\n\nreturn [\n  {\n    json: {\n      length: count\n    }\n  }\n];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            3120,
            144
          ],
          "id": "1be238bf-079e-401a-934b-069177943ddc",
          "name": "Code"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=# Carousel Post Analysis Prompt\n\n## System Instructions\nYou are an expert social media content analyst specializing in carousel post optimization. Your task is to analyze carousel posts across multiple dimensions and provide actionable framework suggestions for maximum engagement and virality.\n\n## Input Data\n- **First Image Text**: {{ $('Message a model').item.json.message.content.text_from_image }}\n- **Design Style**: {{ $('Message a model').item.json.message.content.design }}\n- **Caption**: {{ $('HTTP Request4').item.json.data.post.edge_media_to_caption.edges[0].node.text }}\n- **Number of Carousel Images**: {{ $json.length }}\n\n## Analysis Framework\n\n### Required Analysis Dimensions\n\n1. **Hook & First Impression**\n   - First image/slide effectiveness as scroll-stopper\n   - Visual hierarchy and readability\n   - Curiosity gap creation\n   - Value proposition clarity\n\n2. **Carousel Flow & Structure**\n   - Logical content progression\n   - Optimal slide count utilization\n   - Information density per slide\n   - Story arc development across slides\n\n3. **Visual Design & Consistency**\n   - Design cohesiveness across slides\n   - Brand alignment and recognition\n   - Color psychology and contrast\n   - Typography effectiveness and readability\n\n4. **Engagement Optimization**\n   - Swipe-through motivation\n   - Educational value delivery\n   - Shareability factors\n   - Comment-driving elements\n\n5. **Platform Mechanics**\n   - Carousel-specific algorithm factors\n   - Completion rate optimization\n   - Caption-carousel synergy\n   - Hashtag strategy effectiveness\n\n6. **Content Value & Authority**\n   - Educational/entertainment balance\n   - Expertise demonstration\n   - Actionable takeaways\n   - Unique insight provision\n\n## Output Requirements\n\nProvide your analysis in this simplified JSON structure for easy Airtable mapping:\n\n```json\n{\n  \"carousel_score\": \"number (1-100)\",\n  \"primary_strengths\": \"string (top 3 strengths with explanations of why they work effectively)\",\n  \"framework_1\": \"Framework Name: Brief description and key implementation step\",\n  \"framework_2\": \"Framework Name: Brief description and key implementation step\", \n  \"framework_3\": \"Framework Name: Brief description and key implementation step\"\n}\n```\n\n## Framework Selection Guidelines\n\nChoose frameworks from these carousel-specific categories based on the content analysis:\n\n### Carousel Structure Frameworks\n- **Hook-Educate-CTA Flow**: Strong opener, educational middle, action closer\n- **Problem-Steps-Result Arc**: Issue identification, solution breakdown, outcome showcase\n- **Before-During-After Journey**: Transformation storytelling across slides\n- **Question-Answer-Proof Sequence**: Curiosity-driven educational content\n\n### Engagement Frameworks\n- **Teaser-Reveal-Bonus Pattern**: Build anticipation, deliver value, surprise ending\n- **List-Expand-Summarize Method**: Overview slide, detailed breakdowns, recap\n- **Story-Lesson-Application Flow**: Narrative hook, insight delivery, practical use\n- **Challenge-Solution-Action Framework**: Problem presentation, resolution steps, implementation\n\n### Visual Design Frameworks\n- **Consistent-Progressive-Surprise Design**: Cohesive branding with visual evolution\n- **Minimal-Focused-Impactful Style**: Clean design emphasizing key messages\n- **Branded-Professional-Accessible Look**: Authority building with approachability\n- **Color-Coded-Hierarchical System**: Visual organization for easy consumption\n\n### Viral Mechanics Frameworks\n- **Scroll-Stop-Save-Share Optimization**: Maximum engagement at each stage\n- **Educational-Entertaining-Memorable Mix**: Balanced value delivery\n- **Personal-Universal-Actionable Content**: Relatable yet broadly applicable\n- **Authority-Approachable-Authentic Voice**: Expert positioning with human connection\n\n## Additional Instructions\n\n1. **Carousel Score**: Rate 1-100 based on overall effectiveness considering slide count optimization, visual flow, and engagement potential\n2. **Primary Strengths**: Identify the top 3 most impactful elements with brief explanations of why they work effectively for carousel format (e.g., \"Strong visual hook (stops scroll immediately), logical flow (encourages full swipe-through), actionable tips (drives saves)\")\n3. **Framework Format**: Each framework should be: \"Name: 1-2 sentence description + one key action step specific to carousel optimization\"\n4. **Concise Output**: Keep framework fields under 200 characters, primary strengths can be up to 300 characters for explanations\n5. **Carousel-Specific Focus**: Prioritize insights unique to carousel format over general social media advice\n\n## Carousel-Specific Considerations\n\n### Slide Count Optimization\n- **3-5 slides**: Quick consumption, perfect for tips/steps\n- **6-8 slides**: Detailed education, story development\n- **9-10 slides**: Comprehensive guides, in-depth tutorials\n- **10+ slides**: Risk of drop-off, needs exceptional content\n\n### Engagement Patterns\n- **Slide 1**: Must stop scroll and create curiosity\n- **Slides 2-X**: Deliver promised value progressively\n- **Final slide**: Strong CTA, summary, or bonus content\n- **Caption synergy**: Should complement, not repeat carousel content\n\n### Visual Flow Principles\n- **Consistent branding**: Color scheme, fonts, layout style\n- **Progressive revelation**: Build complexity or excitement\n- **Visual breaks**: Avoid information overload per slide\n- **Mobile optimization**: Ensure readability on small screens\n\n## Example Output Format:\n```json\n{\n  \"carousel_score\": \"85\",\n  \"primary_strengths\": \"Compelling first slide hook (creates immediate curiosity gap), optimal 7-slide structure (perfect length for educational content), consistent visual branding (builds recognition and professionalism)\",\n  \"framework_1\": \"Hook-Educate-CTA Flow: Strong opener creates curiosity, middle slides deliver value, final slide drives action. Action: Lead with surprising statistic or question\",\n  \"framework_2\": \"Progressive Reveal Pattern: Each slide builds on previous knowledge. Action: End each slide with transition teaser to next\",\n  \"framework_3\": \"Visual Hierarchy System: Consistent design with clear information flow. Action: Use same header style and color coding throughout\"\n}\n```\n\n## Quality Checks\n\nBefore finalizing your response:\n- ✅ Analysis considers carousel-specific engagement patterns\n- ✅ Slide count is factored into optimization recommendations  \n- ✅ Visual flow and design consistency are evaluated\n- ✅ Frameworks are tailored to carousel format strengths\n- ✅ Actionable insights are specific to multi-slide content",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            3472,
            144
          ],
          "id": "9905e1d2-ff56-43c2-8737-14525e52e6cb",
          "name": "Basic LLM Chain1"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "gpt-4o",
              "mode": "list",
              "cachedResultName": "gpt-4o"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            3120,
            1280
          ],
          "id": "1a54e23f-e7c0-4cfb-a960-fe78169c7e8b",
          "name": "OpenAI Chat Model1"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"carousel_score\": \"85\",\n  \"primary_strengths\": \"Compelling first slide hook (creates immediate curiosity gap), optimal 7-slide structure (perfect length for educational content), consistent visual branding (builds recognition and professionalism)\",\n  \"framework_1\": \"Hook-Educate-CTA Flow: Strong opener creates curiosity, middle slides deliver value, final slide drives action. Action: Lead with surprising statistic or question\",\n  \"framework_2\": \"Progressive Reveal Pattern: Each slide builds on previous knowledge. Action: End each slide with transition teaser to next\",\n  \"framework_3\": \"Visual Hierarchy System: Consistent design with clear information flow. Action: Use same header style and color coding throughout\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            3632,
            368
          ],
          "id": "8630dd90-227a-4145-9b94-d6ba2810f7c3",
          "name": "Structured Output Parser1"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tbla6GNwPXjx0yalQ",
              "mode": "list",
              "cachedResultName": "Instagram Ideas",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tbla6GNwPXjx0yalQ"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Post ID": "={{ $('HTTP Request2').item.json.data.post.shortcode }}",
                "Post Type": "Carousel",
                "Caption": "={{ $('HTTP Request2').item.json.data.post.edge_media_to_caption.edges[0].node.text }}",
                "Script": "={{ $('Message a model').item.json.message.content.text_from_image }}",
                "Viral Score": "={{ $json.output.carousel_score }}",
                "Primary Strengths": "={{ $json.output.primary_strengths }}",
                "Idea Framework 1": "={{ $json.output.framework_1 }}",
                "Idea Framework 2": "={{ $json.output.framework_2 }}",
                "Idea Framework 3": "={{ $json.output.framework_3 }}",
                "Number of Slides": "={{ $('Code').item.json.length }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "Post ID",
                  "displayName": "Post ID",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "URL",
                  "displayName": "URL",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": true
                },
                {
                  "id": "Post Type",
                  "displayName": "Post Type",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Reel",
                      "value": "Reel"
                    },
                    {
                      "name": "Carousel",
                      "value": "Carousel"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Number of Slides",
                  "displayName": "Number of Slides",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Caption",
                  "displayName": "Caption",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Script",
                  "displayName": "Script",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Viral Score",
                  "displayName": "Viral Score",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Primary Strengths",
                  "displayName": "Primary Strengths",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Idea Framework 1",
                  "displayName": "Idea Framework 1",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Idea Framework 2",
                  "displayName": "Idea Framework 2",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Idea Framework 3",
                  "displayName": "Idea Framework 3",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            3872,
            272
          ],
          "id": "dc8d239f-3cd4-4408-986d-296b9cf7834d",
          "name": "Create a record1"
        },
        {
          "parameters": {
            "content": "## Instagram Research\n### Analyze Reels and Carousel Posts",
            "height": 1016,
            "width": 4040,
            "color": 4
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -32,
            0
          ],
          "typeVersion": 1,
          "id": "34afd1ec-aace-49e6-ab29-7d9d10d6b7ea",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "dd45db54-efb3-4b7a-a78b-13e197e362f8",
                  "leftValue": "={{ $json.stats.total_reactions }}",
                  "rightValue": "={{ $('Search records3').item.json['Minimum Like Count'] }}",
                  "operator": {
                    "type": "number",
                    "operation": "gt"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            1440,
            1264
          ],
          "id": "c38ec8d7-45f8-4714-994d-f9293aed5626",
          "name": "Filter2"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=# LinkedIn Post Analysis Prompt\n\n## System Instructions\nYou are an expert LinkedIn content strategist specializing in professional engagement and thought leadership. Your task is to analyze LinkedIn posts across multiple dimensions and provide actionable framework suggestions for maximum professional impact and reach.\n\n## Input Data\n- **Post Text**: {{ $('Filter2').item.json.text }}\n- **Author Info**: {{ $('Filter2').item.json.author.name }} - {{ $('Filter2').item.json.author.headline }}\n- **Content Type**: {{ $('Filter2').item.json.content.type }}\n- **Engagement Stats**: {{ $('Filter2').item.json.stats.total_reactions }} reactions,  {{ $('Filter2').item.json.stats.comments }} comments, {{ $('Filter2').item.json.stats.shares }} shares\n- **Hashtags**: {{ $('Filter2').item.json.hashtags }}\n\n## Analysis Framework\n\n### Required Analysis Dimensions\n\n1. **Professional Hook & Value Proposition**\n   - Opening line effectiveness for LinkedIn feed\n   - Professional relevance and industry insight\n   - Value delivery to target audience\n   - Thought leadership positioning\n\n2. **Content Structure & Readability**\n   - LinkedIn-optimized formatting (line breaks, emojis, bold text)\n   - Information hierarchy and scanability\n   - Story arc and narrative flow\n   - Call-to-action effectiveness\n\n3. **Professional Authority & Credibility**\n   - Industry expertise demonstration\n   - Data and evidence usage\n   - Personal brand alignment\n   - Unique perspective delivery\n\n4. **LinkedIn Algorithm Optimization**\n   - Engagement-driving elements (questions, controversial takes, polls)\n   - Comment-generating strategies\n   - Share-worthy professional insights\n   - Platform-specific best practices\n\n5. **Network Building & Community**\n   - Professional networking facilitation\n   - Industry conversation starting\n   - Collaborative opportunities creation\n   - Relationship building potential\n\n6. **Business Impact & Objectives**\n   - Lead generation potential\n   - Brand awareness building\n   - Expertise positioning\n   - Career/business advancement value\n\n## Output Requirements\n\nProvide your analysis in this simplified JSON structure for easy Airtable mapping:\n\n```json\n{\n  \"linkedin_score\": \"number (1-100)\",\n  \"primary_strengths\": \"string (top 3 strengths with explanations of why they work for LinkedIn professionals)\",\n  \"framework_1\": \"Framework Name: Brief description and key implementation step\",\n  \"framework_2\": \"Framework Name: Brief description and key implementation step\", \n  \"framework_3\": \"Framework Name: Brief description and key implementation step\"\n}\n```\n\n## Framework Selection Guidelines\n\nChoose frameworks from these LinkedIn-specific categories based on the content analysis:\n\n### Professional Content Frameworks\n- **Problem-Insight-Solution (PIS)**: Industry challenge identification, expert analysis, actionable solution\n- **Story-Lesson-Application (SLA)**: Professional narrative, key learning, practical implementation\n- **Data-Analysis-Prediction (DAP)**: Industry stats, expert interpretation, future implications\n- **Experience-Reflection-Advice (ERA)**: Personal journey, insights gained, professional guidance\n\n### Engagement Frameworks\n- **Question-Context-Discussion Starter**: Thought-provoking question, background context, community engagement\n- **Contrarian-Evidence-Debate**: Challenging conventional wisdom with supporting data\n- **Trend-Impact-Opportunity**: Industry trend analysis with business implications\n- **Personal-Professional-Universal**: Individual experience with broader professional relevance\n\n### Authority Building Frameworks\n- **Research-Interpretation-Implication**: Latest findings, expert analysis, industry impact\n- **Behind-the-Scenes-Insight**: Internal perspective, professional learning, industry knowledge\n- **Case-Study-Breakdown**: Real example analysis, success factors, replicable strategies\n- **Future-Vision-Preparation**: Industry predictions, strategic thinking, actionable preparation\n\n### Network Building Frameworks\n- **Recognition-Collaboration-Growth**: Acknowledging others, partnership opportunities, mutual development\n- **Industry-Connect-Value**: Sector insights, professional networking, value exchange\n- **Mentor-Share-Inspire**: Leadership perspective, knowledge sharing, community motivation\n- **Challenge-Solve-Together**: Industry problem, collaborative solution, team approach\n\n## LinkedIn-Specific Considerations\n\n### Content Type Optimization\n- **Text Posts**: Focus on storytelling and insights\n- **Image Posts**: Visual + professional commentary\n- **Video Posts**: Educational or behind-the-scenes content\n- **Document Posts**: In-depth guides and resources\n- **Poll Posts**: Community engagement and data gathering\n\n### Professional Formatting\n- **Opening Hook**: First 2 lines crucial for feed visibility\n- **White Space**: Line breaks for mobile readability\n- **Visual Elements**: Strategic emoji and formatting use\n- **Hashtag Strategy**: 3-5 industry-relevant hashtags maximum\n- **CTA Placement**: Natural integration within professional context\n\n### Engagement Patterns\n- **Professional Questions**: Industry-specific, thought-provoking\n- **Industry Insights**: Unique perspective on market trends\n- **Personal Professional Stories**: Relatable career experiences\n- **Educational Content**: Skill-building and knowledge sharing\n- **Network Recognition**: Tagging and acknowledging peers\n\n## Additional Instructions\n\n1. **LinkedIn Score**: Rate 1-100 based on professional impact, engagement potential, and algorithm optimization for LinkedIn's unique audience\n2. **Primary Strengths**: Identify the top 3 most impactful elements with brief explanations of why they work effectively for LinkedIn professionals (e.g., \"Strong industry hook (captures professional attention), data-driven insights (builds credibility), engaging question (drives meaningful comments)\")\n3. **Framework Format**: Each framework should be: \"Name: 1-2 sentence description + one key action step specific to LinkedIn professional engagement\"\n4. **Concise Output**: Keep framework fields under 200 characters, primary strengths can be up to 300 characters for explanations\n5. **Professional Focus**: Prioritize business value, career advancement, and professional networking over entertainment\n\n## Example Output Format:\n```json\n{\n  \"linkedin_score\": \"82\",\n  \"primary_strengths\": \"Compelling industry hook (immediately relevant to target professionals), data-backed insights (establishes credibility and expertise), thought-provoking question (generates meaningful professional discussion)\",\n  \"framework_1\": \"Problem-Insight-Solution Framework: Identifies industry challenge, provides expert analysis, offers actionable steps. Action: Open with current industry pain point\",\n  \"framework_2\": \"Authority-Building Pattern: Demonstrates expertise through data and unique perspective. Action: Include specific metrics or research findings\",\n  \"framework_3\": \"Community-Discussion Starter: Ends with engaging question that drives professional conversation. Action: Ask about others' experiences or opinions\"\n}\n```\n\n## Quality Checks\n\nBefore finalizing your response:\n- ✅ Analysis considers LinkedIn's professional audience and business context\n- ✅ Engagement patterns are tailored to professional networking goals\n- ✅ Authority building and thought leadership elements are evaluated\n- ✅ Frameworks focus on business impact and career advancement\n- ✅ Recommendations align with LinkedIn algorithm and best practices",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            2032,
            1136
          ],
          "id": "3314214f-faac-4c81-bc3b-3b96db9f146c",
          "name": "Basic LLM Chain2"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"linkedin_score\": \"82\",\n  \"primary_strengths\": \"Compelling industry hook (immediately relevant to target professionals), data-backed insights (establishes credibility and expertise), thought-provoking question (generates meaningful professional discussion)\",\n  \"framework_1\": \"Problem-Insight-Solution Framework: Identifies industry challenge, provides expert analysis, offers actionable steps. Action: Open with current industry pain point\",\n  \"framework_2\": \"Authority-Building Pattern: Demonstrates expertise through data and unique perspective. Action: Include specific metrics or research findings\",\n  \"framework_3\": \"Community-Discussion Starter: Ends with engaging question that drives professional conversation. Action: Ask about others' experiences or opinions\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            2128,
            1360
          ],
          "id": "aefdbd9f-961a-445d-8388-e06a81acd7f4",
          "name": "Structured Output Parser2"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tblHfwIJxk5aJllTO",
              "mode": "list",
              "cachedResultName": "LinkedIn Ideas",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tblHfwIJxk5aJllTO"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Post URL": "={{ $('Loop Over Items2').item.json.post_url }}",
                "User": "={{ $('Loop Over Items2').item.json.author.name }}",
                "Reactions": "={{ $('Loop Over Items2').item.json.stats.total_reactions }}",
                "Content": "={{ $('Loop Over Items2').item.json.text }}",
                "Hashtags": "={{ $('Loop Over Items2').item.json.hashtags.join(', ') }}",
                "LinkedIn Score": "={{ $json.output.linkedin_score }}",
                "Primary Strengths": "={{ $json.output.primary_strengths }}",
                "Framework 1": "={{ $json.output.framework_1 }}",
                "Framework 2": "={{ $json.output.framework_2 }}",
                "Framework 3": "={{ $json.output.framework_3 }}",
                "Post Type": "={{ $('Loop Over Items2').item.json.content.type === 'video' ? 'Video' : 'Text' }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "Post URL",
                  "displayName": "Post URL",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "User",
                  "displayName": "User",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Reactions",
                  "displayName": "Reactions",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "number",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Post Type",
                  "displayName": "Post Type",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Video",
                      "value": "Video"
                    },
                    {
                      "name": "Text",
                      "value": "Text"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Content",
                  "displayName": "Content",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Hashtags",
                  "displayName": "Hashtags",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "LinkedIn Score",
                  "displayName": "LinkedIn Score",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Primary Strengths",
                  "displayName": "Primary Strengths",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Framework 1",
                  "displayName": "Framework 1",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Framework 2",
                  "displayName": "Framework 2",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Framework 3",
                  "displayName": "Framework 3",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Selected Framework",
                  "displayName": "Selected Framework",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Framework 1",
                      "value": "Framework 1"
                    },
                    {
                      "name": "Framework 2",
                      "value": "Framework 2"
                    },
                    {
                      "name": "Framework 3",
                      "value": "Framework 3"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Status",
                  "displayName": "Status",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Generate Content",
                      "value": "Generate Content"
                    },
                    {
                      "name": "Reject",
                      "value": "Reject"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            2432,
            1264
          ],
          "id": "1f33c969-15b9-4e39-a3e1-5c283b1be192",
          "name": "Create a record2"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            1808,
            1264
          ],
          "id": "a250ac2c-a04a-447e-b64d-fa244248dd8a",
          "name": "Loop Over Items2"
        },
        {
          "parameters": {
            "content": "## LinkedIn Research",
            "height": 404,
            "width": 2552,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -48,
            1056
          ],
          "typeVersion": 1,
          "id": "8a72c94a-c19f-40dd-8838-9f9f517232ba",
          "name": "Sticky Note2"
        },
        {
          "parameters": {
            "operation": "search",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tbl7UBjpcmrSOBJPu",
              "mode": "list",
              "cachedResultName": "Inspiration",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tbl7UBjpcmrSOBJPu"
            },
            "filterByFormula": "AND({Platform} = \"Tiktok\", {Status} = \"Listening\")",
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            256,
            1680
          ],
          "id": "b9915d24-0098-4366-b7e8-eee740bc144f",
          "name": "Search records2"
        },
        {
          "parameters": {
            "url": "https://tiktok-api23.p.rapidapi.com/api/music/info",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "musicId",
                  "value": "={{ $json.musicMeta.musicId }}"
                }
              ]
            },
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-rapidapi-host",
                  "value": "tiktok-api23.p.rapidapi.com"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            2224,
            1552
          ],
          "id": "87268687-f0ea-480d-b086-5d776af42748",
          "name": "HTTP Request7"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            1920,
            1680
          ],
          "id": "9d3b0943-2ba3-4a23-8f04-341d52eca684",
          "name": "Loop Over Items3"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "15411a27-1a37-4637-a0f1-4e3dfba1d7ee",
                  "leftValue": "={{ $json.musicMeta.musicName }}",
                  "rightValue": "original sound",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            1600,
            1680
          ],
          "id": "fe8c93a4-81ff-45fc-af9a-23ffaa44552b",
          "name": "Filter4"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "d7f9b42e-de2b-4b25-abec-c98ad29ce84b",
                  "leftValue": "={{ $json.playCount }}",
                  "rightValue": "={{ Number($('Search records2').item.json['Minimum Like Count']) }}",
                  "operator": {
                    "type": "number",
                    "operation": "gt"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            1376,
            1680
          ],
          "id": "e002f1f8-32e9-46a9-9f31-d3c770b10fcb",
          "name": "Filter5"
        },
        {
          "parameters": {
            "url": "={{ $json.data.musicInfo.music.playUrl }}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            2448,
            1552
          ],
          "id": "c1731163-670d-4d3a-b465-9033fd33accb",
          "name": "HTTP Request8"
        },
        {
          "parameters": {
            "operation": "write",
            "fileName": "/tmp/audio.mp4",
            "options": {}
          },
          "type": "n8n-nodes-base.readWriteFile",
          "typeVersion": 1,
          "position": [
            2768,
            1552
          ],
          "id": "704ef6bd-70c3-44c4-b4d0-223f5f536b55",
          "name": "Read/Write Files from Disk"
        },
        {
          "parameters": {
            "fileSelector": "/tmp/*",
            "options": {}
          },
          "type": "n8n-nodes-base.readWriteFile",
          "typeVersion": 1,
          "position": [
            3168,
            1552
          ],
          "id": "3176ec96-da2b-4f80-9117-0fa02905de8f",
          "name": "Read/Write Files from Disk1"
        },
        {
          "parameters": {
            "command": "ffmpeg -i /tmp/audio.mp4 -vn -acodec libmp3lame -q:a 4 /tmp/converted_audio.mp3"
          },
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            3568,
            1552
          ],
          "id": "b556f268-6c86-4eff-a524-fccf945c2fb1",
          "name": "Execute Command"
        },
        {
          "parameters": {
            "fileSelector": "/tmp/*.mp3",
            "options": {}
          },
          "type": "n8n-nodes-base.readWriteFile",
          "typeVersion": 1,
          "position": [
            3872,
            1552
          ],
          "id": "55a5584b-4cc1-475a-9072-2c83024801fa",
          "name": "Read/Write Files from Disk2"
        },
        {
          "parameters": {
            "resource": "audio",
            "operation": "transcribe",
            "options": {
              "language": "en"
            }
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            4096,
            1552
          ],
          "id": "e6c5ae81-54cc-447d-99e8-50703e68081f",
          "name": "Transcribe a recording"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=# TikTok Video Analysis Prompt\n\n## System Instructions\nYou are an expert TikTok content strategist specializing in viral mechanics and algorithm optimization. Your task is to analyze TikTok videos across multiple dimensions and provide actionable framework suggestions for maximum reach, engagement, and viral potential.\n\n## Input Data\n- **Description**: {{ $('Loop Over Items3').item.json.desc }}\n- **Transcript**: {{ $json.text }}\n- **Play Count**: {{ $('Loop Over Items3').item.json.stats.playCount }}\n\n## Analysis Framework\n\n### Required Analysis Dimensions\n\n1. **Viral Hook & First 3 Seconds**\n   - Opening moment effectiveness for stopping scroll\n   - Visual and audio impact immediately\n   - Curiosity gap creation and intrigue\n   - Pattern interrupt and attention capture\n\n2. **TikTok Algorithm Optimization**\n   - Watch time and completion rate factors\n   - Engagement signal generation (comments, shares, saves)\n   - Trend participation and hashtag strategy\n   - Audio choice and trending sound usage\n\n3. **Content Pacing & Energy**\n   - Video rhythm and tempo matching TikTok style\n   - Information density and quick delivery\n   - Energy level and entertainment value\n   - Attention retention throughout duration\n\n4. **Authenticity & Relatability**\n   - Genuine personality and raw moments\n   - Universal experiences and emotions\n   - Gen Z/millennial cultural relevance\n   - Personal connection and vulnerability\n\n5. **Entertainment & Educational Balance**\n   - Fun factor and humor integration\n   - Learning value and quick tips\n   - Surprise elements and plot twists\n   - Memorable moments and quotability\n\n6. **Community & Participation**\n   - Comment-driving content and questions\n   - Duet and remix potential\n   - Challenge or trend creation ability\n   - User-generated content inspiration\n\n## Output Requirements\n\nProvide your analysis in this simplified JSON structure for easy Airtable mapping:\n\n{\n  \"tiktok_score\": \"number (1-100)\",\n  \"primary_strengths\": \"string (top 3 strengths with explanations of why they work for TikTok's unique audience and algorithm)\",\n  \"framework_1\": \"Framework Name: Brief description and key implementation step\",\n  \"framework_2\": \"Framework Name: Brief description and key implementation step\", \n  \"framework_3\": \"Framework Name: Brief description and key implementation step\"\n}\n\n## Framework Selection Guidelines\n\nChoose frameworks from these TikTok-specific categories based on the content analysis:\n\n### Viral Content Frameworks\n- **Hook-Deliver-Twist Pattern**: Strong opener, value delivery, unexpected ending\n- **Question-Journey-Answer Arc**: Curiosity creation, process showing, satisfying resolution\n- **Before-During-After Transformation**: Clear progression with dramatic change\n- **Trend-Remix-Amplify Strategy**: Popular trend participation with unique spin\n\n### Engagement Frameworks\n- **Controversy-Clarify-Community**: Hot take, explanation, discussion generation\n- **Personal-Universal-Relatable Flow**: Individual story with broad appeal\n- **Quick-Tip-Implementation Format**: Fast education with immediate application\n- **Challenge-Attempt-Result Structure**: Goal setting, process showing, outcome reveal\n\n### Entertainment Frameworks\n- **Comedy-Setup-Punchline Method**: Humor building with satisfying payoff\n- **Suspense-Build-Release Pattern**: Tension creation and dramatic resolution\n- **Random-Relatable-Memorable Mix**: Unexpected content that sticks\n- **Energy-Match-Amplify Approach**: High engagement with momentum building\n\n### Algorithm Optimization Frameworks\n- **Comment-Bait-Value Strategy**: Discussion starters with genuine worth\n- **Watch-Time-Maximizer Pattern**: Retention hooks throughout video\n- **Share-Worthy-Moment Creation**: Highly quotable or screenshot-able content\n- **Duet-Ready-Content Design**: Built for remixing and collaboration\n\n## TikTok-Specific Considerations\n\n### Content Performance Indicators\n- **Play Count Analysis**: \n  - Under 1K: Learning/testing phase\n  - 1K-10K: Moderate reach, room for optimization\n  - 10K-100K: Good performance, viral potential\n  - 100K+: High viral success, study for replication\n\n### Algorithm Factors\n- **First 3 Seconds**: Critical for algorithm promotion\n- **Completion Rate**: Full video watches boost distribution\n- **Engagement Velocity**: Quick likes/comments/shares matter most\n- **Trending Participation**: Audio, hashtags, effects usage\n- **Consistency**: Regular posting and style recognition\n\n### Audience Behavior Patterns\n- **Mobile-First**: Vertical format optimization essential\n- **Short Attention Spans**: Quick payoffs and instant gratification\n- **Authenticity Preference**: Raw, unpolished content often performs better\n- **Trend Cycling**: Fast-moving cultural moments and references\n- **Discovery Mode**: Algorithm-driven vs. follower-based reach\n\n### Content Categories That Perform\n- **Educational**: Quick tips, life hacks, tutorials\n- **Entertainment**: Comedy, skits, relatable content\n- **Trends**: Dances, challenges, viral audio usage\n- **Personal**: Day-in-life, behind-scenes, authentic moments\n- **Niche**: Specific interests with passionate communities\n\n## Additional Instructions\n\n1. **TikTok Score**: Rate 1-100 based on viral potential, algorithm optimization, and engagement mechanics specific to TikTok's unique ecosystem\n2. **Primary Strengths**: Identify the top 3 most impactful elements with brief explanations of why they work for TikTok's algorithm and young audience (e.g., \"Instant visual hook (stops scroll in first second), trending audio usage (algorithm boost), relatable Gen Z humor (drives shares)\")\n3. **Framework Format**: Each framework should be: \"Name: 1-2 sentence description + one key action step specific to TikTok's fast-paced environment\"\n4. **Concise Output**: Keep framework fields under 200 characters, primary strengths can be up to 300 characters for explanations\n5. **Algorithm Focus**: Prioritize watch time, engagement velocity, and viral mechanics over traditional marketing approaches\n\n## Play Count Context Analysis\n\nBased on play count, provide contextual insights:\n- **High Performance (100K+)**: Identify replicable viral elements\n- **Moderate Performance (10K-100K)**: Find optimization opportunities\n- **Growing Performance (1K-10K)**: Suggest algorithm-friendly improvements\n- **Learning Phase (<1K)**: Focus on fundamental TikTok best practices\n\n## Example Output Format:\n\n{\n  \"tiktok_score\": \"88\",\n  \"primary_strengths\": \"Immediate visual hook (grabs attention in first frame), trending audio integration (leverages algorithm boost), relatable Gen Z scenario (drives comments and shares through identification)\",\n  \"framework_1\": \"Hook-Deliver-Twist Pattern: Strong visual opener, educational content, surprise ending. Action: Start with bold statement or visual shock\",\n  \"framework_2\": \"Trend-Remix-Amplify Strategy: Uses popular sound with unique angle. Action: Add personal story to trending audio\",\n  \"framework_3\": \"Comment-Bait-Value Framework: Generates discussion while providing worth. Action: End with controversial but educational question\"\n}\n\n\n## Quality Checks\n\nBefore finalizing your response:\n- ✅ Analysis considers TikTok's young demographic and cultural context\n- ✅ Algorithm optimization factors are prioritized for maximum reach\n- ✅ Viral mechanics and entertainment value are evaluated\n- ✅ Frameworks focus on quick engagement and watch time retention\n- ✅ Play count performance is contextualized for actionable insights",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            4320,
            1552
          ],
          "id": "0fdf6e6d-efcf-4782-8a96-32db32190015",
          "name": "Basic LLM Chain3"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"tiktok_score\": \"number (1-100)\",\n  \"primary_strengths\": \"string (top 3 strengths with explanations of why they work for TikTok's unique audience and algorithm)\",\n  \"framework_1\": \"Framework Name: Brief description and key implementation step\",\n  \"framework_2\": \"Framework Name: Brief description and key implementation step\", \n  \"framework_3\": \"Framework Name: Brief description and key implementation step\"\n}\n"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            4416,
            1776
          ],
          "id": "a2931d1d-f1ed-40ec-9932-ab9ff815e0e2",
          "name": "Structured Output Parser3"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tbl0RiS6dwyWmEVwz",
              "mode": "list",
              "cachedResultName": "TikTok Ideas",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tbl0RiS6dwyWmEVwz"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Duration (sec)": "={{ $('Transcribe a recording').item.json.usage.seconds }}",
                "Post ID": "={{ $('Filter4').item.json.id }}",
                "User": "={{ $('Filter4').item.json.authorMeta.name }}",
                "Description": "={{ $('Filter4').item.json.text }}",
                "Transcript": "={{ $('Transcribe a recording').item.json.text }}",
                "TikTok Score": "={{ $json.output.tiktok_score }}",
                "Primary Strengths": "={{ $json.output.primary_strengths }}",
                "Framework 1": "={{ $json.output.framework_1 }}",
                "Framework 2": "={{ $json.output.framework_2 }}",
                "Framework 3": "={{ $json.output.framework_3 }}",
                "Play Count": "={{ $('Filter4').item.json.playCount }}"
              },
              "matchingColumns": [
                "id"
              ],
              "schema": [
                {
                  "id": "id",
                  "displayName": "id",
                  "required": false,
                  "defaultMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": true,
                  "removed": false
                },
                {
                  "id": "Post ID",
                  "displayName": "Post ID",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "URL",
                  "displayName": "URL",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": true
                },
                {
                  "id": "User",
                  "displayName": "User",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Play Count",
                  "displayName": "Play Count",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "number",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Description",
                  "displayName": "Description",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Transcript",
                  "displayName": "Transcript",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Duration (sec)",
                  "displayName": "Duration (sec)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "number",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "TikTok Score",
                  "displayName": "TikTok Score",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Primary Strengths",
                  "displayName": "Primary Strengths",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Framework 1",
                  "displayName": "Framework 1",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Framework 2",
                  "displayName": "Framework 2",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Framework 3",
                  "displayName": "Framework 3",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            4720,
            1552
          ],
          "id": "3180a303-663c-4353-b40c-9a88425728e1",
          "name": "Create a record3"
        },
        {
          "parameters": {
            "command": "find /tmp -type f -delete"
          },
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            4944,
            1680
          ],
          "id": "aecee6a4-d673-4bb0-a1a0-131b4e029334",
          "name": "Execute Command1"
        },
        {
          "parameters": {
            "content": "## Tiktok Research",
            "height": 516,
            "width": 5160,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -48,
            1504
          ],
          "typeVersion": 1,
          "id": "883aa465-2e46-48fd-9188-19c39fa231bf",
          "name": "Sticky Note3"
        },
        {
          "parameters": {
            "command": "find /tmp -type f -delete"
          },
          "type": "n8n-nodes-base.executeCommand",
          "typeVersion": 1,
          "position": [
            32,
            1824
          ],
          "id": "5d1b4b40-2abe-460f-8164-e98efa51aa35",
          "name": "Clear Tmp Folder"
        },
        {
          "parameters": {
            "operation": "search",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tbl7UBjpcmrSOBJPu",
              "mode": "list",
              "cachedResultName": "Inspiration",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tbl7UBjpcmrSOBJPu"
            },
            "filterByFormula": "AND({Platform} = \"LinkedIn\", {Status} = \"Listening\")",
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            256,
            1264
          ],
          "id": "0ddb032d-b0f1-4358-ad29-8332d7fe7212",
          "name": "Search records3"
        },
        {
          "parameters": {
            "pollTimes": {
              "item": [
                {
                  "mode": "everyMinute"
                }
              ]
            },
            "simple": false,
            "filters": {
              "sender": "noreply+automations@airtableemail.com"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.gmailTrigger",
          "typeVersion": 1.2,
          "position": [
            -272,
            3296
          ],
          "id": "159fd761-5a74-4ca1-ba52-ae616e9e95ed",
          "name": "Gmail Trigger"
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.text }}",
                        "rightValue": "**Post Type**: Carousel",
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        },
                        "id": "7ce01921-c869-420e-ab44-707bd2acb1f5"
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "Instagram Carousel"
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "id": "43560a25-065d-475c-b8d4-5b3c8204fabf",
                        "leftValue": "={{ $json.text }}",
                        "rightValue": "**Post Type**: Reel",
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        }
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "Instagram Reel"
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "id": "b8143bf1-5cf0-4f96-82ab-d56aa069c928",
                        "leftValue": "={{ $json.subject }}",
                        "rightValue": "LinkedIn Content Generation",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "LinkedIn"
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "id": "559ae578-e6db-43e3-bdbb-7776425c088d",
                        "leftValue": "={{ $json.subject }}",
                        "rightValue": "TikTok Content Generation",
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        }
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "TikTok"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.switch",
          "typeVersion": 3.2,
          "position": [
            -16,
            3264
          ],
          "id": "902eb850-1db6-43a8-972a-80eff2e5eb4e",
          "name": "Switch1"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.content_prompt }}",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            1472,
            3632
          ],
          "id": "afe16d6c-f2c7-4dd0-80dc-583ab6ed0cd0",
          "name": "Basic LLM Chain4"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "chatgpt-4o-latest",
              "mode": "list",
              "cachedResultName": "chatgpt-4o-latest"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            2080,
            3920
          ],
          "id": "b13f74ba-fb33-42be-923c-f1f71d149ee2",
          "name": "OpenAI Chat Model"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"linkedin_post\": \"string (complete ready-to-publish LinkedIn post content)\",\n  \"optimization_notes\": {\n    \"hook_effectiveness\": \"string (why the opening works for LinkedIn)\",\n    \"framework_implementation\": \"string (how the selected framework was applied)\",\n    \"professional_positioning\": \"string (authority/credibility elements included)\",\n    \"engagement_mechanics\": \"string (comment/share drivers and CTA strategy)\"\n  },\n  \"performance_predictions\": {\n    \"estimated_reach\": \"string (professional assessment of potential reach)\",\n    \"engagement_drivers\": \"string (top 3 elements likely to drive interaction)\",\n    \"improvement_suggestions\": \"string (optional tweaks for better performance)\"\n  },\n  \"image_generation_prompt\": \"string (detailed prompt for creating a professional LinkedIn image/graphic that supports the content)\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1616,
            3920
          ],
          "id": "b1a9525a-8f2e-404e-b869-301f5396a079",
          "name": "Structured Output Parser4"
        },
        {
          "parameters": {
            "operation": "sendAndWait",
            "sendTo": "shabbir@shabbirnoor.com",
            "subject": "LinkedIn Post Approval",
            "message": "=Hi there,\n\nHere's the LinkedIn Post:\n{{ $json.output.linkedin_post }}\nHere's why it works:\n{{ $json.output.optimization_notes.hook_effectiveness }}\n\n{{ $json.output.optimization_notes.framework_implementation }}\n\n{{ $json.output.optimization_notes.professional_positioning }}\n\n{{ $json.output.optimization_notes.engagement_mechanics }}\n\nClick below to provide feedback",
            "responseType": "freeText",
            "options": {}
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            2400,
            3632
          ],
          "id": "00c7af10-74cc-450c-a5f7-bfabd63ed2fc",
          "name": "Send a message",
          "webhookId": "10ba86d2-ca32-442e-a669-3ce0a4fe18cf"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "c0f6e399-ae66-4452-bfda-b4c1d4783d9d",
                  "name": "=content_prompt",
                  "value": "=# LinkedIn Content Generator Prompt  ## System Instructions You are an expert LinkedIn content strategist specializing in creating original professional content inspired by viral patterns. Your task is to generate a completely NEW and UNIQUE LinkedIn post that applies the successful frameworks and strategies from an analyzed viral post while making it entirely original and personalized for the user.  ## Input Analysis - Viral Content Inspiration {{ $json.text }}  ## Content Creation Approach  **CRITICAL: The original content above is INSPIRATION ONLY. You must create completely new, original content that:** - **Uses the same successful framework and structure**  - **Applies the identified viral strengths and patterns** - **Is 100% unique and original** (not a copy or close paraphrase) - **Reflects the user's voice and expertise** (not the original author's) - **Addresses similar professional pain points** but with fresh examples and insights  **DO NOT:** - Copy phrases, sentences, or specific examples from the original - Use the same statistics, numbers, or claims - Replicate the exact hook or call-to-action - Mirror the original author's personal story or credentials  **DO:** - Apply the same structural framework that made it viral - Use similar engagement mechanics and psychological triggers - Create new examples, statistics, and personal anecdotes - Develop original insights that serve the same professional audience  **Task**: Implement the selected framework exactly as described above. Follow the framework's specific structure, approach, and action steps to create content that maximizes the identified strengths while maintaining LinkedIn professional standards.  ## Content Generation Requirements  ### Output Format - JSON Structure:  {   \"linkedin_post\": \"string (complete ready-to-publish LinkedIn post content)\",   \"optimization_notes\": {     \"hook_effectiveness\": \"string (why the opening works for LinkedIn)\",     \"framework_implementation\": \"string (how the selected framework was applied)\",     \"professional_positioning\": \"string (authority/credibility elements included)\",     \"engagement_mechanics\": \"string (comment/share drivers and CTA strategy)\"   },   \"performance_predictions\": {     \"estimated_reach\": \"string (professional assessment of potential reach)\",     \"engagement_drivers\": \"string (top 3 elements likely to drive interaction)\",     \"improvement_suggestions\": \"string (optional tweaks for better performance)\"   },   \"image_generation_prompt\": \"string (detailed prompt for creating a professional LinkedIn image/graphic that supports the content)\" }  ### Image Generation Requirements: The `image_generation_prompt` should create a professional LinkedIn-appropriate visual that: - **Supports the main message** without repeating text verbatim - **Uses professional design elements** (clean typography, business colors, minimal design) - **Includes visual metaphors** that reinforce the framework approach - **Optimizes for LinkedIn feed** (square or landscape orientation) - **Maintains brand credibility** while being scroll-stopping - **Incorporates relevant icons/graphics** for the industry/topic - **Avoids text-heavy designs** (LinkedIn users read the post, not the image)  ### Image Prompt Structure: \"Create a professional LinkedIn post image featuring [visual concept] with [design elements]. Style: [clean/modern/corporate]. Color scheme: [professional colors]. Include [relevant icons/graphics]. Avoid: text overlays, cluttered design. Focus: [main visual metaphor that supports the post message].\"  ### Professional LinkedIn Standards: - **Tone**: Professional yet approachable, industry-expert voice (USER'S voice, not original author's) - **Length**: 1,300-2,000 characters for optimal LinkedIn performance - **Structure**: Use line breaks, bullet points, and emojis strategically - **Credibility**: Include NEW specific numbers, results, or insider insights (not from original) - **Value**: Provide genuine professional value with fresh perspective  ### Engagement Optimization: - **First 2 Lines**: Critical for feed visibility - make them compelling - **Social Proof**: Reference achievements, client results, or industry recognition - **Discussion Triggers**: Include elements that encourage professional commentary - **Share-Worthy**: Create content professionals want to share with their network - **Connection Building**: Foster genuine professional relationships  ### Framework-Specific Elements:  #### Problem-Insight-Solution: - Quantify the problem with specific costs/pain points - Provide unique industry insights - Present solution with clear ROI/benefits - Use professional authority to validate solution  #### Community-Discussion Starter: - Ask thought-provoking questions relevant to professional audience - Share controversial (but professional) takes on industry trends - Encourage sharing of professional experiences - Build community around shared professional challenges  #### Authority-Building Pattern: - Lead with impressive but believable achievements - Share insider knowledge that demonstrates expertise - Include specific metrics and results - Position as industry thought leader  ## Content Guidelines  ## Output Format Requirements  Generate a valid JSON response with all required fields populated. Ensure: 1. **linkedin_post** contains the complete, ready-to-publish content 2. **optimization_notes** provides detailed analysis of why the content works 3. **performance_predictions** offers realistic engagement expectations 4. **image_generation_prompt** creates a detailed, actionable prompt for AI image generation tools  The JSON must be properly formatted and ready for n8n workflow parsing.  ## Quality Checks  Before finalizing your response: - ✅ Selected framework is clearly implemented throughout the post - ✅ Content is 100% original and unique (no copying from viral inspiration) - ✅ Professional tone maintained while keeping engagement high - ✅ NEW specific numbers, results, or achievements included for credibility - ✅ Call-to-action aligns with the chosen framework approach - ✅ Content provides genuine professional value to LinkedIn audience - ✅ First two lines are compelling enough to stop professional scroll - ✅ Length is optimized for LinkedIn (1,300-2,000 characters) - ✅ Voice and perspective are distinctly different from the original viral post  ## Example Framework Application  **Opening Variations Based on Framework Type:** - **Problem-focused**: \"Most [target audience] struggle with [expensive problem]...\" - **Community-focused**: \"Unpopular opinion: [controversial industry take]...\" - **Authority-focused**: \"After [specific experience/results], I've learned...\" - **Question-focused**: \"What if I told you [surprising claim]...\"  Adapt your opening style to match the selected framework's approach and tone.  Create original content that professionals will save, share, and discuss while positioning YOU as a thought leader in your industry. The viral post is your blueprint for success patterns, but your content must be completely unique and authentically yours.",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1232,
            3632
          ],
          "id": "a7934629-decc-4a31-9e3e-1c695bf6efc0",
          "name": "Edit Fields"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "117d33a1-df4d-43fc-a89e-9643deb37734",
                  "leftValue": "={{ $json.output.approved }}",
                  "rightValue": "={{ $json.output.approved }}",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            3040,
            3648
          ],
          "id": "0fe7c8d7-ffd0-4a27-be7a-3e41cd83db84",
          "name": "If"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "ecd28bea-1423-4143-876f-e94b80717938",
                  "name": "feedback",
                  "value": "={{ $json.output.feedback }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            3232,
            3728
          ],
          "id": "8314e0ae-a3b7-45ae-bff8-e3c5c1417c49",
          "name": "Edit Fields1"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=You are an expert at LinkedIn content creation. Here's an origianl post idea:\n\n{{ $('Basic LLM Chain4').item.json.output.linkedin_post }}\n\nHere's the image prompt:\n\n{{ $('Basic LLM Chain4').item.json.output.image_generation_prompt }}\n\nHere's the user feedback for the post: {{ $json.feedback }}\n\nRedo the post according to the user's feedback and output as JSON\n\n{\n\"linkedin_post\": \"xyz\",\n\"image_generation_prompt\": \"xyz\"\n}\n\n\n\n",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            1424,
            3472
          ],
          "id": "d0104cfb-2e6b-4a1a-b1fe-c4b90af23f7e",
          "name": "Basic LLM Chain5"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n\"linkedin_post\": \"xyz\",\n\"image_generation_prompt\": \"xyz\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1936,
            3968
          ],
          "id": "058d2569-84f6-497a-9710-69801db85ae9",
          "name": "Structured Output Parser5"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "d7f81157-1cbb-46a9-a709-a212eb7c1455",
                  "name": "output",
                  "value": "={{ $json.output }}",
                  "type": "object"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2144,
            3632
          ],
          "id": "f47bb949-c0e6-412e-82c3-4cb8d24a0756",
          "name": "Edit Fields2"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here's the original content:\n{{ $('Edit Fields2').item.json.output.linkedin_post }}\n\n{{ $json.data.text }}",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "=I have provided you with user feedback regarding a piece of content.\n\nDetermine whether the user has approved the content, and if not, determine the changes required by the user.\n\nOutput as JSON:\n\n{\n\"approved\": true or false, boolean\n\"feedback\": \"user feedback\"\n}"
                }
              ]
            },
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            2640,
            3648
          ],
          "id": "4c9a0f30-930c-4a03-9df7-e582bdf5caf0",
          "name": "Basic LLM Chain6"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"approved\": true,\n  \"feedback\": \"user feedback\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            2640,
            4032
          ],
          "id": "073e8e6d-8c28-4980-9321-c8d57c7b640f",
          "name": "Structured Output Parser6"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tblt1c7ai48HlRBEQ",
              "mode": "list",
              "cachedResultName": "Post Pipeline",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tblt1c7ai48HlRBEQ"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Platform": "LinkedIn",
                "Description or Caption": "={{ $('Edit Fields2').item.json.output.linkedin_post }}",
                "Image Prompt": "={{ $('Edit Fields2').item.json.output.image_generation_prompt }}"
              },
              "matchingColumns": [
                "id"
              ],
              "schema": [
                {
                  "id": "id",
                  "displayName": "id",
                  "required": false,
                  "defaultMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": true,
                  "removed": false
                },
                {
                  "id": "Post",
                  "displayName": "Post",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Platform",
                  "displayName": "Platform",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Tiktok",
                      "value": "Tiktok"
                    },
                    {
                      "name": "Instagram",
                      "value": "Instagram"
                    },
                    {
                      "name": "LinkedIn",
                      "value": "LinkedIn"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Description or Caption",
                  "displayName": "Description or Caption",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Carousel Content or Script",
                  "displayName": "Carousel Content or Script",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Hashtags",
                  "displayName": "Hashtags",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Image Prompt",
                  "displayName": "Image Prompt",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            3344,
            3568
          ],
          "id": "f3532439-ac04-4190-8cbc-a18bd3f0674e",
          "name": "Create a record4"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.content_prompt }}",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            1472,
            4336
          ],
          "id": "0e272951-b8ba-4835-81ba-a16bfcb324ef",
          "name": "Basic LLM Chain7"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "chatgpt-4o-latest",
              "mode": "list",
              "cachedResultName": "chatgpt-4o-latest"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            2096,
            4624
          ],
          "id": "14d61a7c-b46b-401d-a992-c17743553020",
          "name": "OpenAI Chat Model2"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"tiktok_content\": {\n    \"duration\": \"string (optimal video length 15-60 seconds based on content)\",\n    \"content_theme\": \"string (core topic/theme adapted from viral inspiration)\",\n    \"script\": {\n      \"hook\": \"string (first 3 seconds - critical for algorithm and retention)\",\n      \"main_content\": \"string (core message delivery with timing notes 3-50s)\",\n      \"cta\": \"string (strong ending that drives action 50-60s)\"\n    },\n    \"visual_directions\": \"string (overall video approach and style guidance)\",\n\n    \"caption\": \"string (TikTok caption with hook, relatability, and engagement drivers)\",\n    \"hashtags\": \"string (20-30 strategic hashtags - trending, FYP, niche, and community)\"\n  },\n  \"optimization_notes\": {\n    \"hook_effectiveness\": \"string (why the first 3 seconds capture Gen Z attention and stop scroll)\",\n    \"framework_implementation\": \"string (how the selected framework drives the TikTok structure)\",\n    \"content_adaptation\": \"string (how the viral content theme was adapted while staying original)\",\n    \"retention_strategy\": \"string (specific elements that keep viewers watching to completion)\",\n    \"engagement_mechanics\": \"string (comment/share drivers, duet potential, trend participation)\"\n  },\n  \"thumbnail_generation_prompt\": \"string (detailed prompt for creating eye-catching TikTok cover image)\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1856,
            4720
          ],
          "id": "8b516851-9a75-4bc0-af57-ced1a936f6cc",
          "name": "Structured Output Parser7"
        },
        {
          "parameters": {
            "operation": "sendAndWait",
            "sendTo": "shabbir@shabbirnoor.com",
            "subject": "TikTok Post Approval",
            "message": "=Hi there,\n\nHere's the TikTok Post:\n{{ $json.output.tiktok_content.content_theme }}\n\nScript:\n{{ $json.output.tiktok_content.script.hook }}\n{{ $json.output.tiktok_content.script.main_content }}\n{{ $json.output.tiktok_content.script.cta }}\n\nDescription:\n{{ $json.output.tiktok_content.caption }}\n\nHashtags\n{{ $json.output.tiktok_content.hashtags }}\n\nHere's why it works:\n{{ $json.output.optimization_notes.hook_effectiveness }}\n\n{{ $json.output.optimization_notes.framework_implementation }}\n\n{{ $json.output.optimization_notes.engagement_mechanics }}\n\n\nClick below to provide feedback",
            "responseType": "freeText",
            "options": {}
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            2416,
            4336
          ],
          "id": "2032a44e-f6fc-4399-8734-d3776fd63724",
          "name": "Send a message1",
          "webhookId": "10ba86d2-ca32-442e-a669-3ce0a4fe18cf"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "c0f6e399-ae66-4452-bfda-b4c1d4783d9d",
                  "name": "=content_prompt",
                  "value": "=# TikTok Content Generator Prompt\n\n## System Instructions\nYou are an expert TikTok content strategist specializing in creating original viral video content inspired by successful patterns. Your task is to generate a completely NEW and UNIQUE TikTok video that applies the successful frameworks, content themes, and viral elements from an analyzed viral post while making it entirely original and personalized for the user.\n\n## Input Analysis - Viral Content Inspiration\n{{ $json.text }}\n\n**Task**: Implement the selected framework exactly as described above. Follow the framework's specific structure, approach, and action steps to create a TikTok that maximizes the identified strengths while maintaining TikTok's fast-paced, authentic engagement standards.\n\n## Content Creation Approach\n\n**CRITICAL: The original content above is INSPIRATION for both FRAMEWORK and CONTENT THEME. You must create new, original content that:**\n- **Uses the same successful framework and structure** \n- **Maintains the core content theme and topic** that made it viral\n- **Applies similar psychological triggers and engagement mechanics**\n- **Is substantially different in execution** (new examples, different angle, fresh delivery)\n- **Reflects the user's voice and brand** (not the original creator's)\n- **Addresses the same audience need** but with original insights and approach\n\n**CONTENT SIMILARITY Guidelines:**\n- **Same topic/niche**: If original was about life hacks, yours should be about life hacks\n- **Similar value proposition**: If original revealed \"secret tricks\", yours could reveal \"hidden methods\"\n- **Same audience pain point**: Address the same underlying problem or desire\n- **Similar content format**: Educational, comedy, storytime, dance, etc.\n\n**EXECUTION DIFFERENCES Required:**\n- **New specific examples, situations, or scenarios**\n- **Different personal story or experience**\n- **Fresh angle or perspective on the same topic**\n- **Original script and delivery style**\n- **Unique visual approach and authentic personality**\n\n## TikTok Generation Requirements\n\n### Output Format - JSON Structure:\n{\n  \"tiktok_content\": {\n    \"duration\": \"string (optimal video length 15-60 seconds based on content)\",\n    \"content_theme\": \"string (core topic/theme adapted from viral inspiration)\",\n    \"script\": {\n      \"hook\": \"string (first 3 seconds - critical for algorithm and retention)\",\n      \"main_content\": \"string (core message delivery with timing notes 3-50s)\",\n      \"cta\": \"string (strong ending that drives action 50-60s)\"\n    },\n    \"visual_directions\": \"string (overall video approach and style guidance)\",\n\n    \"caption\": \"string (TikTok caption with hook, relatability, and engagement drivers)\",\n    \"hashtags\": \"string (20-30 strategic hashtags - trending, FYP, niche, and community)\"\n  },\n  \"optimization_notes\": {\n    \"hook_effectiveness\": \"string (why the first 3 seconds capture Gen Z attention and stop scroll)\",\n    \"framework_implementation\": \"string (how the selected framework drives the TikTok structure)\",\n    \"content_adaptation\": \"string (how the viral content theme was adapted while staying original)\",\n    \"retention_strategy\": \"string (specific elements that keep viewers watching to completion)\",\n    \"engagement_mechanics\": \"string (comment/share drivers, duet potential, trend participation)\"\n  },\n  \"thumbnail_generation_prompt\": \"string (detailed prompt for creating eye-catching TikTok cover image)\"\n}\n\n## TikTok Algorithm & Culture Guidelines\n\n### Algorithm Optimization Factors:\n- **First 3 Seconds**: Most critical for FYP (For You Page) algorithm promotion\n- **Completion Rate**: Full video watches signal high quality content\n- **Engagement Velocity**: Quick likes/comments/shares boost distribution massively\n- **Trending Participation**: Sounds, effects, hashtags currently popular\n- **Authenticity Over Polish**: Raw, genuine content often outperforms highly produced\n\n### TikTok Culture & Audience:\n- **Gen Z Primary**: Content must resonate with 16-24 year old mindset and humor\n- **Authenticity First**: Real, unfiltered moments perform better than perfect content\n- **Fast-Paced Consumption**: Attention spans are 2-3 seconds for initial hook\n- **Trend Cycles**: Content formats change rapidly, stay current\n- **Community Participation**: Content that inspires duets, stitches, responses\n\n### Content Structure Best Practices:\n\n#### 15-30 Second TikToks (Quick Content):\n- **0-3s**: Immediate hook with bold visual or statement\n- **3-20s**: Rapid value delivery or entertainment\n- **20-30s**: Strong ending that drives engagement\n\n#### 30-60 Second TikToks (Educational/Storytelling):\n- **0-3s**: Hook that promises specific value or entertainment\n- **3-25s**: Setup context, problem, or story development\n- **25-50s**: Solution delivery, climax, or key insights\n- **50-60s**: Clear call-to-action and engagement request\n\n### Viral TikTok Patterns:\n\n#### Educational/Life Hack TikToks:\n- \"Things they don't teach you in school\"\n- \"Life hacks that actually work\"\n- Quick tutorials or how-tos\n- \"POV: You just learned...\" format\n\n#### Entertainment/Relatable TikToks:\n- Relatable scenarios everyone experiences\n- Comedy skits or funny observations\n- \"Tell me you're [identity] without telling me\"\n- Day-in-the-life content with personality\n\n#### Trend Participation TikToks:\n- Dancing or movement to trending sounds\n- Dueting popular content with unique angle\n- Using trending effects creatively\n- Participating in challenges with personal twist\n\n### Audio Strategy for TikTok:\n- **Trending Sounds**: Essential for FYP algorithm boost\n- **Original Audio**: Can become viral sounds others use\n- **Sound Timing**: Match beats, drops, or sound cues with visual transitions\n- **Voiceover + Music**: Layered audio for education + entertainment\n- **Sound Effects**: Strategic use of popular sound effects for emphasis\n\n### Visual Direction Requirements:\nEach scene should specify:\n- **Authentic actions and genuine reactions** for relatability\n- **Props, outfits, or setting changes** for visual interest\n- **Facial expressions and body language** that match the vibe\n- **Text overlay timing and style** (TikTok font styles)\n- **Trending transition effects** or cuts that feel native to platform\n- **Mobile-first composition** optimized for vertical viewing\n\n### Engagement-Driving Elements:\n- **Questions**: \"What would you do?\" \"Am I the only one?\"\n- **Relatable Content**: \"POV:\", \"When you...\", \"That one friend who...\"\n- **Educational Value**: Quick tips, life hacks, little-known facts\n- **Controversy/Hot Takes**: Respectful opinions that spark discussion\n- **Community Building**: Content that makes viewers feel seen/understood\n\n### Thumbnail Generation Requirements:\nCreate a cover image that:\n- **Captures authentic moment** from the video\n- **Shows genuine facial expression** or key visual\n- **Uses bright, eye-catching composition** that pops on FYP\n- **Avoids overly polished look** (authenticity over perfection)\n- **Includes minimal text** (TikTok users want to watch, not read)\n- **Represents the energy** and vibe of the full video\n\n## Output Format Requirements\n\nGenerate a complete JSON response with:\n1. **Optimal duration** based on content complexity and TikTok best practices\n2. **Overall visual approach** with style guidance for authentic TikTok content\n3. **Content theme adaptation** that maintains viral appeal while being original\n4. **Strategic script** optimized for Gen Z attention spans and engagement\n5. **Algorithm-friendly elements** for maximum FYP potential\n6. **Authentic thumbnail prompt** for scroll-stopping cover image\n\nThe JSON must be properly formatted and ready for n8n workflow parsing and immediate video production.\n\n## Quality Checks\n\nBefore finalizing your response:\n- ✅ Selected framework is clearly implemented throughout the TikTok structure\n- ✅ Content maintains the viral theme while being 100% original in execution\n- ✅ First 3 seconds create immediate hook that stops Gen Z scroll\n- ✅ Visual approach feels authentic and native to TikTok culture\n- ✅ NEW examples, stories, or situations while keeping similar content value\n- ✅ Script flows naturally with high energy and relatability\n- ✅ Caption includes relatable hook and engagement drivers\n- ✅ Hashtag strategy balances trending FYP tags with niche community tags\n- ✅ Voice and execution reflect authentic personality, not copying original creator\n- ✅ Content provides similar value but through fresh, genuine perspective\n\nCreate an original TikTok that users will watch completely, engage with actively, and potentially duet or stitch while building authentic connection with Gen Z audience. The viral post is your blueprint for both content theme and success patterns, but your execution must be completely unique and authentically yours.",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1248,
            4336
          ],
          "id": "4e7036be-cb25-4718-a3fa-f2fe77a39f90",
          "name": "Edit Fields3"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "117d33a1-df4d-43fc-a89e-9643deb37734",
                  "leftValue": "={{ $json.output.approved }}",
                  "rightValue": "={{ $json.output.approved }}",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            3056,
            4352
          ],
          "id": "70c496da-52d5-426a-9745-3578b878e1f1",
          "name": "If1"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "ecd28bea-1423-4143-876f-e94b80717938",
                  "name": "feedback",
                  "value": "={{ $json.output.feedback }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            3248,
            4432
          ],
          "id": "75809211-1950-4bbd-9212-275ad8a65d43",
          "name": "Edit Fields4"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=You are an expert at TikTok content creation. Here's an origianl post idea:\n\n{{ $('Basic LLM Chain7').item.json.output }}\n\nHere's the user feedback for the post: {{ $json.feedback }}\n\nRedo the post according to the user's feedback and output as JSON\n\n{\n  \"tiktok_content\": {\n    \"duration\": \"string (optimal video length 15-60 seconds based on content)\",\n    \"content_theme\": \"string (core topic/theme adapted from viral inspiration)\",\n    \"script\": {\n      \"hook\": \"string (first 3 seconds - critical for algorithm and retention)\",\n      \"main_content\": \"string (core message delivery with timing notes 3-50s)\",\n      \"cta\": \"string (strong ending that drives action 50-60s)\"\n    },\n    \"visual_directions\": \"string (overall video approach and style guidance)\",\n\n    \"caption\": \"string (TikTok caption with hook, relatability, and engagement drivers)\",\n    \"hashtags\": \"string (20-30 strategic hashtags - trending, FYP, niche, and community)\"\n  },\n  \"thumbnail_generation_prompt\": \"string (detailed prompt for creating eye-catching TikTok cover image)\"\n}\n\n\n",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            1472,
            4176
          ],
          "id": "224e0851-1ced-40c2-a5be-beb05d378a5f",
          "name": "Basic LLM Chain8"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"tiktok_content\": {\n    \"duration\": \"string (optimal video length 15-60 seconds based on content)\",\n    \"content_theme\": \"string (core topic/theme adapted from viral inspiration)\",\n    \"script\": {\n      \"hook\": \"string (first 3 seconds - critical for algorithm and retention)\",\n      \"main_content\": \"string (core message delivery with timing notes 3-50s)\",\n      \"cta\": \"string (strong ending that drives action 50-60s)\"\n    },\n    \"visual_directions\": \"string (overall video approach and style guidance)\",\n\n    \"caption\": \"string (TikTok caption with hook, relatability, and engagement drivers)\",\n    \"hashtags\": \"string (20-30 strategic hashtags - trending, FYP, niche, and community)\"\n  },\n  \"optimization_notes\": {\n    \"hook_effectiveness\": \"string (why the first 3 seconds capture Gen Z attention and stop scroll)\",\n    \"framework_implementation\": \"string (how the selected framework drives the TikTok structure)\",\n    \"content_adaptation\": \"string (how the viral content theme was adapted while staying original)\",\n    \"retention_strategy\": \"string (specific elements that keep viewers watching to completion)\",\n    \"engagement_mechanics\": \"string (comment/share drivers, duet potential, trend participation)\"\n  },\n  \"thumbnail_generation_prompt\": \"string (detailed prompt for creating eye-catching TikTok cover image)\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1536,
            4720
          ],
          "id": "85dc8c30-cc37-4e9b-be59-27fd0ce4ae69",
          "name": "Structured Output Parser8"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "d7f81157-1cbb-46a9-a709-a212eb7c1455",
                  "name": "output",
                  "value": "={{ $json.output }}",
                  "type": "object"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2160,
            4336
          ],
          "id": "876be9d9-7d2f-43e3-95ff-b985171209dd",
          "name": "Edit Fields5"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here's the original content:\n\nScript\n{{ $('Edit Fields5').item.json.output.tiktok_content.script.hook }}\n{{ $('Edit Fields5').item.json.output.tiktok_content.script.main_content }}\n{{ $('Edit Fields5').item.json.output.tiktok_content.script.cta }}\n\nCaption\n{{ $('Edit Fields5').item.json.output.tiktok_content.caption }}\n\nhashtags\n{{ $('Edit Fields5').item.json.output.tiktok_content.hashtags }}\n\nUser feedback\n{{ $json.data.text }}",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "=I have provided you with user feedback regarding a piece of content.\n\nDetermine whether the user has approved the content, and if not, determine the changes required by the user.\n\nOutput as JSON:\n\n{\n\"approved\": true or false, boolean\n\"feedback\": \"user feedback\"\n}"
                }
              ]
            },
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            2656,
            4352
          ],
          "id": "c74a35cb-4e3e-41f1-a956-384f11efa42a",
          "name": "Basic LLM Chain9"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"approved\": true,\n  \"feedback\": \"user feedback\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            2656,
            4736
          ],
          "id": "5863d804-c0e7-4a15-8a73-33d9e24761fb",
          "name": "Structured Output Parser9"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tblt1c7ai48HlRBEQ",
              "mode": "list",
              "cachedResultName": "Post Pipeline",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tblt1c7ai48HlRBEQ"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Platform": "Tiktok",
                "Description or Caption": "={{ $('Edit Fields5').item.json.output.tiktok_content.caption }}",
                "Image Prompt": "={{ $('Edit Fields5').item.json.output.thumbnail_generation_prompt }}",
                "Post": "={{ $('Edit Fields5').item.json.output.tiktok_content.content_theme }}: {{ $('Edit Fields5').item.json.output.tiktok_content.duration }}",
                "Carousel Content or Script": "={{ $('Edit Fields5').item.json.output.tiktok_content.script.hook }}\n{{ $('Edit Fields5').item.json.output.tiktok_content.script.main_content }}\n{{ $('Edit Fields5').item.json.output.tiktok_content.script.cta }}",
                "Hashtags": "={{ $('Edit Fields5').item.json.output.tiktok_content.hashtags }}"
              },
              "matchingColumns": [
                "id"
              ],
              "schema": [
                {
                  "id": "id",
                  "displayName": "id",
                  "required": false,
                  "defaultMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": true,
                  "removed": false
                },
                {
                  "id": "Post",
                  "displayName": "Post",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Platform",
                  "displayName": "Platform",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Tiktok",
                      "value": "Tiktok"
                    },
                    {
                      "name": "Instagram",
                      "value": "Instagram"
                    },
                    {
                      "name": "LinkedIn",
                      "value": "LinkedIn"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Description or Caption",
                  "displayName": "Description or Caption",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Carousel Content or Script",
                  "displayName": "Carousel Content or Script",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Hashtags",
                  "displayName": "Hashtags",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Image Prompt",
                  "displayName": "Image Prompt",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            3360,
            4272
          ],
          "id": "a724e28c-6b23-4320-a2c0-8c1543d26ccd",
          "name": "Create a record5"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.content_prompt }}",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            1456,
            2208
          ],
          "id": "9464eae9-c133-4dd2-b384-86fde80b2bf4",
          "name": "Basic LLM Chain10"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "chatgpt-4o-latest",
              "mode": "list",
              "cachedResultName": "chatgpt-4o-latest"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            2112,
            2576
          ],
          "id": "4aeee4ae-9d52-4b3b-8557-0db528a2bc5b",
          "name": "OpenAI Chat Model3"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"carousel_content\": {\n    \"slide_count\": \"number (optimal slide count 5-10 based on content depth)\",\n    \"slides\": [\n      {\n        \"slide_number\": 1,\n        \"visual_concept\": \"string (detailed description of visual elements, colors, layout)\",\n        \"text_overlay\": \"string (text that appears on the slide - mobile optimized)\",\n        \"design_notes\": \"string (fonts, colors, positioning, brand elements)\"\n      },\n      {\n        \"slide_number\": 2,\n        \"visual_concept\": \"string (visual description for slide 2)\",\n        \"text_overlay\": \"string (slide 2 text content)\",\n        \"design_notes\": \"string (design consistency notes)\"\n      }\n    ],\n    \"caption\": \"string (Instagram caption with hook, value, storytelling, and strong CTA)\",\n    \"hashtags\": \"string (30 strategic hashtags - mix of popular, niche, and community tags)\"\n  },\n  \"optimization_notes\": {\n    \"hook_effectiveness\": \"string (why slide 1 stops scrolling and creates curiosity)\",\n    \"framework_implementation\": \"string (how the selected framework flows across slides)\",\n    \"visual_flow\": \"string (how slides build progression and maintain swipe-through)\",\n    \"engagement_mechanics\": \"string (save/share drivers, comment triggers, follow motivators)\"\n  },\n  \"performance_predictions\": {\n    \"estimated_reach\": \"string (reach assessment based on viral patterns and engagement factors)\",\n    \"engagement_drivers\": \"string (top 3 elements most likely to drive saves, shares, comments)\",\n    \"completion_rate_factors\": \"string (specific elements that encourage full carousel swipe-through)\"\n  },\n  \"image_generation_prompts\": [\n    {\n      \"slide_number\": 1,\n      \"prompt\": \"string (detailed AI image generation prompt for slide 1)\"\n    },\n    {\n      \"slide_number\": 2,\n      \"prompt\": \"string (detailed AI image generation prompt for slide 2)\"\n    }\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1280,
            2544
          ],
          "id": "353f7988-2368-45e3-a4a5-543242a15948",
          "name": "Structured Output Parser10"
        },
        {
          "parameters": {
            "operation": "sendAndWait",
            "sendTo": "shabbir@shabbirnoor.com",
            "subject": "Instagram Post Approval",
            "message": "=Hi there,\n\nHere's the Instagram Carousel:\n{{ $json.output.carousel_content.slides.map(slide => `Slide ${slide.slide_number}: ${slide.text_overlay}`).join('\\n') }}\n\nHere's the caption:\n{{ $json.output.carousel_content.caption }}\n\nHere's the hashtags:\n{{ $json.output.carousel_content.hashtags }}\n\nHere's why it works:\n{{ $json.output.optimization_notes.hook_effectiveness }}\n\n{{ $json.output.optimization_notes.framework_implementation }}\n\n{{ $json.output.optimization_notes.engagement_mechanics }}\n\nClick below to provide feedback",
            "responseType": "freeText",
            "options": {}
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            2432,
            2208
          ],
          "id": "19e2d3db-8a09-4c51-83ed-86cf0207288d",
          "name": "Send a message2",
          "webhookId": "10ba86d2-ca32-442e-a669-3ce0a4fe18cf"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "c0f6e399-ae66-4452-bfda-b4c1d4783d9d",
                  "name": "=content_prompt",
                  "value": "=# Instagram Carousel Generator Prompt\n\n## System Instructions\nYou are an expert Instagram carousel strategist specializing in creating original viral carousel content inspired by successful patterns. Your task is to generate a completely NEW and UNIQUE Instagram carousel that applies the successful frameworks and strategies from an analyzed viral post while making it entirely original and personalized for the user.\n\n## Input Analysis - Viral Content Inspiration\n{{ $json.text }}\n\n**Task**: Implement the selected framework exactly as described above. Follow the framework's specific structure, approach, and action steps to create a carousel that maximizes the identified strengths while maintaining Instagram's visual-first engagement standards.\n\n## Content Creation Approach\n\n**CRITICAL: The original content above is INSPIRATION ONLY. You must create completely new, original content that:**\n- **Uses the same successful framework and structure** \n- **Applies the identified viral strengths and patterns**\n- **Is 100% unique and original** (not a copy or close paraphrase)\n- **Reflects the user's voice and brand** (not the original creator's)\n- **Addresses similar audience pain points** but with fresh examples and insights\n\n**DO NOT:**\n- Copy phrases, sentences, or specific examples from the original\n- Use the same statistics, numbers, or claims\n- Replicate the exact hook or call-to-action\n- Mirror the original creator's personal story or credentials\n\n**DO:**\n- Apply the same structural framework that made it viral\n- Use similar engagement mechanics and psychological triggers\n- Create new examples, statistics, and personal anecdotes\n- Develop original insights that serve the same target audience\n\n## Carousel Generation Requirements\n\n### Output Format - JSON Structure:\n```json\n{\n  \"carousel_content\": {\n    \"slide_count\": \"number (optimal slide count 5-10 based on content depth)\",\n    \"slides\": [\n      {\n        \"slide_number\": 1,\n        \"visual_concept\": \"string (detailed description of visual elements, colors, layout)\",\n        \"text_overlay\": \"string (text that appears on the slide - mobile optimized)\",\n        \"design_notes\": \"string (fonts, colors, positioning, brand elements)\"\n      },\n      {\n        \"slide_number\": 2,\n        \"visual_concept\": \"string (visual description for slide 2)\",\n        \"text_overlay\": \"string (slide 2 text content)\",\n        \"design_notes\": \"string (design consistency notes)\"\n      }\n    ],\n    \"caption\": \"string (Instagram caption with hook, value, storytelling, and strong CTA)\",\n    \"hashtags\": \"string (30 strategic hashtags - mix of popular, niche, and community tags)\"\n  },\n  \"optimization_notes\": {\n    \"hook_effectiveness\": \"string (why slide 1 stops scrolling and creates curiosity)\",\n    \"framework_implementation\": \"string (how the selected framework flows across slides)\",\n    \"visual_flow\": \"string (how slides build progression and maintain swipe-through)\",\n    \"engagement_mechanics\": \"string (save/share drivers, comment triggers, follow motivators)\"\n  },\n  \"performance_predictions\": {\n    \"estimated_reach\": \"string (reach assessment based on viral patterns and engagement factors)\",\n    \"engagement_drivers\": \"string (top 3 elements most likely to drive saves, shares, comments)\",\n    \"completion_rate_factors\": \"string (specific elements that encourage full carousel swipe-through)\"\n  },\n  \"image_generation_prompts\": [\n    {\n      \"slide_number\": 1,\n      \"prompt\": \"string (detailed AI image generation prompt for slide 1)\"\n    },\n    {\n      \"slide_number\": 2,\n      \"prompt\": \"string (detailed AI image generation prompt for slide 2)\"\n    }\n  ]\n}\n```\n\n## Instagram Carousel Guidelines\n\n### Visual-First Design Standards:\n- **Mobile Optimization**: All text and visuals must be clear on small screens\n- **Scroll-Stopping Power**: Slide 1 must immediately capture attention in the feed\n- **Design Consistency**: Cohesive color scheme, fonts, and layout across all slides\n- **Text Hierarchy**: Large, bold headers with supporting smaller text\n- **Brand Recognition**: Consistent visual elements that build brand awareness\n\n### Carousel Flow Strategy:\n- **Slide 1**: Hook slide - creates curiosity gap, promises value, stops scroll\n- **Slides 2-X**: Value delivery - each slide builds on previous, progressive revelation\n- **Final Slide**: CTA slide - clear call-to-action, encourages engagement\n- **Swipe Motivation**: Each slide ends with intrigue for next slide\n\n### Content Structure Best Practices:\n- **5-7 slides**: Optimal for engagement and completion rates\n- **8-10 slides**: For comprehensive educational content\n- **Information Density**: One main concept per slide\n- **Text Readability**: Maximum 2-3 lines of large text per slide\n- **Visual Breaks**: Balance text-heavy and visual-heavy slides\n\n### Engagement Optimization:\n\n#### Save-Worthy Elements:\n- Educational value users want to reference later\n- Step-by-step guides or processes\n- Lists, tips, or actionable insights\n- Personal stories with universal lessons\n\n#### Share-Worthy Elements:\n- Relatable experiences that resonate broadly\n- Surprising statistics or little-known facts\n- Controversial but valuable perspectives\n- Inspirational or motivational content\n\n#### Comment-Driving Elements:\n- Questions that invite personal experiences\n- Polls or \"this or that\" scenarios\n- Requests for opinions or advice\n- Relatable situations that spark discussion\n\n### Image Generation Requirements:\nEach slide's image generation prompt should create visuals that:\n- **Match Instagram aesthetic** (bright, high-contrast, modern design)\n- **Support slide content** without repeating text verbatim\n- **Flow cohesively** from slide to slide with consistent branding\n- **Include strategic white space** for text overlay readability\n- **Use colors strategically** to guide attention and create visual hierarchy\n- **Incorporate relevant icons/graphics** that enhance understanding\n- **Avoid text-heavy designs** (text goes in overlay, not baked into image)\n\n### Image Prompt Structure Template:\n\"Create a modern Instagram carousel slide featuring [visual concept] with [specific design elements]. Style: [clean/bold/minimalist]. Color scheme: [specific colors that work with brand]. Layout: [composition notes]. Include: [relevant icons/graphics/photos]. Ensure: high contrast, mobile-optimized, space for text overlay. Avoid: cluttered design, hard-to-read elements.\"\n\n## Output Format Requirements\n\nGenerate a complete JSON response with:\n1. **Optimal slide count** based on content depth and framework requirements\n2. **All slides mapped out** with visual concepts and text overlays\n3. **Compelling caption** that works with carousel content\n4. **Strategic hashtag mix** for maximum reach and engagement\n5. **Detailed analysis** of why this carousel will perform well\n6. **Individual image prompts** for each slide that create cohesive visual flow\n\nThe JSON must be properly formatted and ready for n8n workflow parsing and immediate content creation execution.\n\n## Quality Checks\n\nBefore finalizing your response:\n- ✅ Selected framework is clearly implemented across the carousel progression\n- ✅ Content is 100% original and unique (no copying from viral inspiration)\n- ✅ Slide 1 creates immediate scroll-stopping impact and curiosity\n- ✅ Each slide builds logically on previous slides with clear progression\n- ✅ NEW examples, statistics, or insights included for authenticity\n- ✅ Text overlays are mobile-optimized and highly readable\n- ✅ Image generation prompts create cohesive visual branding\n- ✅ Caption includes strong hook, value delivery, and clear CTA\n- ✅ Hashtag strategy balances reach, relevance, and community engagement\n- ✅ Voice and approach are distinctly different from the original viral content\n\nCreate an original carousel that Instagram users will save, share, and swipe through completely while building authentic connection with your target audience. The viral post is your blueprint for success patterns, but your carousel must be completely unique and authentically yours.",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1216,
            2208
          ],
          "id": "49c95223-f727-4f65-99f1-e2f22a2e2424",
          "name": "Edit Fields6"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "117d33a1-df4d-43fc-a89e-9643deb37734",
                  "leftValue": "={{ $json.output.approved }}",
                  "rightValue": "={{ $json.output.approved }}",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            3072,
            2224
          ],
          "id": "09fd5b77-50da-4599-aff5-c79033f35fd8",
          "name": "If2"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "ecd28bea-1423-4143-876f-e94b80717938",
                  "name": "feedback",
                  "value": "={{ $json.output.feedback }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            3264,
            2304
          ],
          "id": "30ff7aec-8007-4a5d-9be4-2af43ac217be",
          "name": "Edit Fields7"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=You are an expert at Instagram Carousel content creation. Here's the original post idea:\n\n{{ $('Edit Fields8').item.json.output.carousel_content.slides.map(slide => `Slide ${slide.slide_number}: ${slide.text_overlay}`).join('\\n') }}\n\nCaption\n{{ $('Edit Fields8').item.json.output.carousel_content.caption }}\n\nHashtags\n{{ $('Edit Fields8').item.json.output.carousel_content.hashtags }}\n\n\nHere's the user feedback for the post: {{ $json.feedback }}\n\nRedo the post according to the user's feedback and output as JSON\n\n{\n  \"carousel_content\": {\n    \"slide_count\": \"number (optimal slide count 5-10 based on content depth)\",\n    \"slides\": [\n      {\n        \"slide_number\": 1,\n        \"visual_concept\": \"string (detailed description of visual elements, colors, layout)\",\n        \"text_overlay\": \"string (text that appears on the slide - mobile optimized)\",\n        \"design_notes\": \"string (fonts, colors, positioning, brand elements)\"\n      },\n      {\n        \"slide_number\": 2,\n        \"visual_concept\": \"string (visual description for slide 2)\",\n        \"text_overlay\": \"string (slide 2 text content)\",\n        \"design_notes\": \"string (design consistency notes)\"\n      }\n    ],\n    \"caption\": \"string (Instagram caption with hook, value, storytelling, and strong CTA)\",\n    \"hashtags\": \"string\"\n  }\n}\n\n\n\n\n",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            1456,
            2048
          ],
          "id": "727b18a4-8dad-4353-94d0-da28129efd46",
          "name": "Basic LLM Chain11"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"carousel_content\": {\n    \"slide_count\": \"number (optimal slide count 5-10 based on content depth)\",\n    \"slides\": [\n      {\n        \"slide_number\": 1,\n        \"visual_concept\": \"string (detailed description of visual elements, colors, layout)\",\n        \"text_overlay\": \"string (text that appears on the slide - mobile optimized)\",\n        \"design_notes\": \"string (fonts, colors, positioning, brand elements)\"\n      },\n      {\n        \"slide_number\": 2,\n        \"visual_concept\": \"string (visual description for slide 2)\",\n        \"text_overlay\": \"string (slide 2 text content)\",\n        \"design_notes\": \"string (design consistency notes)\"\n      }\n    ],\n    \"caption\": \"string (Instagram caption with hook, value, storytelling, and strong CTA)\",\n    \"hashtags\": \"string\"\n  }\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1920,
            2576
          ],
          "id": "e386f7f5-6c31-4bb9-9018-05c24a4abaef",
          "name": "Structured Output Parser11"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "a585c41b-83d8-42f1-840d-e5d4189f078f",
                  "name": "output",
                  "value": "={{ $json.output }}",
                  "type": "object"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2128,
            2208
          ],
          "id": "f8ca5f0c-c9e7-4086-b9f0-ebb82ccc22be",
          "name": "Edit Fields8"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here's the original content:\n\n{{ $('Edit Fields8').item.json.output.carousel_content.slides.map(slide => `Slide ${slide.slide_number}: ${slide.text_overlay}`).join('\\n') }}\n\nCaption\n{{ $('Edit Fields8').item.json.output.carousel_content.caption }}\n\nFeedback:\n\n{{ $json.data.text }}",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "=I have provided you with user feedback regarding a piece of content.\n\nDetermine whether the user has approved the content, and if not, determine the changes required by the user.\n\nOutput as JSON:\n\n{\n\"approved\": true or false, boolean\n\"feedback\": \"user feedback\"\n}"
                }
              ]
            },
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            2672,
            2224
          ],
          "id": "d87d8424-bafe-49cd-b645-c71474b65fea",
          "name": "Basic LLM Chain12"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"approved\": true,\n  \"feedback\": \"user feedback\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            2672,
            2608
          ],
          "id": "d293d8c3-409b-44a3-ab6a-391a419e65f6",
          "name": "Structured Output Parser12"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tblt1c7ai48HlRBEQ",
              "mode": "list",
              "cachedResultName": "Post Pipeline",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tblt1c7ai48HlRBEQ"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Platform": "Instagram",
                "Description or Caption": "={{ $('Edit Fields8').item.json.output.carousel_content.caption }}",
                "Image Prompt": "=",
                "Hashtags": "={{ $('Edit Fields8').item.json.output.carousel_content.hashtags }}",
                "Carousel Content or Script": "={{ $('Edit Fields8').item.json.output.carousel_content.slides.map(slide => `Slide ${slide.slide_number}: ${slide.text_overlay}`).join('\\n') }}"
              },
              "matchingColumns": [
                "id"
              ],
              "schema": [
                {
                  "id": "id",
                  "displayName": "id",
                  "required": false,
                  "defaultMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": true,
                  "removed": false
                },
                {
                  "id": "Post",
                  "displayName": "Post",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Platform",
                  "displayName": "Platform",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Tiktok",
                      "value": "Tiktok"
                    },
                    {
                      "name": "Instagram",
                      "value": "Instagram"
                    },
                    {
                      "name": "LinkedIn",
                      "value": "LinkedIn"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Description or Caption",
                  "displayName": "Description or Caption",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Carousel Content or Script",
                  "displayName": "Carousel Content or Script",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Hashtags",
                  "displayName": "Hashtags",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Image Prompt",
                  "displayName": "Image Prompt",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            3376,
            2144
          ],
          "id": "1b9a4b27-feb3-40b4-850c-ac411cfbb3b4",
          "name": "Create a record6"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.content_prompt }}",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            1488,
            2960
          ],
          "id": "03e12a1f-b3db-4406-a288-1c99b7c33913",
          "name": "Basic LLM Chain13"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "chatgpt-4o-latest",
              "mode": "list",
              "cachedResultName": "chatgpt-4o-latest"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            2144,
            3248
          ],
          "id": "8aa4103e-961a-4dae-8ce1-5246df245220",
          "name": "OpenAI Chat Model4"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"reel_content\": {\n    \"duration\": \"string (optimal video length 15-30 seconds based on content)\",\n    \"content_theme\": \"string (core topic/theme adapted from viral inspiration)\",\n    \"script\": {\n      \"hook\": \"string (first 3 seconds - critical for retention and algorithm)\",\n      \"main_content\": \"string (core message delivery with timing notes 3-25s)\",\n      \"cta\": \"string (strong ending that drives action 25-30s)\"\n    },\n    \"visual_directions\": {\n      \"overall_style\": \"string (video aesthetic - trendy/professional/casual/aesthetic)\",\n      \"scenes\": [\n        {\n          \"timestamp\": \"0-3s\",\n          \"visual\": \"string (specific visual action, setting, props)\",\n          \"text_overlay\": \"string (on-screen text for this moment)\",\n          \"transition\": \"string (how to move to next scene - cut/zoom/slide)\"\n        },\n        {\n          \"timestamp\": \"3-8s\", \n          \"visual\": \"string (scene 2 visual description)\",\n          \"text_overlay\": \"string (text overlay for scene 2)\",\n          \"transition\": \"string (transition to scene 3)\"\n        }\n      ]\n    },\n    \"audio_suggestions\": {\n      \"style\": \"string (trending audio/original voiceover/music + voiceover)\",\n      \"mood\": \"string (energetic/calm/dramatic/upbeat/inspiring)\",\n      \"specific_recommendations\": \"string (trending sounds or original audio direction)\",\n      \"voiceover_notes\": \"string (tone, pace, emotion for spoken content)\"\n    },\n    \"caption\": \"string (Instagram caption with hook, context, value, and strong CTA)\",\n    \"hashtags\": \"string (30 strategic hashtags - trending, niche, and community mix)\"\n  },\n  \"optimization_notes\": {\n    \"hook_effectiveness\": \"string (why the first 3 seconds capture attention and stop scroll)\",\n    \"framework_implementation\": \"string (how the selected framework drives the reel structure)\",\n    \"content_adaptation\": \"string (how the viral content theme was adapted while staying original)\",\n    \"retention_strategy\": \"string (specific elements that keep viewers watching to completion)\",\n    \"engagement_mechanics\": \"string (comment/share drivers, algorithm optimization factors)\"\n  },\n\n  \"thumbnail_generation_prompt\": \"string (detailed prompt for creating eye-catching reel cover image)\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1312,
            3296
          ],
          "id": "6a3f424e-a4a1-49f3-8e82-bf53f5db20f5",
          "name": "Structured Output Parser13"
        },
        {
          "parameters": {
            "operation": "sendAndWait",
            "sendTo": "shabbir@shabbirnoor.com",
            "subject": "Instagram Reel Approval",
            "message": "=Hi there,\n\nHere's the Instagram Reel Script:\n{{ $json.output.reel_content.script.hook }}\n{{ $json.output.reel_content.script.main_content }}\n{{ $json.output.reel_content.script.cta }}\n\nHere's the caption:\n{{ $json.output.reel_content.caption }}\n\nHashtags: \n{{ $json.output.reel_content.hashtags }}\n\nHere's why it works:\n{{ $json.output.optimization_notes.hook_effectiveness }}\n\n{{ $json.output.optimization_notes.framework_implementation }}\n\n{{ $json.output.optimization_notes.engagement_mechanics }}\n\nClick below to provide feedback",
            "responseType": "freeText",
            "options": {}
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            2464,
            2960
          ],
          "id": "56950296-946a-40ef-9be1-84acad0eff5e",
          "name": "Send a message3",
          "webhookId": "10ba86d2-ca32-442e-a669-3ce0a4fe18cf"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "c0f6e399-ae66-4452-bfda-b4c1d4783d9d",
                  "name": "=content_prompt",
                  "value": "=# Instagram Reel Generator Prompt\n\n## System Instructions\nYou are an expert Instagram Reel strategist specializing in creating original viral video content inspired by successful patterns. Your task is to generate a completely NEW and UNIQUE Instagram Reel that applies the successful frameworks, content themes, and viral elements from an analyzed viral post while making it entirely original and personalized for the user.\n\n## Input Analysis - Viral Content Inspiration\n{{ $json.text }}\n\n**Task**: Implement the selected framework exactly as described above. Follow the framework's specific structure, approach, and action steps to create a reel that maximizes the identified strengths while maintaining Instagram's video-first engagement standards.\n\n## Content Creation Approach\n\n**CRITICAL: The original content above is INSPIRATION for both FRAMEWORK and CONTENT THEME. You must create new, original content that:**\n- **Uses the same successful framework and structure** \n- **Maintains the core content theme and topic** that made it viral\n- **Applies similar psychological triggers and engagement mechanics**\n- **Is substantially different in execution** (new examples, different angle, fresh delivery)\n- **Reflects the user's voice and brand** (not the original creator's)\n- **Addresses the same audience need** but with original insights and approach\n\n**CONTENT SIMILARITY Guidelines:**\n- **Same topic/niche**: If original was about productivity, yours should be about productivity\n- **Similar value proposition**: If original taught \"5 ways to...\", yours could teach \"3 secrets to...\" \n- **Same audience pain point**: Address the same underlying problem or desire\n- **Similar content format**: Educational, entertainment, behind-the-scenes, etc.\n\n**EXECUTION DIFFERENCES Required:**\n- **New specific examples, statistics, or case studies**\n- **Different personal story or experience**\n- **Fresh angle or perspective on the same topic**\n- **Original script and delivery style**\n- **Unique visual approach and styling**\n\n## Reel Generation Requirements\n\n### Output Format - JSON Structure:\n{\n  \"reel_content\": {\n    \"duration\": \"string (optimal video length 15-30 seconds based on content)\",\n    \"content_theme\": \"string (core topic/theme adapted from viral inspiration)\",\n    \"script\": {\n      \"hook\": \"string (first 3 seconds - critical for retention and algorithm)\",\n      \"main_content\": \"string (core message delivery with timing notes 3-25s)\",\n      \"cta\": \"string (strong ending that drives action 25-30s)\"\n    },\n    \"audio_suggestions\": {\n      \"style\": \"string (trending audio/original voiceover/music + voiceover)\",\n      \"mood\": \"string (energetic/calm/dramatic/upbeat/inspiring)\",\n      \"specific_recommendations\": \"string (trending sounds or original audio direction)\",\n      \"voiceover_notes\": \"string (tone, pace, emotion for spoken content)\"\n    },\n    \"caption\": \"string (Instagram caption with hook, context, value, and strong CTA)\",\n    \"hashtags\": \"string (30 strategic hashtags - trending, niche, and community mix)\"\n  },\n  \"optimization_notes\": {\n    \"hook_effectiveness\": \"string (why the first 3 seconds capture attention and stop scroll)\",\n    \"framework_implementation\": \"string (how the selected framework drives the reel structure)\",\n    \"content_adaptation\": \"string (how the viral content theme was adapted while staying original)\",\n    \"retention_strategy\": \"string (specific elements that keep viewers watching to completion)\",\n    \"engagement_mechanics\": \"string (comment/share drivers, algorithm optimization factors)\"\n  },\n\n  \"thumbnail_generation_prompt\": \"string (detailed prompt for creating eye-catching reel cover image)\"\n}\n\n\n## Instagram Reels Guidelines\n\n### Algorithm Optimization Factors:\n- **First 3 Seconds**: Most critical for algorithm promotion and viewer retention\n- **Watch Time**: Complete video watches signal quality to algorithm\n- **Engagement Velocity**: Quick likes/comments/shares boost distribution\n- **Trending Elements**: Audio, hashtags, or content formats currently popular\n- **Original Content**: Instagram favors original over reposted content\n\n### Video Production Standards:\n- **Vertical Format**: 9:16 aspect ratio optimized for mobile consumption\n- **High Quality**: Clear visuals and audio, good lighting, stable footage\n- **Quick Cuts**: Fast-paced editing to maintain attention spans\n- **Visual Interest**: Movement, color changes, or visual hooks every 2-3 seconds\n- **Mobile Viewing**: Everything readable and visible on small screens\n\n### Content Structure Best Practices:\n\n#### 15-Second Reels (Quick Tips/Hooks):\n- **0-3s**: Immediate hook with bold claim or visual\n- **3-12s**: Rapid value delivery or entertainment\n- **12-15s**: Strong CTA or memorable ending\n\n#### 30-Second Reels (Educational/Storytelling):\n- **0-3s**: Hook that promises specific value\n- **3-15s**: Setup context or problem identification\n- **15-25s**: Solution delivery or key insights\n- **25-30s**: Clear call-to-action and engagement request\n\n### Viral Content Patterns:\n\n#### Educational Reels:\n- Quick tips or life hacks\n- Step-by-step tutorials\n- \"Things I wish I knew\" format\n- Myth-busting or fact-sharing\n\n#### Entertainment Reels:\n- Relatable scenarios or experiences\n- Trending challenges with personal twist\n- Behind-the-scenes content\n- Day-in-the-life glimpses\n\n#### Engagement-Driving Elements:\n- **Questions**: \"What would you do?\" \"Have you tried this?\"\n- **Controversy**: Respectful hot takes that spark discussion\n- **Relatability**: \"POV: When you...\" or \"Tell me you... without telling me\"\n- **Value**: Actionable advice people want to save and share\n\n### Audio Strategy:\n- **Trending Sounds**: Use popular audio for algorithm boost\n- **Original Audio**: Creates unique content that others might use\n- **Voiceover + Music**: Layered audio for both entertainment and education\n- **Sound Quality**: Clear audio is critical for retention\n\n### Visual Direction Requirements:\nEach scene should specify:\n- **Specific actions or movements** for visual interest\n- **Props, settings, or background elements** needed\n- **Text overlay timing and content** for key messages\n- **Transition style** to maintain flow and momentum\n- **Lighting and composition** notes for professional quality\n\n### Thumbnail Generation Requirements:\nCreate a cover image that:\n- **Stops scroll immediately** with bold, eye-catching design\n- **Communicates value** at a glance without audio\n- **Shows faces or emotions** when relevant (higher engagement)\n- **Includes minimal text** (1-3 words max)\n- **Uses bright, high-contrast colors** that pop in the feed\n- **Optimizes for small mobile screens** (clear, simple composition)\n\n## Output Format Requirements\n\nGenerate a complete JSON response with:\n1. **Optimal duration** based on content complexity and framework\n2. **Scene-by-scene breakdown** with specific visual and audio directions\n3. **Content theme adaptation** that maintains viral appeal while being original\n4. **Algorithm-friendly elements** for maximum reach potential\n5. **Professional thumbnail prompt** for scroll-stopping cover image\n\nThe JSON must be properly formatted and ready for n8n workflow parsing and immediate video production.\n\n## Quality Checks\n\nBefore finalizing your response:\n- ✅ Selected framework is clearly implemented throughout the reel structure\n- ✅ Content maintains the viral theme while being 100% original in execution\n- ✅ First 3 seconds create immediate hook and retention\n- ✅ Visual directions are specific enough for video production\n- ✅ NEW examples, stories, or insights while keeping similar content value\n- ✅ Script flows naturally and maintains energy throughout\n- ✅ Audio suggestions align with current Instagram trends\n- ✅ Caption includes strong hook and clear call-to-action\n- ✅ Hashtag strategy balances trending and niche tags\n- ✅ Voice and execution are distinctly different from original viral content\n- ✅ Content provides similar value but through fresh perspective and approach\n\nCreate an original reel that Instagram users will watch completely, engage with actively, and share widely while building authentic connection with your target audience. The viral post is your blueprint for both content theme and success patterns, but your execution must be completely unique and authentically yours.",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1296,
            2960
          ],
          "id": "548c7463-c8fb-4685-b2dd-3e0684a34457",
          "name": "Edit Fields9"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "117d33a1-df4d-43fc-a89e-9643deb37734",
                  "leftValue": "={{ $json.output.approved }}",
                  "rightValue": "={{ $json.output.approved }}",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            3104,
            2976
          ],
          "id": "61311a21-1245-490f-8c89-0b304ee7ea43",
          "name": "If3"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "ecd28bea-1423-4143-876f-e94b80717938",
                  "name": "feedback",
                  "value": "={{ $json.output.feedback }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            3296,
            3056
          ],
          "id": "51bfe4ad-38b9-4bcc-b50f-cb6e52bf339c",
          "name": "Edit Fields10"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=You are an expert at Instagram content creation. Here's an origianl script idea:\n\nHook: {{ $('Edit Fields11').item.json.output.reel_content.script.hook }}\nContent: {{ $('Edit Fields11').item.json.output.reel_content.script.main_content }}\nCTA: {{ $('Edit Fields11').item.json.output.reel_content.script.cta }}\n\nCaption: {{ $('Edit Fields11').item.json.output.reel_content.caption }}\n\nHashtags: {{ $('Edit Fields11').item.json.output.reel_content.hashtags }}\n\nThumb: {{ $('Edit Fields11').item.json.output.thumbnail_generation_prompt }}\n\nAudio:\n{{ $('Edit Fields11').item.json.output.reel_content.audio_suggestions.style }}\n{{ $('Edit Fields11').item.json.output.reel_content.audio_suggestions.mood }}\n{{ $('Edit Fields11').item.json.output.reel_content.audio_suggestions.specific_recommendations }}\n{{ $('Edit Fields11').item.json.output.reel_content.audio_suggestions.voiceover_notes }}\n\nHere's the user feedback for the post: {{ $json.feedback }}\n\nRedo the post according to the user's feedback and output as JSON\n\n{\n  \"reel_content\": {\n    \"duration\": \"string (optimal video length 15-30 seconds based on content)\",\n    \"content_theme\": \"string (core topic/theme adapted from viral inspiration)\",\n    \"script\": {\n      \"hook\": \"string (first 3 seconds - critical for retention and algorithm)\",\n      \"main_content\": \"string (core message delivery with timing notes 3-25s)\",\n      \"cta\": \"string (strong ending that drives action 25-30s)\"\n    },\n    \"audio_suggestions\": {\n      \"style\": \"string (trending audio/original voiceover/music + voiceover)\",\n      \"mood\": \"string (energetic/calm/dramatic/upbeat/inspiring)\",\n      \"specific_recommendations\": \"string (trending sounds or original audio direction)\",\n      \"voiceover_notes\": \"string (tone, pace, emotion for spoken content)\"\n    },\n    \"caption\": \"string (Instagram caption with hook, context, value, and strong CTA)\",\n    \"hashtags\": \"string (30 strategic hashtags - trending, niche, and community mix)\"\n  },\n\n  \"thumbnail_generation_prompt\": \"string (detailed prompt for creating eye-catching reel cover image)\"\n}\n\n",
            "hasOutputParser": true,
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            1488,
            2800
          ],
          "id": "f58e4b2d-7a79-48c3-97bf-16e2fe240f50",
          "name": "Basic LLM Chain14"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"reel_content\": {\n    \"duration\": \"string (optimal video length 15-30 seconds based on content)\",\n    \"content_theme\": \"string (core topic/theme adapted from viral inspiration)\",\n    \"script\": {\n      \"hook\": \"string (first 3 seconds - critical for retention and algorithm)\",\n      \"main_content\": \"string (core message delivery with timing notes 3-25s)\",\n      \"cta\": \"string (strong ending that drives action 25-30s)\"\n    },\n    \"audio_suggestions\": {\n      \"style\": \"string (trending audio/original voiceover/music + voiceover)\",\n      \"mood\": \"string (energetic/calm/dramatic/upbeat/inspiring)\",\n      \"specific_recommendations\": \"string (trending sounds or original audio direction)\",\n      \"voiceover_notes\": \"string (tone, pace, emotion for spoken content)\"\n    },\n    \"caption\": \"string (Instagram caption with hook, context, value, and strong CTA)\",\n    \"hashtags\": \"string (30 strategic hashtags - trending, niche, and community mix)\"\n  },\n\n  \"thumbnail_generation_prompt\": \"string (detailed prompt for creating eye-catching reel cover image)\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1952,
            3312
          ],
          "id": "605c1419-7bc7-448e-9072-b3d071328be7",
          "name": "Structured Output Parser14"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "d7f81157-1cbb-46a9-a709-a212eb7c1455",
                  "name": "output",
                  "value": "={{ $json.output }}",
                  "type": "object"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2208,
            2960
          ],
          "id": "f2e3dfc3-d19e-4fb0-a8a7-89fa3b337789",
          "name": "Edit Fields11"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here's the original content:\n{{ $('Edit Fields11').item.json.output.linkedin_post }}\n\n{{ $json.data.text }}",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "=I have provided you with user feedback regarding a piece of content.\n\nDetermine whether the user has approved the content, and if not, determine the changes required by the user.\n\nOutput as JSON:\n\n{\n\"approved\": true or false, boolean\n\"feedback\": \"user feedback\"\n}"
                }
              ]
            },
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            2704,
            2976
          ],
          "id": "fca60497-038a-4000-a2d4-76028f22534f",
          "name": "Basic LLM Chain15"
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n  \"approved\": true,\n  \"feedback\": \"user feedback\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            2704,
            3360
          ],
          "id": "7913135c-e6ae-4b97-847b-5fd5f521c6be",
          "name": "Structured Output Parser15"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "app7GtQRtd1vnFEdW",
              "mode": "list",
              "cachedResultName": "Social Automation",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW"
            },
            "table": {
              "__rl": true,
              "value": "tblt1c7ai48HlRBEQ",
              "mode": "list",
              "cachedResultName": "Post Pipeline",
              "cachedResultUrl": "https://airtable.com/app7GtQRtd1vnFEdW/tblt1c7ai48HlRBEQ"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Platform": "Instagram",
                "Description or Caption": "={{ $('Edit Fields11').item.json.output.reel_content.caption }}",
                "Image Prompt": "={{ $('Edit Fields11').item.json.output.thumbnail_generation_prompt }}",
                "Post": "={{ $('Edit Fields11').item.json.output.reel_content.content_theme }}: {{ $('Edit Fields11').item.json.output.reel_content.duration }}",
                "Hashtags": "={{ $('Edit Fields11').item.json.output.reel_content.hashtags }}",
                "Carousel Content or Script": "={{ $('Edit Fields11').item.json.output.reel_content.script.hook}}\n{{ $('Edit Fields11').item.json.output.reel_content.script.main_content }}\n{{ $('Edit Fields11').item.json.output.reel_content.script.cta }}"
              },
              "matchingColumns": [
                "id"
              ],
              "schema": [
                {
                  "id": "Post",
                  "displayName": "Post",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Platform",
                  "displayName": "Platform",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Tiktok",
                      "value": "Tiktok"
                    },
                    {
                      "name": "Instagram",
                      "value": "Instagram"
                    },
                    {
                      "name": "LinkedIn",
                      "value": "LinkedIn"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Description or Caption",
                  "displayName": "Description or Caption",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Carousel Content or Script",
                  "displayName": "Carousel Content or Script",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Hashtags",
                  "displayName": "Hashtags",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Image Prompt",
                  "displayName": "Image Prompt",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            3408,
            2896
          ],
          "id": "4d14ec12-01e9-48dd-8f74-6b662a25ff6d",
          "name": "Create a record7"
        },
        {
          "parameters": {
            "operation": "delete",
            "messageId": "={{ $('Gmail Trigger').item.json.id }}"
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            3568,
            4272
          ],
          "id": "9812bf65-ebda-442e-9564-f2810e147cad",
          "name": "Delete a message",
          "webhookId": "fb03b079-7b13-46c5-add0-50bcee6ee902"
        },
        {
          "parameters": {
            "operation": "delete",
            "messageId": "={{ $('Gmail Trigger').item.json.id }}"
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            3536,
            3568
          ],
          "id": "216713cd-642f-493b-9bfc-7b6e2c668ec9",
          "name": "Delete a message1",
          "webhookId": "fb03b079-7b13-46c5-add0-50bcee6ee902"
        },
        {
          "parameters": {
            "operation": "delete",
            "messageId": "={{ $('Gmail Trigger').item.json.id }}"
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            3616,
            2912
          ],
          "id": "62c441a2-562a-45dd-bf8c-93faa80cf9c2",
          "name": "Delete a message2",
          "webhookId": "fb03b079-7b13-46c5-add0-50bcee6ee902"
        },
        {
          "parameters": {
            "operation": "delete",
            "messageId": "={{ $('Gmail Trigger').item.json.id }}"
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            3584,
            2144
          ],
          "id": "1a320f30-e656-4c21-aae6-f61824ea71f5",
          "name": "Delete a message3",
          "webhookId": "fb03b079-7b13-46c5-add0-50bcee6ee902"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "weeks"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -1152,
            1104
          ],
          "id": "7008c11a-ce19-4960-a46a-d8f78e57b339",
          "name": "Schedule Trigger"
        },
        {
          "parameters": {},
          "type": "@apify/n8n-nodes-apify.apify",
          "typeVersion": 1,
          "position": [
            496,
            1264
          ],
          "id": "3beb33aa-b85a-4d31-a67e-54549b6b1658",
          "name": "Run an Actor",
          "credentials": {}
        },
        {
          "parameters": {},
          "type": "@apify/n8n-nodes-apify.apify",
          "typeVersion": 1,
          "position": [
            704,
            1264
          ],
          "id": "f435d626-b093-4830-bea3-8e6ec1d0a809",
          "name": "Get run2",
          "credentials": {}
        },
        {
          "parameters": {},
          "type": "@apify/n8n-nodes-apify.apify",
          "typeVersion": 1,
          "position": [
            1200,
            1264
          ],
          "id": "af8a2dca-845e-411a-a9d1-eb2db017b765",
          "name": "Get dataset items",
          "credentials": {}
        },
        {
          "parameters": {},
          "type": "@apify/n8n-nodes-apify.apify",
          "typeVersion": 1,
          "position": [
            496,
            1680
          ],
          "id": "35717b50-f488-4171-897b-c2f8cf102919",
          "name": "Run an Actor1",
          "credentials": {}
        },
        {
          "parameters": {},
          "type": "@apify/n8n-nodes-apify.apify",
          "typeVersion": 1,
          "position": [
            720,
            1680
          ],
          "id": "5fb409ff-b977-423e-8477-8273a2720474",
          "name": "Get run3",
          "credentials": {}
        },
        {
          "parameters": {},
          "type": "@apify/n8n-nodes-apify.apify",
          "typeVersion": 1,
          "position": [
            1104,
            1680
          ],
          "id": "c29e8e80-8ed8-4e6a-88c2-03685853df5d",
          "name": "Get dataset items1",
          "credentials": {}
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "7bbcecb4-03c4-4a75-8fb3-8d2d4c822ebe",
                  "leftValue": "={{ $json.status }}",
                  "rightValue": "SUCCEEDED",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            912,
            1264
          ],
          "id": "2b71bec5-50c4-4bf8-8360-3f69ba9de3a1",
          "name": "If4"
        },
        {
          "parameters": {
            "amount": 20
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            1056,
            1392
          ],
          "id": "aa11d96e-01e8-461e-a241-c7cd126aa96c",
          "name": "Wait",
          "webhookId": "d0951472-9167-4b05-9df6-7bd5230e18d0"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "7bbcecb4-03c4-4a75-8fb3-8d2d4c822ebe",
                  "leftValue": "={{ $json.status }}",
                  "rightValue": "SUCCEEDED",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            912,
            1712
          ],
          "id": "6b7f730e-acf4-4c93-9a05-10587701b9a9",
          "name": "If5"
        },
        {
          "parameters": {
            "amount": 20
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            1056,
            1840
          ],
          "id": "048ecf45-8faa-4e65-9cff-04b99ebc1ee9",
          "name": "Wait1",
          "webhookId": "d0951472-9167-4b05-9df6-7bd5230e18d0"
        }
      ],
      "connections": {
        "HTTP Request": {
          "main": [
            [
              {
                "node": "Code1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Code1": {
          "main": [
            [
              {
                "node": "HTTP Request1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI": {
          "main": [
            [
              {
                "node": "Basic LLM Chain",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request1": {
          "main": [
            [
              {
                "node": "OpenAI",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "When clicking ‘Execute workflow’": {
          "main": [
            [
              {
                "node": "Search records",
                "type": "main",
                "index": 0
              },
              {
                "node": "Search records3",
                "type": "main",
                "index": 0
              },
              {
                "node": "Search records2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Search records": {
          "main": [
            [
              {
                "node": "HTTP Request3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request3": {
          "main": [
            [
              {
                "node": "Split Out",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Out": {
          "main": [
            [
              {
                "node": "Filter",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter": {
          "main": [
            [
              {
                "node": "Filter1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter1": {
          "main": [
            [
              {
                "node": "Switch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Switch": {
          "main": [
            [
              {
                "node": "Loop Over Items1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Loop Over Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop Over Items": {
          "main": [
            [],
            [
              {
                "node": "HTTP Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain": {
          "main": [
            [
              {
                "node": "Create a record",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Create a record": {
          "main": [
            [
              {
                "node": "Loop Over Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request2": {
          "main": [
            [
              {
                "node": "HTTP Request4",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop Over Items1": {
          "main": [
            [],
            [
              {
                "node": "HTTP Request2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyze image": {
          "main": [
            [
              {
                "node": "Message a model",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request4": {
          "main": [
            [
              {
                "node": "Analyze image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Message a model": {
          "main": [
            [
              {
                "node": "Code",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Code": {
          "main": [
            [
              {
                "node": "Basic LLM Chain1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain1": {
          "main": [
            [
              {
                "node": "Create a record1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model1": {
          "ai_languageModel": [
            [
              {
                "node": "Basic LLM Chain1",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain2",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain3",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser1": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain1",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Create a record1": {
          "main": [
            [
              {
                "node": "Loop Over Items1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter2": {
          "main": [
            [
              {
                "node": "Loop Over Items2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain2": {
          "main": [
            [
              {
                "node": "Create a record2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser2": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain2",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Create a record2": {
          "main": [
            [
              {
                "node": "Loop Over Items2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop Over Items2": {
          "main": [
            [],
            [
              {
                "node": "Basic LLM Chain2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request7": {
          "main": [
            [
              {
                "node": "HTTP Request8",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop Over Items3": {
          "main": [
            [],
            [
              {
                "node": "HTTP Request7",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter4": {
          "main": [
            [
              {
                "node": "Loop Over Items3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter5": {
          "main": [
            [
              {
                "node": "Filter4",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request8": {
          "main": [
            [
              {
                "node": "Read/Write Files from Disk",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Read/Write Files from Disk": {
          "main": [
            [
              {
                "node": "Read/Write Files from Disk1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Read/Write Files from Disk1": {
          "main": [
            [
              {
                "node": "Execute Command",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Command": {
          "main": [
            [
              {
                "node": "Read/Write Files from Disk2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Read/Write Files from Disk2": {
          "main": [
            [
              {
                "node": "Transcribe a recording",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transcribe a recording": {
          "main": [
            [
              {
                "node": "Basic LLM Chain3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain3": {
          "main": [
            [
              {
                "node": "Create a record3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser3": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain3",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Create a record3": {
          "main": [
            [
              {
                "node": "Execute Command1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Command1": {
          "main": [
            [
              {
                "node": "Loop Over Items3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Gmail Trigger": {
          "main": [
            [
              {
                "node": "Switch1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Switch1": {
          "main": [
            [
              {
                "node": "Edit Fields6",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Edit Fields9",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Edit Fields",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Edit Fields3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain4": {
          "main": [
            [
              {
                "node": "Edit Fields2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "Basic LLM Chain4",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain5",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain6",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser4": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain4",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Send a message": {
          "main": [
            [
              {
                "node": "Basic LLM Chain6",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields": {
          "main": [
            [
              {
                "node": "Basic LLM Chain4",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If": {
          "main": [
            [
              {
                "node": "Create a record4",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Edit Fields1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields1": {
          "main": [
            [
              {
                "node": "Basic LLM Chain5",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain5": {
          "main": [
            [
              {
                "node": "Edit Fields2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser5": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain5",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields2": {
          "main": [
            [
              {
                "node": "Send a message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain6": {
          "main": [
            [
              {
                "node": "If",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser6": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain6",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Create a record4": {
          "main": [
            [
              {
                "node": "Delete a message1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain7": {
          "main": [
            [
              {
                "node": "Edit Fields5",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model2": {
          "ai_languageModel": [
            [
              {
                "node": "Basic LLM Chain7",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain8",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain9",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser7": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain7",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Send a message1": {
          "main": [
            [
              {
                "node": "Basic LLM Chain9",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields3": {
          "main": [
            [
              {
                "node": "Basic LLM Chain7",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If1": {
          "main": [
            [
              {
                "node": "Create a record5",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Edit Fields4",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields4": {
          "main": [
            [
              {
                "node": "Basic LLM Chain8",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain8": {
          "main": [
            [
              {
                "node": "Edit Fields5",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser8": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain8",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields5": {
          "main": [
            [
              {
                "node": "Send a message1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain9": {
          "main": [
            [
              {
                "node": "If1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser9": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain9",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Create a record5": {
          "main": [
            [
              {
                "node": "Delete a message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain10": {
          "main": [
            [
              {
                "node": "Edit Fields8",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model3": {
          "ai_languageModel": [
            [
              {
                "node": "Basic LLM Chain10",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain11",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain12",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser10": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain10",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Send a message2": {
          "main": [
            [
              {
                "node": "Basic LLM Chain12",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields6": {
          "main": [
            [
              {
                "node": "Basic LLM Chain10",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If2": {
          "main": [
            [
              {
                "node": "Create a record6",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Edit Fields7",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields7": {
          "main": [
            [
              {
                "node": "Basic LLM Chain11",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain11": {
          "main": [
            [
              {
                "node": "Edit Fields8",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser11": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain11",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields8": {
          "main": [
            [
              {
                "node": "Send a message2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain12": {
          "main": [
            [
              {
                "node": "If2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser12": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain12",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Create a record6": {
          "main": [
            [
              {
                "node": "Delete a message3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain13": {
          "main": [
            [
              {
                "node": "Edit Fields11",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model4": {
          "ai_languageModel": [
            [
              {
                "node": "Basic LLM Chain13",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain14",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "Basic LLM Chain15",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser13": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain13",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Send a message3": {
          "main": [
            [
              {
                "node": "Basic LLM Chain15",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields9": {
          "main": [
            [
              {
                "node": "Basic LLM Chain13",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If3": {
          "main": [
            [
              {
                "node": "Create a record7",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Edit Fields10",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields10": {
          "main": [
            [
              {
                "node": "Basic LLM Chain14",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain14": {
          "main": [
            [
              {
                "node": "Edit Fields11",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser14": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain14",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields11": {
          "main": [
            [
              {
                "node": "Send a message3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Basic LLM Chain15": {
          "main": [
            [
              {
                "node": "If3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser15": {
          "ai_outputParser": [
            [
              {
                "node": "Basic LLM Chain15",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Create a record7": {
          "main": [
            [
              {
                "node": "Delete a message2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Search records",
                "type": "main",
                "index": 0
              },
              {
                "node": "Search records3",
                "type": "main",
                "index": 0
              },
              {
                "node": "Search records2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If4": {
          "main": [
            [],
            [
              {
                "node": "Wait",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If5": {
          "main": [
            [],
            [
              {
                "node": "Wait1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "2a85d893-fb9d-4d65-9c48-aaefd135be02",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:36:16.207Z",
          "updatedAt": "2025-09-09T19:36:16.207Z",
          "role": "workflow:owner",
          "workflowId": "VBtevCgc721HPgYX",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-10-02T13:55:49.195Z",
      "updatedAt": "2025-10-02T18:38:28.000Z",
      "id": "WLPZZCCZ9wkRoyzD",
      "name": "Linkedin Instantly Scraper",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "content": "## ❄️ Cold Outreach Machine 4.0\n## | [Created by Chase AI](https://www.skool.com/chase-ai)\n\n## How it Works\n### - Define your search parameters\n### - Generate Apollo URL for scraping\n### - Apollo data scraped via AmpleLeads\n### - CSV data extracted + uploaded to Sheets\n### - Custom messaging generated via OpenAI\n### - Leads + messaging uploaded to Instantly\n\n## APIs Needed\n### - [AmpleLeads](https://app.ampleleads.io/apollo-scraper)\n### - [Instantly](https://app.instantly.ai/app/settings/integrations)\n\n## Google Sheets Template\n### - [Sheets](https://docs.google.com/spreadsheets/d/1j46TWB12zm-jD3T14giZZjHGx-EzK2tZh4-ss_FHQC8/edit?usp=sharing) (Make your own copy)",
            "height": 640,
            "width": 512,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -544,
            64
          ],
          "id": "63619312-c369-4e1e-a8a5-76664932f58a",
          "name": "Sticky Note5"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Job Title: {{ $json['Job Title'] }}\n\nCompany Size: {{ $json['Company Size'] }}\n\nKeywords: {{ $json.Keywords }}\n\nLocation: {{ $json.Location }}\n\n\n",
            "messages": {
              "messageValues": [
                {
                  "message": "=You are an expert Apollo.io search URL generator. Your task is to convert form data into a precise Apollo search URL.\n\n**CRITICAL INSTRUCTIONS:**\n\n1.  **Handle Multiple Values**: Fields like 'Job Title', 'Keywords', and 'Location' can contain multiple items separated by a comma. When you see a comma-separated list, you **MUST** create a separate URL parameter for **EACH** item in the list.\n    * _Example for Titles:_ `personTitles[]=Founder&personTitles[]=CEO`\n    * _Example for Locations:_ `personLocations[]=United%20States&personLocations[]=Austin`\n\n2.  **Supported Fields & URL Parameters**:\n    * **Location**: Maps to `personLocations[]`. Create one for each location in the list.\n    * **Job Title**: Maps to `personTitles[]`. Create one for each title in the list.\n    * **Company Size**: Maps to `organizationNumEmployeesRanges[]`. This is a single value and should use a hyphen (e.g., `1-10`).\n    * **Keywords**: Maps to `qOrganizationKeywordTags[]`. Create one for each keyword in the list.\n\n3.  **URL Encoding**: Ensure all values are properly URL-encoded (e.g., spaces become `%20`, and commas within a single location value like \"Austin, Texas\" become `%2C`).\n\n---\n\n**EXAMPLE:**\n\n**Input Data:**\nJob Title: Founder, CEO, President\nCompany Size: 1-10\nKeywords: Fintech, SaaS\nLocation: United States, Austin, Texas, Boston\n\n**Your Output (must be this exact format):**\nhttps://app.apollo.io/#/people?personTitles[]=Founder&personTitles[]=CEO&personTitles[]=President&organizationNumEmployeesRanges[]=1-10&qOrganizationKeywordTags[]=Fintech&qOrganizationKeywordTags[]=SaaS&personLocations[]=United%20States&personLocations[]=Austin%2C%20Texas&personLocations[]=Boston"
                }
              ]
            },
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            16,
            -272
          ],
          "id": "bfac52e3-edc2-45d1-9310-2a394e91bb6a",
          "name": "Apollo URL Generator",
          "disabled": true
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.ampleleads.io/v1/apollo/scrape",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "api_key",
                  "value": "FRAnPzmXZ5JNCiHTngcZ1Q92Ofapn4ah"
                }
              ]
            },
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "accept",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"apollo_url\": \"https://app.apollo.io/#/people?page=1&personTitles[]=foster&sortAscending=false&sortByField=%5Bnone%5D&personLocations[]=Greater%20Houston%20Area\",\n  \"fetch_count\": 100\n}",
            "options": {}
          },
          "id": "6e45f511-0883-46c5-8ea3-b9234ad67b66",
          "name": "Scrape Leads",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            560,
            128
          ],
          "typeVersion": 4.2
        },
        {
          "parameters": {
            "url": "=https://api.ampleleads.io/v1/apollo/status/{{ $json.data.run_id }}",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "api_key",
                  "value": "FRAnPzmXZ5JNCiHTngcZ1Q92Ofapn4ah"
                }
              ]
            },
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "accept",
                  "value": "application/json"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            768,
            128
          ],
          "id": "ad1675ad-5592-4f60-9783-e0754f3307ce",
          "name": "Get Run Status"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "9c4063c3-48aa-45f4-89c3-57e2f4d1eb28",
                  "leftValue": "={{ $json.data.status }}",
                  "rightValue": "completed",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            944,
            128
          ],
          "id": "4a501313-c0ee-4512-afe0-fcb0375ef574",
          "name": "If"
        },
        {
          "parameters": {
            "amount": 30
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            1152,
            144
          ],
          "id": "e7eccc7e-ce29-4b83-aaac-55e241498210",
          "name": "Wait",
          "webhookId": "a7e5f913-f4fb-4e2e-9cbd-3dad6c177b14",
          "executeOnce": false,
          "retryOnFail": false
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            256,
            416
          ],
          "id": "e45c3402-3f2a-4340-8606-19293de1207d",
          "name": "Extract from File"
        },
        {
          "parameters": {
            "url": "={{ $json.data.output_csv_url }}",
            "options": {
              "response": {
                "response": {
                  "responseFormat": "file"
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            96,
            416
          ],
          "id": "eec36165-81cf-4797-a7ea-1b989f66fa84",
          "name": "Get CSV"
        },
        {
          "parameters": {
            "operation": "append",
            "documentId": {
              "__rl": true,
              "value": "1NcKSXmtZZbrvEj1ys7kHR1fF-WFxjLWRAhsybViHUY4",
              "mode": "list",
              "cachedResultName": "Copy of SCRAPER TEMPLATE 4.0",
              "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1NcKSXmtZZbrvEj1ys7kHR1fF-WFxjLWRAhsybViHUY4/edit?usp=drivesdk"
            },
            "sheetName": {
              "__rl": true,
              "value": "gid=0",
              "mode": "list",
              "cachedResultName": "Sheet1",
              "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XhDslx1PaQYMDhqK9WJKNAUbj7WdBHy-dG5EqQppYJc/edit#gid=0"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "First Name": "={{ $json.first_name }}",
                "Last Name": "={{ $json.last_name }}",
                "Company Name": "={{ $json.company_name }}",
                "Company Website": "={{ $json.company_website }}",
                "Email": "={{ $json.email }}",
                "Full Name": "={{ $json.full_name }}",
                "LinkedIn": "={{ $json.linkedin }}",
                "Title": "={{ $json.title }}",
                "Industry": "={{ $json.industry }}",
                "Headline": "={{ $json.headline }}",
                "City": "={{ $json.city }}",
                "State": "={{ $json.state }}",
                "Country": "={{ $json.country }}",
                "Employees Count": "={{ $json.employees_count }}",
                "Keywords": "={{ $json.keywords }}",
                "Company SEO Description": "={{ $json.company_seo_description }}",
                "Company Short Description": "={{ $json.company_short_description }}",
                "Company Linkedin": "={{ $json.company_linkedin }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "First Name",
                  "displayName": "First Name",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Last Name",
                  "displayName": "Last Name",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Company Name",
                  "displayName": "Company Name",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Company Website",
                  "displayName": "Company Website",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Email",
                  "displayName": "Email",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Full Name",
                  "displayName": "Full Name",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "LinkedIn",
                  "displayName": "LinkedIn",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Title",
                  "displayName": "Title",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Industry",
                  "displayName": "Industry",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Headline",
                  "displayName": "Headline",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "City",
                  "displayName": "City",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "State",
                  "displayName": "State",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Country",
                  "displayName": "Country",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Employees Count",
                  "displayName": "Employees Count",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Keywords",
                  "displayName": "Keywords",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Company SEO Description",
                  "displayName": "Company SEO Description",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Company Short Description",
                  "displayName": "Company Short Description",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                },
                {
                  "id": "Company Linkedin",
                  "displayName": "Company Linkedin",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "type": "string",
                  "canBeUsedToMatch": true
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {
              "useAppend": true
            }
          },
          "type": "n8n-nodes-base.googleSheets",
          "typeVersion": 4.7,
          "position": [
            496,
            416
          ],
          "id": "1eee4cbd-d58c-495a-a7de-9fc26262b9be",
          "name": "Upload to Sheets",
          "credentials": {
            "googleSheetsOAuth2Api": {
              "id": "CwsJkZFBGr2wTDhZ",
              "name": "Google Sheets account"
            }
          }
        },
        {
          "parameters": {
            "jsonSchemaExample": "{\n\t\"normalName\": \"Engler Distributing\",\n\t\"icebreaker\": \"Love what you're doing with Effective Sign Works. Bob's philosophy of 'only as good as your last job' really resonates. Wanted to reach out.\"\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.3,
          "position": [
            1024,
            560
          ],
          "id": "b2ee25f8-e7ed-47c6-96bf-0ab120df5e7f",
          "name": "Structured Output Parser2"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Company name: {{ $json['Company Name'] }}\n\nCompany background: {{ $json['Company Short Description'] }}",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "=You are a company name normalizer and icebreaker generator for cold outreach emails.\n\nTASK 1: NORMALIZE COMPANY NAME\nTake the official company name and output the casual conversational version:\n- Remove LLC, Inc., Corp., Ltd., etc.\n- Remove colons, slashes, taglines, and descriptive phrases\n- Fix ALL CAPS to proper case\n- Keep ampersands (&) and \"Co.\" when they're part of the core name\n- Output how the company name would be spoken in conversation\n\nTASK 2: CREATE ICEBREAKER\nCreate one natural sentence: \"Love what you're doing with [company], especially [unique thing we noticed]. Wanted to reach out.\"\n\nREQUIREMENTS:\n- Pick the most SURPRISING/INTERESTING detail that makes them unique\n- Keep the \"especially\" part to MAXIMUM 10 words\n- PARAPHRASE in simple, natural language\n- USE VARIED SENTENCE STRUCTURES - mix up your phrasing naturally\n- Focus on what made you think \"oh, that's clever/different\"\n- Write like you're genuinely commenting on something that caught your eye\n- ALWAYS end with \"Wanted to reach out.\"\n- Avoid overused words like \"seamless,\" \"truly,\" \"smart,\" \"really,\" \"the way you\"\n- Avoid generic observations that could apply to any company\n\nSTRUCTURE VARIETY EXAMPLES:\n- \"especially [person's] [quote/philosophy]\"\n- \"especially the [specific approach/strategy]\"  \n- \"especially [unique positioning/focus]\"\n- \"especially being [achievement/status]\"\n- \"especially that [surprising detail]\"\n- \"especially [interesting partnership/method]\"\n\nGOOD EXAMPLES (short and specific):\n- \"Love what you're doing with TAG Digital Marketing, especially being one of Google's first platinum agencies. Wanted to reach out.\"\n- \"Love what you're doing with Backroom, especially burning down the old agency model. Wanted to reach out.\"\n- \"Love what you're doing with Glass, especially using blockchain to navigate complex alcohol rules. Wanted to reach out.\"\n- \"Love what you're doing with Cowsultants, especially the Everything for the Cow approach. Wanted to reach out.\"\n\nBAD EXAMPLES:\n- \"especially the way you combine precise craftsmanship with total project management to make signs that actually drive business\" (TOO LONG - 18 words)\n- \"especially the way you focus on building lasting client relationships\" (GENERIC)\n- \"especially creators who truly fit their vibe\" (USES BANNED WORD \"truly\")\n\nTONE: Short, punchy, naturally varied - like you noticed one specific thing that stood out.\n\nGenerate the complete icebreaker sentence."
                }
              ]
            },
            "batching": {}
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.7,
          "position": [
            768,
            416
          ],
          "id": "6eb4e22f-82b5-42ae-ab93-805039b101ad",
          "name": "Custom Messaging"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "gpt-5-mini",
              "mode": "list",
              "cachedResultName": "gpt-5-mini"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            656,
            592
          ],
          "id": "f8d31187-4c7b-4341-b9e3-055b5bbb3c4a",
          "name": "OpenAI",
          "credentials": {
            "openAiApi": {
              "id": "tbB1mbVAaNt3kwZV",
              "name": "OpenAi account"
            }
          }
        },
        {
          "parameters": {
            "content": "",
            "height": 768,
            "width": 1392,
            "color": 7
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            0,
            0
          ],
          "id": "a5e6cc86-c316-42b8-b69b-0d1578cedbef",
          "name": "Sticky Note"
        },
        {
          "parameters": {
            "content": "## Scrape",
            "height": 288,
            "width": 672,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            48,
            48
          ],
          "id": "6d46a171-8385-4abb-9aab-407b99f4030f",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "content": "## Get Results",
            "height": 288,
            "width": 608,
            "color": 4
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            768,
            32
          ],
          "id": "5f2aeb65-55a4-4dd8-b63c-34e3d8d3ffb2",
          "name": "Sticky Note2"
        },
        {
          "parameters": {
            "content": "## Extract to Sheets",
            "height": 368,
            "width": 672,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            48,
            336
          ],
          "id": "a012cfc9-9557-45ce-b2ac-03fdbbb41b30",
          "name": "Sticky Note3"
        },
        {
          "parameters": {
            "content": "## Custom Messaging + Instantly Upload",
            "height": 368,
            "width": 608,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            720,
            336
          ],
          "id": "c8e9f009-7eb2-4a71-9639-e8fa637e79af",
          "name": "Sticky Note6"
        },
        {
          "parameters": {
            "formTitle": "Apollo + Apify Lead Generation",
            "formDescription": "Describe the types of leads you are trying to find.",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "Job Title",
                  "placeholder": "Founder, Engineer, Owner"
                },
                {
                  "fieldLabel": "Company Size",
                  "fieldType": "dropdown",
                  "fieldOptions": {
                    "values": [
                      {
                        "option": "1-10"
                      },
                      {
                        "option": "11-50"
                      },
                      {
                        "option": "51-200"
                      },
                      {
                        "option": "201-1000"
                      },
                      {
                        "option": "10001-5000"
                      },
                      {
                        "option": "5001-10000"
                      },
                      {
                        "option": "10001-100000"
                      }
                    ]
                  }
                },
                {
                  "fieldLabel": "Keywords",
                  "placeholder": "Keywords relevant to the contact or company"
                },
                {
                  "fieldLabel": "Location",
                  "placeholder": "United States, California, London"
                },
                {
                  "fieldLabel": "Instantly Campaign ID",
                  "placeholder": "12345"
                },
                {
                  "fieldLabel": "Amount of Leads to Generate",
                  "placeholder": "Must be between 100 and 50000",
                  "requiredField": true
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -176,
            -256
          ],
          "id": "42a3def0-5e27-4666-9e90-7f632971f40b",
          "name": "On form submission",
          "webhookId": "ca164d2c-6b5b-4b05-bd68-f74158c4e405",
          "disabled": true
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.instantly.ai/api/v2/leads",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "Bearer Y2UyZDFkYTctMTZhNi00NWI0LTgyYTQtMDQ2MWFhMDc5NzBjOmVGTEJaakxFUG5reQ=="
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"campaign\": \"691bdfd6-4532-4a9d-8c76-3534334f88ea\",\n  \"email\": \"{{ $('Extract from File').item.json.email ? $('Extract from File').item.json.email : 'test@example.com' }}\",\n  \"last_name\": \"{{ $('Extract from File').item.json.last_name }}\",\n  \"first_name\": \"{{ $('Extract from File').item.json.first_name }}\",\n  \"company_name\": \"{{ $('Extract from File').item.json.company_name }}\",\n  \"custom_variables\": {\n    \"icebreaker\": \"{{ $json.output.icebreaker }}\",\n    \"customCompanyName\": \"{{ $json.output.normalName }}\"\n  }\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            1104,
            416
          ],
          "id": "e6e4b21a-16a5-4949-b7d8-6d4369821c1f",
          "name": "Add Lead to Instantly"
        },
        {
          "parameters": {
            "content": "@[youtube](A84Jb-qf5AY)",
            "height": 560,
            "width": 976
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            1504,
            128
          ],
          "id": "964e7429-9ffe-4fb3-990c-6fbe4e15ec47",
          "name": "Sticky Note4"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.ampleleads.io/v1/apollo/scrape",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "api_key",
                  "value": "FRAnPzmXZ5JNCiHTngcZ1Q92Ofapn4ah"
                }
              ]
            },
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "accept",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"apollo_url\": \"{{ $json.text }}\",\n  \"fetch_count\": {{ $('On form submission').item.json['Amount of Leads to Generate'] }}\n}",
            "options": {}
          },
          "id": "63743ffb-68be-426b-b2ff-1b99301a6e2b",
          "name": "Scrape Leads1",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            336,
            -272
          ],
          "typeVersion": 4.2,
          "disabled": true
        },
        {
          "parameters": {
            "content": "trying to scrape leads manually.. took out first three steps.. copied third scrape leads, going to try to do manaully with apollo URL"
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            832,
            -288
          ],
          "typeVersion": 1,
          "id": "4a95ea1f-04d5-4378-94ad-9154fc2ab9cc",
          "name": "Sticky Note7"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.manualTrigger",
          "typeVersion": 1,
          "position": [
            368,
            128
          ],
          "id": "b667ecba-828f-4278-bd93-467a5cb1af81",
          "name": "When clicking ‘Execute workflow’"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.instantly.ai/api/v2/leads",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "Bearer Y2UyZDFkYTctMTZhNi00NWI0LTgyYTQtMDQ2MWFhMDc5NzBjOmVGTEJaakxFUG5reQ=="
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"campaign\": \"{{ $('On form submission').item.json['Instantly Campaign ID'] }}\",\n  \"email\": \"{{ $('Extract from File').item.json.email ? $('Extract from File').item.json.email : 'test@example.com' }}\",\n  \"last_name\": \"{{ $('Extract from File').item.json.last_name }}\",\n  \"first_name\": \"{{ $('Extract from File').item.json.first_name }}\",\n  \"company_name\": \"{{ $('Extract from File').item.json.company_name }}\",\n  \"custom_variables\": {\n    \"icebreaker\": \"{{ $json.output.icebreaker }}\",\n    \"customCompanyName\": \"{{ $json.output.normalName }}\"\n  }\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            1280,
            -224
          ],
          "id": "edd2872b-9f0a-437d-8021-bc9094d010cb",
          "name": "Add Lead to Instantly1"
        },
        {
          "parameters": {
            "content": "replaced campaign id in the flow below"
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            1472,
            -256
          ],
          "typeVersion": 1,
          "id": "d1e81a3a-c2f5-4854-a8d3-1bc33df3deb1",
          "name": "Sticky Note8"
        }
      ],
      "connections": {
        "Apollo URL Generator": {
          "main": [
            []
          ]
        },
        "Scrape Leads": {
          "main": [
            [
              {
                "node": "Get Run Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Run Status": {
          "main": [
            [
              {
                "node": "If",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If": {
          "main": [
            [
              {
                "node": "Get CSV",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Wait",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait": {
          "main": [
            [
              {
                "node": "Get Run Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get CSV": {
          "main": [
            [
              {
                "node": "Extract from File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File": {
          "main": [
            [
              {
                "node": "Upload to Sheets",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload to Sheets": {
          "main": [
            [
              {
                "node": "Custom Messaging",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser2": {
          "ai_outputParser": [
            [
              {
                "node": "Custom Messaging",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Custom Messaging": {
          "main": [
            [
              {
                "node": "Add Lead to Instantly",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI": {
          "ai_languageModel": [
            [
              {
                "node": "Custom Messaging",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "On form submission": {
          "main": [
            []
          ]
        },
        "When clicking ‘Execute workflow’": {
          "main": [
            [
              {
                "node": "Scrape Leads",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "f8132d60-981d-4197-9ecd-cd327c9a6e71",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-10-02T13:55:49.198Z",
          "updatedAt": "2025-10-02T13:55:49.198Z",
          "role": "workflow:owner",
          "workflowId": "WLPZZCCZ9wkRoyzD",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T17:37:04.861Z",
      "updatedAt": "2025-09-09T17:37:04.861Z",
      "id": "YKIWovHuRnxtuddS",
      "name": "social poster postgres (maybe hard set up)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {},
          "name": "Daily Schedule Check",
          "type": "n8n-nodes-base.cron",
          "position": [
            -1344,
            -48
          ],
          "id": "380206e2-ddf0-4cbd-9024-6ab989dc6833",
          "typeVersion": 1
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT calendar_id, platform, post_content, hashtags, post_time, content_type, product_id, image_url, link FROM campaign_calendar WHERE post_date = CURRENT_DATE AND post_status = 'scheduled' ORDER BY post_time ASC",
            "options": {
              "queryReplacement": "=$json.query || 'SELECT calendar_id, platform, post_content, hashtags, post_time, content_type, product_id, image_url, link FROM campaign_calendar WHERE post_date = CURRENT_DATE AND post_status = \\'scheduled\\' ORDER BY post_time ASC'"
            }
          },
          "name": "Fetch Today's Posts",
          "type": "n8n-nodes-base.postgres",
          "position": [
            -1120,
            -48
          ],
          "id": "3daf063e-45e3-4530-a8e7-64b5ef34ba95",
          "typeVersion": 2,
          "credentials": {
            "postgres": {
              "id": null,
              "name": "supabase-credentials"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{ $input.all().length }}",
                  "operation": "larger"
                }
              ]
            }
          },
          "name": "Check Posts Exist",
          "type": "n8n-nodes-base.if",
          "position": [
            -896,
            -48
          ],
          "id": "c400a511-c9b8-42af-8725-bb11ebbe9431",
          "typeVersion": 1
        },
        {
          "parameters": {
            "batchSize": 5,
            "options": {}
          },
          "name": "Process in Batches",
          "type": "n8n-nodes-base.splitInBatches",
          "position": [
            -672,
            -48
          ],
          "id": "a2cf98d2-0b42-4457-9852-cfaa3c8ee527",
          "typeVersion": 1
        },
        {
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "calendar_id",
                  "value": "={{ $json.calendar_id }}"
                },
                {
                  "name": "platform",
                  "value": "={{ $json.platform }}"
                },
                {
                  "name": "content",
                  "value": "={{ $json.post_content }}"
                },
                {
                  "name": "hashtags",
                  "value": "={{ $json.hashtags }}"
                },
                {
                  "name": "content_type",
                  "value": "={{ $json.content_type }}"
                },
                {
                  "name": "product_id",
                  "value": "={{ $json.product_id }}"
                }
              ]
            },
            "options": {}
          },
          "name": "Format Post Data",
          "type": "n8n-nodes-base.set",
          "position": [
            -464,
            -48
          ],
          "id": "3b99c054-1c42-4afc-a903-f4bdd75a0179",
          "typeVersion": 1
        },
        {
          "parameters": {
            "model": "gpt-4",
            "options": {
              "maxTokens": 300,
              "temperature": 0.7
            },
            "requestOptions": {}
          },
          "name": "AI Content Optimizer",
          "type": "n8n-nodes-base.openAi",
          "position": [
            -240,
            -240
          ],
          "id": "39ad4265-b46f-4a27-827b-0419f64805d5",
          "typeVersion": 1,
          "credentials": {
            "openAiApi": {
              "id": null,
              "name": "openai-credentials"
            }
          }
        },
        {
          "parameters": {
            "model": "gpt-3.5-turbo",
            "options": {
              "maxTokens": 200,
              "temperature": 0.6
            },
            "requestOptions": {}
          },
          "name": "AI Hashtag Generator",
          "type": "n8n-nodes-base.openAi",
          "position": [
            -240,
            -48
          ],
          "id": "9c9bddc8-d27d-41af-b275-cf3339634c91",
          "typeVersion": 1,
          "credentials": {
            "openAiApi": {
              "id": null,
              "name": "openai-credentials"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// Combine AI-enhanced content with optimized hashtags\nconst originalData = $('Format Post Data').item.json;\nconst enhancedContent = $('AI Content Optimizer').item.json.message.content;\nconst aiHashtags = $('AI Hashtag Generator').item.json.message.content;\n\n// Parse AI hashtags (should be JSON array)\nlet optimizedHashtags = [];\ntry {\n  optimizedHashtags = JSON.parse(aiHashtags);\n} catch (e) {\n  // Fallback: extract hashtags from text\n  optimizedHashtags = aiHashtags.match(/#\\w+/g) || [];\n}\n\n// Combine with existing hashtags if any\nconst existingHashtags = originalData.hashtags ? JSON.parse(originalData.hashtags) : [];\nconst finalHashtags = [...new Set([...existingHashtags, ...optimizedHashtags])];\n\n// Platform-specific hashtag limits\nlet hashtagLimit = 30; // Default\nswitch (originalData.platform.toLowerCase()) {\n  case 'instagram':\n    hashtagLimit = 30;\n    break;\n  case 'tiktok':\n    hashtagLimit = 100; // TikTok allows more\n    break;\n  case 'facebook':\n    hashtagLimit = 5; // Facebook prefers fewer\n    break;\n  case 'pinterest':\n    hashtagLimit = 20;\n    break;\n}\n\nconst limitedHashtags = finalHashtags.slice(0, hashtagLimit);\n\nreturn {\n  json: {\n    ...originalData,\n    content: enhancedContent,\n    hashtags: JSON.stringify(limitedHashtags),\n    ai_enhanced: true,\n    original_content: originalData.content,\n    ai_hashtag_count: optimizedHashtags.length\n  }\n};"
          },
          "name": "Merge AI Enhancements",
          "type": "n8n-nodes-base.function",
          "position": [
            -16,
            -64
          ],
          "id": "b7cf32ea-0a74-40fc-a288-e0569bf3a59b",
          "typeVersion": 1
        },
        {
          "parameters": {
            "dataType": "string",
            "value1": "={{ $json.platform }}",
            "rules": {
              "rules": [
                {
                  "value2": "instagram"
                },
                {
                  "value2": "facebook",
                  "output": 1
                },
                {
                  "value2": "tiktok",
                  "output": 2
                },
                {
                  "value2": "pinterest",
                  "output": 3
                }
              ]
            }
          },
          "name": "Route by Platform",
          "type": "n8n-nodes-base.switch",
          "position": [
            -240,
            256
          ],
          "id": "1a50cc73-71ea-4244-9977-70a23e3cb173",
          "typeVersion": 1
        },
        {
          "parameters": {
            "url": "https://graph.facebook.com/v18.0/{{ $env.IG_USER_ID }}/media",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "Bearer {{ $env.META_ACCESS_TOKEN }}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "caption",
                  "value": "={{ $json.content }} {{ $json.hashtags ? JSON.parse($json.hashtags).join(' ') : '' }}"
                },
                {
                  "name": "image_url",
                  "value": "={{ $json.image_url || $env.DEFAULT_IMAGE_URL || '' }}"
                }
              ]
            },
            "options": {
              "timeout": 30000
            }
          },
          "name": "Instagram Post",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            -16,
            -368
          ],
          "id": "d9f2aa57-36d3-4499-bd82-b99918952268",
          "typeVersion": 4.1
        },
        {
          "parameters": {
            "url": "https://graph.facebook.com/v18.0/{{ $env.FB_PAGE_ID }}/feed",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "Bearer {{ $env.META_ACCESS_TOKEN }}"
                },
                {
                  "name": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "message",
                  "value": "={{ $json.content }} {{ $json.hashtags ? JSON.parse($json.hashtags).join(' ') : '' }}"
                },
                {
                  "name": "link",
                  "value": "={{ $json.link || '' }}"
                }
              ]
            },
            "options": {
              "timeout": 30000
            }
          },
          "name": "Facebook Post",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            -16,
            -208
          ],
          "id": "af7a112b-b7f1-4a39-8491-123f5d0cef68",
          "typeVersion": 4.1
        },
        {
          "parameters": {
            "url": "https://open-api.tiktok.com/share/video/upload/",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "Bearer {{ $env.TIKTOK_ACCESS_TOKEN }}"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "caption",
                  "value": "={{ $json.content }} {{ $json.hashtags ? JSON.parse($json.hashtags).join(' ') : '' }}"
                }
              ]
            },
            "options": {
              "timeout": 30000
            }
          },
          "name": "TikTok API Post",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            -16,
            240
          ],
          "id": "c2a763dd-8604-4b71-8a2a-b95ba7e8723e",
          "typeVersion": 4.1
        },
        {
          "parameters": {
            "url": "https://api.pinterest.com/v5/pins",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Authorization",
                  "value": "Bearer {{ $env.PINTEREST_ACCESS_TOKEN }}"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "note",
                  "value": "={{ $json.content }} {{ $json.hashtags ? JSON.parse($json.hashtags).join(' ') : '' }}"
                },
                {
                  "name": "board_id",
                  "value": "{{ $env.PINTEREST_BOARD_ID }}"
                }
              ]
            },
            "options": {
              "timeout": 30000
            }
          },
          "name": "Pinterest API Post",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            -16,
            416
          ],
          "id": "22170e3b-93cd-4be1-9ece-61d0feba2dc3",
          "typeVersion": 4.1
        },
        {
          "parameters": {
            "keepOnlySet": true,
            "values": {
              "string": [
                {
                  "name": "calendar_id",
                  "value": "={{ $json.calendar_id }}"
                },
                {
                  "name": "platform",
                  "value": "={{ $json.platform }}"
                },
                {
                  "name": "post_id",
                  "value": "={{ $json.id || $json.post_id }}"
                },
                {
                  "name": "timestamp",
                  "value": "={{ new Date().toISOString() }}"
                },
                {
                  "name": "status",
                  "value": "published"
                }
              ]
            },
            "options": {}
          },
          "name": "Log Success",
          "type": "n8n-nodes-base.set",
          "position": [
            208,
            16
          ],
          "id": "e336443f-f92e-4f0d-bb7c-9c9d469ca67f",
          "typeVersion": 1
        },
        {
          "parameters": {
            "mode": "combine",
            "mergeByFields": {
              "values": [
                {}
              ]
            },
            "options": {}
          },
          "name": "Merge Platform Results",
          "type": "n8n-nodes-base.merge",
          "position": [
            432,
            16
          ],
          "id": "95682db3-f9ca-4857-a51b-7151802a24af",
          "typeVersion": 2.1
        },
        {
          "parameters": {
            "operation": "update",
            "schema": {
              "__rl": true,
              "mode": "list",
              "value": "public"
            },
            "table": "campaign_calendar",
            "columnToMatchOn": "calendar_id",
            "options": {}
          },
          "name": "Update Database",
          "type": "n8n-nodes-base.postgres",
          "position": [
            656,
            16
          ],
          "id": "b45f91b0-197b-455a-ab14-6e758b157fe7",
          "typeVersion": 2,
          "credentials": {
            "postgres": {
              "id": null,
              "name": "supabase-credentials"
            }
          }
        },
        {
          "parameters": {
            "channel": "#marketing",
            "text": "🎉 All scheduled social media posts for today have been processed.",
            "otherOptions": {},
            "attachments": []
          },
          "name": "All Posts Complete",
          "type": "n8n-nodes-base.slack",
          "position": [
            -464,
            176
          ],
          "id": "d599136e-309d-49aa-9930-dfa590d53a78",
          "typeVersion": 1,
          "credentials": {
            "slackApi": {
              "id": null,
              "name": "slack-credentials"
            }
          }
        },
        {
          "parameters": {
            "channel": "#marketing",
            "text": "✅ Social Media Post Published Successfully!\n\n📅 Date: {{ new Date().toLocaleDateString() }}\n🔗 Platform: {{ $json.platform }}\n📝 Content: {{ $json.content ? $json.content.substring(0, 100) + '...' : 'N/A' }}\n🆔 Post ID: {{ $json.post_id }}\n\n📊 Track performance in your analytics dashboard.",
            "otherOptions": {},
            "attachments": []
          },
          "name": "Notify Marketing Team",
          "type": "n8n-nodes-base.slack",
          "position": [
            864,
            16
          ],
          "id": "8ff38076-f5e5-4cdd-b5dc-7434a4a0a872",
          "typeVersion": 1,
          "credentials": {
            "slackApi": {
              "id": null,
              "name": "slack-credentials"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// Generate tracking URLs for performance monitoring\nconst items = $input.all();\nconst trackingUrls = [];\n\nfor (const item of items) {\n  const trackingData = {\n    calendar_id: item.json.calendar_id,\n    platform: item.json.platform,\n    post_id: item.json.post_id,\n    utm_source: item.json.platform,\n    utm_medium: 'social',\n    utm_campaign: 'automated_post',\n    tracking_url: `https://analytics.example.com/track?platform=${item.json.platform}&post=${item.json.post_id}&campaign=automated`\n  };\n  \n  trackingUrls.push({ json: trackingData });\n}\n\nreturn trackingUrls;"
          },
          "name": "Generate Tracking URLs",
          "type": "n8n-nodes-base.function",
          "position": [
            1088,
            16
          ],
          "id": "bff50283-bceb-4c78-be41-43a416d124a2",
          "typeVersion": 1
        },
        {
          "parameters": {
            "channel": "#marketing",
            "text": "ℹ️ No social media posts scheduled for today.\n\n📅 Date: {{ new Date().toLocaleDateString() }}\n📋 Check your campaign calendar to add new posts.\n\n💡 Tip: Use the content planning template to schedule engaging posts.",
            "otherOptions": {},
            "attachments": []
          },
          "name": "No Posts Alert",
          "type": "n8n-nodes-base.slack",
          "position": [
            -896,
            160
          ],
          "id": "62870ccf-eb29-42e7-913a-fd202e63ffb1",
          "typeVersion": 1,
          "credentials": {
            "slackApi": {
              "id": null,
              "name": "slack-credentials"
            }
          }
        },
        {
          "parameters": {
            "functionCode": "// Enhanced error handling and retry logic\nconst items = $input.all();\nconst errorLogs = [];\n\nfor (const item of items) {\n  const error = item.json.error || $error || {};\n  const calendar_id = item.json.calendar_id || 'unknown';\n  const platform = item.json.platform || 'unknown';\n  const nodeName = $node.name || 'Unknown Node';\n  \n  // Determine error severity\n  let severity = 'medium';\n  if (error.status >= 500) severity = 'high';\n  else if (error.status >= 400 && error.status < 500) severity = 'medium';\n  else if (error.status) severity = 'low';\n  \n  const errorLog = {\n    error_id: `ERR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    workflow_name: 'Social Media Scheduler',\n    workflow_id: $workflow.id || 'unknown',\n    node_name: nodeName,\n    platform: platform,\n    calendar_id: calendar_id,\n    error_message: error.message || error.description || 'Unknown error occurred',\n    error_code: error.status || error.code || 'UNKNOWN',\n    error_details: JSON.stringify(error),\n    severity: severity,\n    timestamp: new Date().toISOString(),\n    retry_count: item.json.retry_count || 0\n  };\n  \n  errorLogs.push({ json: errorLog });\n}\n\nreturn errorLogs.length > 0 ? errorLogs : [{ json: { error_message: 'No errors to process' } }];"
          },
          "name": "Handle Errors",
          "type": "n8n-nodes-base.function",
          "position": [
            208,
            256
          ],
          "id": "80e8359c-9ed4-41fb-86d0-ccae643e92c8",
          "typeVersion": 1,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "schema": {
              "__rl": true,
              "mode": "list",
              "value": "public"
            },
            "table": "error_logs",
            "options": {}
          },
          "name": "Log Error to DB",
          "type": "n8n-nodes-base.postgres",
          "position": [
            432,
            256
          ],
          "id": "0e56a8da-2e9d-40b3-950f-19d40c58f7e9",
          "typeVersion": 2,
          "credentials": {
            "postgres": {
              "id": null,
              "name": "supabase-credentials"
            }
          }
        },
        {
          "parameters": {
            "channel": "#marketing-alerts",
            "text": "🚨 Social Media Posting Error!\n\n❌ Platform: {{ $json.platform }}\n📝 Post ID: {{ $json.calendar_id }}\n🔴 Error: {{ $json.error_message }}\n⏰ Time: {{ new Date().toLocaleString() }}\n\n👉 Please check the campaign calendar and retry manually if needed.",
            "otherOptions": {},
            "attachments": []
          },
          "name": "Error Alert",
          "type": "n8n-nodes-base.slack",
          "position": [
            656,
            256
          ],
          "id": "e4dbefc6-4dbd-4512-b1ee-7c883664e1a7",
          "typeVersion": 1,
          "credentials": {
            "slackApi": {
              "id": null,
              "name": "slack-credentials"
            }
          }
        }
      ],
      "connections": {
        "Daily Schedule Check": {
          "main": [
            [
              {
                "node": "Fetch Today's Posts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Fetch Today's Posts": {
          "main": [
            [
              {
                "node": "Check Posts Exist",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Posts Exist": {
          "main": [
            [
              {
                "node": "Process in Batches",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "No Posts Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process in Batches": {
          "main": [
            [
              {
                "node": "Format Post Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Post Data": {
          "main": [
            [
              {
                "node": "AI Content Optimizer",
                "type": "main",
                "index": 0
              },
              {
                "node": "AI Hashtag Generator",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Content Optimizer": {
          "main": [
            [
              {
                "node": "Merge AI Enhancements",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge AI Enhancements": {
          "main": [
            [
              {
                "node": "Route by Platform",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Route by Platform": {
          "main": [
            [
              {
                "node": "Instagram Post",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Facebook Post",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "TikTok API Post",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Pinterest API Post",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Instagram Post": {
          "main": [
            [
              {
                "node": "Log Success",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Facebook Post": {
          "main": [
            [
              {
                "node": "Log Success",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "TikTok API Post": {
          "main": [
            [
              {
                "node": "Log Success",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Pinterest API Post": {
          "main": [
            [
              {
                "node": "Log Success",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Success": {
          "main": [
            [
              {
                "node": "Merge Platform Results",
                "type": "main",
                "index": 0
              },
              {
                "node": "Process in Batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Platform Results": {
          "main": [
            [
              {
                "node": "Update Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Database": {
          "main": [
            [
              {
                "node": "Notify Marketing Team",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Notify Marketing Team": {
          "main": [
            [
              {
                "node": "Generate Tracking URLs",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Tracking URLs": {
          "main": [
            [
              {
                "node": "All Posts Complete",
                "type": "main",
                "index": 0
              },
              {
                "node": "Handle Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Handle Errors": {
          "main": [
            [
              {
                "node": "Log Error to DB",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log Error to DB": {
          "main": [
            [
              {
                "node": "Error Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "0171bef3-c992-4c3d-b735-ec143a0bb3cb",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T17:37:04.866Z",
          "updatedAt": "2025-09-09T17:37:04.866Z",
          "role": "workflow:owner",
          "workflowId": "YKIWovHuRnxtuddS",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:45:50.195Z",
      "updatedAt": "2025-09-09T19:45:50.195Z",
      "id": "j0FEZVozmJhnnZH6",
      "name": "Instagram Post Tool (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "fileID"
                },
                {
                  "name": "text"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            48,
            48
          ],
          "id": "8015d58d-eb2f-4177-96c2-a32226ccdcb4",
          "name": "When Executed by Another Workflow"
        },
        {
          "parameters": {},
          "type": "@blotato/n8n-nodes-blotato.blotato",
          "typeVersion": 2,
          "position": [
            272,
            48
          ],
          "id": "c936d64f-06c9-424f-8a93-6ac58e3634fa",
          "name": "Upload media",
          "credentials": {}
        },
        {
          "parameters": {},
          "type": "@blotato/n8n-nodes-blotato.blotato",
          "typeVersion": 2,
          "position": [
            480,
            48
          ],
          "id": "953f2aca-5bb8-4ba6-9fb5-7a625ac7d17d",
          "name": "Instagram",
          "credentials": {}
        }
      ],
      "connections": {},
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "f05c8be2-3e70-42c3-b2ba-2e0bcbd0b8c7",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:45:50.197Z",
          "updatedAt": "2025-09-09T19:45:50.197Z",
          "role": "workflow:owner",
          "workflowId": "j0FEZVozmJhnnZH6",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:43:40.394Z",
      "updatedAt": "2025-09-09T19:43:40.394Z",
      "id": "rILwOlj9jsMbOdOc",
      "name": "Create Doc Tool (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "title"
                },
                {
                  "name": "content"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            0,
            0
          ],
          "id": "c9f331c2-18d6-466c-962f-e91d9680875d",
          "name": "When Executed by Another Workflow"
        },
        {
          "parameters": {
            "folderId": "1dgxFHKKunJbtvJl7nDjqSddlG2UROu3E",
            "title": "={{ $json.title }}"
          },
          "type": "n8n-nodes-base.googleDocs",
          "typeVersion": 2,
          "position": [
            208,
            0
          ],
          "id": "83859802-2841-4fcb-9a6e-35fc617b4bb9",
          "name": "Create a document"
        },
        {
          "parameters": {
            "operation": "update",
            "documentURL": "={{ $json.id }}",
            "actionsUi": {
              "actionFields": [
                {
                  "action": "insert",
                  "text": "={{ $('When Executed by Another Workflow').item.json.content }}"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.googleDocs",
          "typeVersion": 2,
          "position": [
            416,
            0
          ],
          "id": "907ab0e7-823d-4552-aebf-6172be4db570",
          "name": "Update a document"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "5472c0d3-d715-4bab-bd49-e1b8e7b82750",
                  "name": "response",
                  "value": "=Your {{ $('When Executed by Another Workflow').item.json.title }} document has been created. \n\nHere is the link in Google drive: https://drive.google.com/file/d/{{ $json.documentId }}/view?usp=sharing",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            624,
            0
          ],
          "id": "1e743f4a-33fa-432e-bc28-de8aead1548e",
          "name": "Edit Fields"
        }
      ],
      "connections": {
        "When Executed by Another Workflow": {
          "main": [
            [
              {
                "node": "Create a document",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create a document": {
          "main": [
            [
              {
                "node": "Update a document",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update a document": {
          "main": [
            [
              {
                "node": "Edit Fields",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "61c990de-10a8-48c3-a5ed-811020215233",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:43:40.396Z",
          "updatedAt": "2025-09-09T19:43:40.396Z",
          "role": "workflow:owner",
          "workflowId": "rILwOlj9jsMbOdOc",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:46:34.227Z",
      "updatedAt": "2025-09-09T19:46:34.227Z",
      "id": "sNq0XXxi7DIfGKj0",
      "name": "X Post Tool (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "fileID"
                },
                {
                  "name": "text"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            0,
            0
          ],
          "id": "b410756e-5dc6-46c0-ae50-4338db080865",
          "name": "When Executed by Another Workflow"
        },
        {
          "parameters": {},
          "type": "@blotato/n8n-nodes-blotato.blotato",
          "typeVersion": 2,
          "position": [
            224,
            0
          ],
          "id": "034115c9-b29b-4775-976d-29e15bafd737",
          "name": "Upload media",
          "credentials": {}
        },
        {
          "parameters": {},
          "type": "@blotato/n8n-nodes-blotato.blotato",
          "typeVersion": 2,
          "position": [
            432,
            0
          ],
          "id": "ca9dbdfb-3780-4cfa-8232-84f9e0964720",
          "name": "X",
          "credentials": {}
        }
      ],
      "connections": {},
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "4ada2ff2-e627-483b-9d9c-5d80abd8aab0",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:46:34.229Z",
          "updatedAt": "2025-09-09T19:46:34.229Z",
          "role": "workflow:owner",
          "workflowId": "sNq0XXxi7DIfGKj0",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T16:44:23.423Z",
      "updatedAt": "2025-09-09T17:37:11.000Z",
      "id": "tbcP3UDSZNaGhIQd",
      "name": "n8n backup nightly",
      "active": true,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "rule": {
              "interval": [
                {}
              ]
            }
          },
          "id": "c660a0e5-1824-4973-a80d-5a38d2a7caa3",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.scheduleTrigger",
          "position": [
            -144,
            144
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "fieldsToAggregate": {
              "fieldToAggregate": [
                {
                  "fieldToAggregate": "name"
                }
              ]
            },
            "options": {}
          },
          "id": "e6d4a61c-015c-4ec7-b697-8d9b9ca7cbed",
          "name": "Aggregate",
          "type": "n8n-nodes-base.aggregate",
          "position": [
            192,
            144
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "list",
            "owner": {
              "__rl": true,
              "value": "bitcond",
              "mode": "name"
            },
            "repository": {
              "__rl": true,
              "value": "n8n",
              "mode": "list",
              "cachedResultName": "n8n",
              "cachedResultUrl": "https://github.com/bitcond/n8n"
            },
            "filePath": "="
          },
          "id": "87ae55f1-4947-4e38-987a-e2d757b317bc",
          "name": "List files from repo",
          "type": "n8n-nodes-base.github",
          "position": [
            32,
            144
          ],
          "webhookId": "354d699e-44b0-4444-9d31-af7fd4ff5561",
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "githubApi": {
              "id": "YBy8TgU29AhtGZmF",
              "name": "GitHub account"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "edit",
            "owner": {
              "__rl": true,
              "value": "bitcond",
              "mode": "name"
            },
            "repository": {
              "__rl": true,
              "value": "n8n",
              "mode": "list",
              "cachedResultName": "n8n",
              "cachedResultUrl": "https://github.com/bitcond/n8n"
            },
            "filePath": "={{ $('Retrieve workflows').item.json.name.replace(/\\s+/g, '-').toLowerCase() }}-{{ $('Retrieve workflows').item.json.tags[0].name }}.json",
            "fileContent": "={{ $('To base64').item.json.data }}",
            "commitMessage": "=backup-{{ $('Commit date & file name').item.json.commitDate }}"
          },
          "id": "c1fbf4c4-eb71-4295-9469-294d7f5a525c",
          "name": "Update file",
          "type": "n8n-nodes-base.github",
          "position": [
            1152,
            64
          ],
          "webhookId": "27218087-8df7-474d-a39f-70cfa9c34ec8",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "YBy8TgU29AhtGZmF",
              "name": "GitHub account"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "owner": {
              "__rl": true,
              "value": "bitcond",
              "mode": "name"
            },
            "repository": {
              "__rl": true,
              "value": "n8n",
              "mode": "list",
              "cachedResultName": "n8n",
              "cachedResultUrl": "https://github.com/bitcond/n8n"
            },
            "filePath": "={{ $('Retrieve workflows').item.json.name.replace(/\\s+/g, '-').toLowerCase() }}-{{ $('Retrieve workflows').item.json.tags[0].name }}.json",
            "fileContent": "={{ $('To base64').item.json.data }}",
            "commitMessage": "=backup-{{ $node['Commit date & file name'].json.commitDate }}"
          },
          "id": "3f2d499e-e02f-499b-8432-b725fb835a68",
          "name": "Upload file",
          "type": "n8n-nodes-base.github",
          "position": [
            1152,
            224
          ],
          "webhookId": "ce4b561b-acb9-4cd8-b76f-4928dada9674",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "YBy8TgU29AhtGZmF",
              "name": "GitHub account"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $('Aggregate').item.json.name }}",
                  "operation": "contains",
                  "value2": "={{ $('Retrieve workflows').item.json.name.replace(/\\s+/g, '-').toLowerCase() }}-{{ $('Retrieve workflows').item.json.tags[0].name }}.json"
                }
              ]
            }
          },
          "id": "7f564963-3331-42de-bde3-c870e9521338",
          "name": "Check if file exists",
          "type": "n8n-nodes-base.if",
          "position": [
            992,
            144
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "operation": "toJson",
            "mode": "each",
            "options": {
              "format": true
            }
          },
          "id": "8c35c587-4007-44a1-a7ac-aa7997861bbf",
          "name": "Json file",
          "type": "n8n-nodes-base.convertToFile",
          "position": [
            512,
            144
          ],
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "operation": "binaryToPropery",
            "options": {}
          },
          "id": "21c22a19-62bf-4fd3-aa99-b2169d179280",
          "name": "To base64",
          "type": "n8n-nodes-base.extractFromFile",
          "position": [
            672,
            144
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "content": "### Retrieve previous file names from Github",
            "height": 380,
            "width": 300,
            "color": 5
          },
          "id": "7f3dfb4a-a963-4734-8fe5-5dc21653c29b",
          "name": "Sticky Note1",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            0,
            0
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "fe4a36ef-9f04-40e3-99bd-cc517a49b440",
                  "name": "commitDate",
                  "type": "string",
                  "value": "={{ $now.format('dd-MM-yyyy/H:mm') }}"
                },
                {
                  "id": "b0fe1bcc-e79c-4a6b-b8b4-44222c8bf4e8",
                  "name": "fileName",
                  "type": "string",
                  "value": "={{ $('Retrieve workflows').item.json.name.replace(/\\s+/g, '-').toLowerCase() }}-{{ $('Retrieve workflows').item.json.tags[0].name }}.json"
                }
              ]
            },
            "options": {}
          },
          "id": "a438d92a-a705-4ad7-8673-cbcad13ff90a",
          "name": "Commit date & file name",
          "type": "n8n-nodes-base.set",
          "position": [
            832,
            144
          ],
          "typeVersion": 3.4
        },
        {
          "parameters": {
            "content": "### Retrieve and process workflows from n8n",
            "height": 380,
            "width": 460,
            "color": 3
          },
          "id": "e966e740-21ee-4574-b878-600d10a624df",
          "name": "Sticky Note2",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            320,
            0
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "content": "### Commit + edit/create files if needed",
            "height": 380,
            "width": 460,
            "color": 4
          },
          "id": "640ed3f6-63e3-47c6-a9f0-3a7ee3064890",
          "name": "Sticky Note3",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            800,
            0
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "url": "https://n8n-09ay.onrender.com/api/v1/workflows",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "X-N8N-API-KEY",
                  "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5MWJjNzQ2MS1mZGFjLTRiODktYjEzYy03NjRjNTA1NDk3NDIiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzU3NDM2MzEzfQ.l5T_aMG888c-Xt_fpf0Q-uKVmDJC6MSYVZ6B9IWnji8"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            352,
            144
          ],
          "id": "443dbc88-63fa-4fe7-8635-5f3281fe3230",
          "name": "Retrieve workflows"
        }
      ],
      "connections": {
        "Aggregate": {
          "main": [
            [
              {
                "node": "Retrieve workflows",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Json file": {
          "main": [
            [
              {
                "node": "To base64",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "To base64": {
          "main": [
            [
              {
                "node": "Commit date & file name",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "List files from repo",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check if file exists": {
          "main": [
            [
              {
                "node": "Update file",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Upload file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "List files from repo": {
          "main": [
            [
              {
                "node": "Aggregate",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Commit date & file name": {
          "main": [
            [
              {
                "node": "Check if file exists",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Retrieve workflows": {
          "main": [
            [
              {
                "node": "Json file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": {
        "node:Schedule Trigger": {
          "recurrenceRules": []
        }
      },
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "61a11927-b087-4927-9301-b1a91b7535fd",
      "triggerCount": 1,
      "shared": [
        {
          "createdAt": "2025-09-09T16:44:23.427Z",
          "updatedAt": "2025-09-09T16:44:23.427Z",
          "role": "workflow:owner",
          "workflowId": "tbcP3UDSZNaGhIQd",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    },
    {
      "createdAt": "2025-09-09T19:46:12.524Z",
      "updatedAt": "2025-09-09T19:46:12.524Z",
      "id": "w500mloll6XQAlap",
      "name": "TikTok Post Tool (Nate Herk)",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "fileID"
                },
                {
                  "name": "text"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            48,
            48
          ],
          "id": "06175743-6b12-4656-ba6c-1b7782289aae",
          "name": "When Executed by Another Workflow"
        },
        {
          "parameters": {},
          "type": "@blotato/n8n-nodes-blotato.blotato",
          "typeVersion": 2,
          "position": [
            272,
            48
          ],
          "id": "46d62937-f5e8-4a9f-9672-ae3e41c20b1e",
          "name": "Upload media",
          "credentials": {}
        },
        {
          "parameters": {},
          "type": "@blotato/n8n-nodes-blotato.blotato",
          "typeVersion": 2,
          "position": [
            480,
            48
          ],
          "id": "9707f80d-64b7-44a4-9c0a-90e2604c5b84",
          "name": "TikTok",
          "credentials": {}
        }
      ],
      "connections": {},
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "6f11257d-82fe-4d94-a869-81b69550763f",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-09-09T19:46:12.526Z",
          "updatedAt": "2025-09-09T19:46:12.526Z",
          "role": "workflow:owner",
          "workflowId": "w500mloll6XQAlap",
          "projectId": "y0j9Ntym6Dm3Y9my"
        }
      ],
      "tags": []
    }
  ],
  "nextCursor": null
}